{
    "project": {
        "name": "Itsa",
        "description": "Itsa modules",
        "version": "0.0.1",
        "url": "https://github.com/itsa"
    },
    "files": {
        "server/mocha/chai.js": {
            "name": "server/mocha/chai.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "server/mocha/mocha.js": {
            "name": "server/mocha/mocha.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "server/mocha/should.js": {
            "name": "server/mocha/should.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "server/polyfills/lib/agent.js": {
            "name": "server/polyfills/lib/agent.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "server/polyfills/lib/aliases.js": {
            "name": "server/polyfills/lib/aliases.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "server/polyfills/polyfills/html5shiv/polyfill.js": {
            "name": "server/polyfills/polyfills/html5shiv/polyfill.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "server/polyfills/helpers.js": {
            "name": "server/polyfills/helpers.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "site/dist/itagsbuild.js": {
            "name": "site/dist/itagsbuild.js",
            "modules": {
                "lib/array.js": 1,
                "lib/object.js": 1,
                "lib/promise.s": 1,
                "lib/string.js": 1,
                "attribute-extractor": 1,
                "element-array": 1,
                "element-plugin": 1,
                "extend-document": 1,
                "extend-element": 1,
                "html-parser": 1,
                "node-parser": 1,
                "vdom-ns": 1,
                "vnode": 1
            },
            "classes": {},
            "fors": {
                "Node": 1,
                "Element": 1
            },
            "namespaces": {}
        },
        "site-preview/dist/itagsbuild.js": {
            "name": "site-preview/dist/itagsbuild.js",
            "modules": {
                "node-win": 1,
                "utils": 1,
                "itsa.build": 1
            },
            "classes": {
                "window": 1,
                "Array": 1,
                "Object": 1,
                "Promise": 1,
                "String": 1,
                "Utils": 1,
                "ElementArray": 1,
                "Plugins": 1,
                "document": 1,
                "Element": 1,
                "NS-vdom": 1,
                "vnode": 1
            },
            "fors": {
                "Node": 1,
                "Element": 1
            },
            "namespaces": {}
        },
        "src/itags.build/itags.build.js": {
            "name": "src/itags.build/itags.build.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/itags.core/tests/itsa.build.js": {
            "name": "src/itags.core/tests/itsa.build.js",
            "modules": {},
            "classes": {
                "ITSA": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/itags.core/itags.core.js": {
            "name": "src/itags.core/itags.core.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "node-win": {
            "name": "node-win",
            "submodules": {},
            "classes": {},
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "site-preview/dist/itagsbuild.js",
            "line": 658,
            "description": "Emulation of browser `window` and `dom`. Just enough to make ITSA work.\n\n\n<i>Copyright (c) 2014 ITSA - https://github.com/itsa</i>\nNew BSD License - http://choosealicense.com/licenses/bsd-3-clause/",
            "static": 1
        },
        "js-ext": {
            "name": "js-ext",
            "submodules": {
                "lib/array.js": 1,
                "lib/object.js": 1,
                "lib/promise.s": 1
            },
            "classes": {
                "window": 1,
                "Array": 1,
                "Object": 1,
                "Promise": 1
            },
            "fors": {},
            "namespaces": {},
            "file": "site-preview/dist/itagsbuild.js",
            "line": 1466
        },
        "lib/array.js": {
            "name": "lib/array.js",
            "submodules": {},
            "classes": {
                "window": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "js-ext",
            "namespace": "",
            "file": "site-preview/dist/itagsbuild.js",
            "line": 658,
            "description": "Pollyfils for often used functionality for Arrays\n<i>Copyright (c) 2014 ITSA - https://github.com/itsa</i>\n New BSD License - http://choosealicense.com/licenses/bsd-3-clause/"
        },
        "lib/object.js": {
            "name": "lib/object.js",
            "submodules": {},
            "classes": {
                "Array": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "js-ext",
            "namespace": "",
            "file": "site-preview/dist/itagsbuild.js",
            "line": 868,
            "description": "Pollyfils for often used functionality for Objects\n<i>Copyright (c) 2014 ITSA - https://github.com/itsa</i>\n New BSD License - http://choosealicense.com/licenses/bsd-3-clause/"
        },
        "lib/promise.s": {
            "name": "lib/promise.s",
            "submodules": {},
            "classes": {
                "Object": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "js-ext",
            "namespace": "",
            "file": "site-preview/dist/itagsbuild.js",
            "line": 1166,
            "description": "Provides additional Promise-methods. These are extra methods which are not part of the PromiseA+ specification,\nBut are all Promise/A+ compatable.\n\n<i>Copyright (c) 2014 ITSA - https://github.com/itsa</i>\nNew BSD License - http://choosealicense.com/licenses/bsd-3-clause/"
        },
        "lib/string.js": {
            "name": "lib/string.js",
            "submodules": {},
            "classes": {
                "Promise": 1,
                "String": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "utils",
            "namespace": "",
            "file": "site-preview/dist/itagsbuild.js",
            "line": 1769,
            "description": "Pollyfils for often used functionality for Strings\n<i>Copyright (c) 2014 ITSA - https://github.com/itsa</i>\n New BSD License - http://choosealicense.com/licenses/bsd-3-clause/"
        },
        "utils": {
            "name": "utils",
            "submodules": {
                "lib/string.js": 1
            },
            "classes": {
                "String": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "site-preview/dist/itagsbuild.js",
            "line": 1769,
            "description": "Collection of various utility functions.\n\n\n<i>Copyright (c) 2014 ITSA - https://github.com/itsa</i>\nNew BSD License - http://choosealicense.com/licenses/bsd-3-clause/",
            "static": 1
        },
        "vdom": {
            "name": "vdom",
            "submodules": {
                "element-array": 1,
                "attribute-extractor": 1,
                "element-plugin": 1,
                "extend-document": 1,
                "extend-element": 1,
                "html-parser": 1,
                "node-parser": 1,
                "vdom-ns": 1
            },
            "classes": {
                "Utils": 1,
                "ElementArray": 1,
                "Plugins": 1,
                "document": 1,
                "Element": 1,
                "Node": 1,
                "NS-vdom": 1
            },
            "fors": {
                "Node": 1,
                "Element": 1
            },
            "namespaces": {},
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8791
        },
        "attribute-extractor": {
            "name": "attribute-extractor",
            "submodules": {},
            "classes": {},
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "vdom",
            "namespace": "",
            "file": "site/dist/itagsbuild.js",
            "line": 2518,
            "description": "Exports `htmlToVNodes` which transforms html-text into vnodes.\n\n\n<i>Copyright (c) 2014 ITSA - https://github.com/itsa</i>\n<br>\nNew BSD License - http://choosealicense.com/licenses/bsd-3-clause/",
            "since": "0.0.1"
        },
        "element-array": {
            "name": "element-array",
            "submodules": {},
            "classes": {
                "Utils": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "vdom",
            "namespace": "",
            "file": "site-preview/dist/itagsbuild.js",
            "line": 2237,
            "description": "Extends Array into an array with special utility-methods that can be applied upon its members.\nThe membres should be vElement's\n\n\n<i>Copyright (c) 2014 ITSA - https://github.com/itsa</i>\n<br>\nNew BSD License - http://choosealicense.com/licenses/bsd-3-clause/",
            "since": "0.0.1"
        },
        "element-plugin": {
            "name": "element-plugin",
            "submodules": {},
            "classes": {
                "ElementArray": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "vdom",
            "namespace": "",
            "file": "site-preview/dist/itagsbuild.js",
            "line": 2820,
            "description": "Integrates DOM-events to event. more about DOM-events:\nhttp://www.smashingmagazine.com/2013/11/12/an-introduction-to-dom-events/\n\n\n<i>Copyright (c) 2014 ITSA - https://github.com/itsa</i>\nNew BSD License - http://choosealicense.com/licenses/bsd-3-clause/",
            "since": "0.0.1"
        },
        "extend-document": {
            "name": "extend-document",
            "submodules": {},
            "classes": {
                "Plugins": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "vdom",
            "namespace": "",
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3212,
            "description": "Provides several methods that override native document-methods to work with the vdom.\n\n\n<i>Copyright (c) 2014 ITSA - https://github.com/itsa</i>\n<br>\nNew BSD License - http://choosealicense.com/licenses/bsd-3-clause/",
            "since": "0.0.1"
        },
        "extend-element": {
            "name": "extend-element",
            "submodules": {},
            "classes": {
                "document": 1,
                "Node": 1
            },
            "fors": {
                "Node": 1,
                "Element": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "vdom",
            "namespace": "",
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3343,
            "description": "Provides several methods that override native Element-methods to work with the vdom.\n\n\n<i>Copyright (c) 2014 ITSA - https://github.com/itsa</i>\n<br>\nNew BSD License - http://choosealicense.com/licenses/bsd-3-clause/",
            "since": "0.0.1"
        },
        "html-parser": {
            "name": "html-parser",
            "submodules": {},
            "classes": {},
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "vdom",
            "namespace": "",
            "file": "site/dist/itagsbuild.js",
            "line": 8338,
            "description": "Exports `htmlToVNodes` which transforms html-text into vnodes.\n\n\n<i>Copyright (c) 2014 ITSA - https://github.com/itsa</i>\n<br>\nNew BSD License - http://choosealicense.com/licenses/bsd-3-clause/",
            "since": "0.0.1"
        },
        "node-parser": {
            "name": "node-parser",
            "submodules": {},
            "classes": {},
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "vdom",
            "namespace": "",
            "file": "site/dist/itagsbuild.js",
            "line": 8670,
            "description": "Exports `domNodeToVNode` which transforms dom-nodes into vnodes.\n\n\n<i>Copyright (c) 2014 ITSA - https://github.com/itsa</i><br>\nNew BSD License - http://choosealicense.com/licenses/bsd-3-clause/",
            "since": "0.0.1"
        },
        "vdom-ns": {
            "name": "vdom-ns",
            "submodules": {},
            "classes": {
                "Element": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "vdom",
            "namespace": "",
            "file": "site-preview/dist/itagsbuild.js",
            "line": 4023,
            "description": "Creates a Namespace that can be used accros multiple vdom-modules to share information.\n\n\n<i>Copyright (c) 2014 ITSA - https://github.com/itsa</i>\n<br>\nNew BSD License - http://choosealicense.com/licenses/bsd-3-clause/",
            "since": "0.0.1"
        },
        "vnode": {
            "name": "vnode",
            "submodules": {},
            "classes": {
                "NS-vdom": 1,
                "vnode": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "itsa.build",
            "namespace": "",
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8901,
            "description": "Delivers the `vnode` prototype object, which is a virtualisation of an `Element` inside the Dom.\nThese Elements work smoothless with the vdom (see ...).\n\nvnodes are much quicker to access and walk through than native dom-nodes. However, this is a module you don't need\nby itself: `Element`-types use these features under the hood.\n\n\n<i>Copyright (c) 2014 ITSA - https://github.com/itsa</i>\n<br>\nNew BSD License - http://choosealicense.com/licenses/bsd-3-clause/",
            "since": "0.0.1"
        },
        "itsa.build": {
            "name": "itsa.build",
            "submodules": {
                "vnode": 1
            },
            "classes": {
                "vnode": 1,
                "ITSA": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/itags.core/tests/itsa.build.js",
            "line": 20,
            "description": "The ITSA module is an aggregator for all the individual modules that the library uses.\nThe developer is free to use it as it is or tailor it to contain whatever modules\nhe/she might need in the global namespace.\n\nThe modules themselves work quite well independent of this module and can be used\nseparately without the need of them being integrated under one globa namespace.\n\n\n<i>Copyright (c) 2014 ITSA - https://github.com/itsa</i>\nNew BSD License - http://choosealicense.com/licenses/bsd-3-clause/"
        }
    },
    "classes": {
        "window": {
            "name": "window",
            "shortname": "window",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "js-ext",
            "namespace": "",
            "file": "site-preview/dist/itagsbuild.js",
            "line": 658,
            "description": "Emulation of browser `window` and `dom`. Just enough to make ITSA work.\n\n\n<i>Copyright (c) 2014 ITSA - https://github.com/itsa</i>\nNew BSD License - http://choosealicense.com/licenses/bsd-3-clause/",
            "submodule": "lib/array.js"
        },
        "Array": {
            "name": "Array",
            "shortname": "Array",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "js-ext",
            "submodule": "lib/object.js",
            "namespace": "",
            "file": "site-preview/dist/itagsbuild.js",
            "line": 868,
            "description": "Pollyfils for often used functionality for Arrays\n<i>Copyright (c) 2014 ITSA - https://github.com/itsa</i>\n New BSD License - http://choosealicense.com/licenses/bsd-3-clause/"
        },
        "Object": {
            "name": "Object",
            "shortname": "Object",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "js-ext",
            "submodule": "lib/promise.s",
            "namespace": "",
            "file": "site-preview/dist/itagsbuild.js",
            "line": 1166,
            "description": "Pollyfils for often used functionality for objects"
        },
        "Promise": {
            "name": "Promise",
            "shortname": "Promise",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "js-ext",
            "submodule": "lib/string.js",
            "namespace": "",
            "file": "site-preview/dist/itagsbuild.js",
            "line": 1466,
            "description": "Provides additional Promise-methods. These are extra methods which are not part of the PromiseA+ specification,\nBut are all Promise/A+ compatable.\n\n<i>Copyright (c) 2014 ITSA - https://github.com/itsa</i>\nNew BSD License - http://choosealicense.com/licenses/bsd-3-clause/"
        },
        "String": {
            "name": "String",
            "shortname": "String",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "utils",
            "submodule": "lib/string.js",
            "namespace": "",
            "file": "site-preview/dist/itagsbuild.js",
            "line": 1769,
            "description": "Pollyfils for often used functionality for Strings\n<i>Copyright (c) 2014 ITSA - https://github.com/itsa</i>\n New BSD License - http://choosealicense.com/licenses/bsd-3-clause/"
        },
        "Utils": {
            "name": "Utils",
            "shortname": "Utils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "vdom",
            "namespace": "",
            "file": "site-preview/dist/itagsbuild.js",
            "line": 2237,
            "description": "Collection of various utility functions.\n\n\n<i>Copyright (c) 2014 ITSA - https://github.com/itsa</i>\nNew BSD License - http://choosealicense.com/licenses/bsd-3-clause/",
            "submodule": "element-array"
        },
        "ElementArray": {
            "name": "ElementArray",
            "shortname": "ElementArray",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "vdom",
            "submodule": "element-plugin",
            "namespace": "",
            "file": "site-preview/dist/itagsbuild.js",
            "line": 2820,
            "description": "Extends Array into an array with special utility-methods that can be applied upon its members.\nThe membres should be vElement's\n\n\n<i>Copyright (c) 2014 ITSA - https://github.com/itsa</i>\n<br>\nNew BSD License - http://choosealicense.com/licenses/bsd-3-clause/"
        },
        "Plugins": {
            "name": "Plugins",
            "shortname": "Plugins",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "vdom",
            "submodule": "extend-document",
            "namespace": "",
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3212,
            "description": "Integrates DOM-events to event. more about DOM-events:\nhttp://www.smashingmagazine.com/2013/11/12/an-introduction-to-dom-events/\n\n\n<i>Copyright (c) 2014 ITSA - https://github.com/itsa</i>\nNew BSD License - http://choosealicense.com/licenses/bsd-3-clause/"
        },
        "document": {
            "name": "document",
            "shortname": "document",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "vdom",
            "submodule": "extend-element",
            "namespace": "",
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3343,
            "description": "Provides several methods that override native document-methods to work with the vdom.\n\n\n<i>Copyright (c) 2014 ITSA - https://github.com/itsa</i>\n<br>\nNew BSD License - http://choosealicense.com/licenses/bsd-3-clause/"
        },
        "Element": {
            "name": "Element",
            "shortname": "Element",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "vdom",
            "submodule": "vdom-ns",
            "namespace": "",
            "file": "site-preview/dist/itagsbuild.js",
            "line": 4023,
            "description": "Provides several methods that override native Element-methods to work with the vdom.\n\n\n<i>Copyright (c) 2014 ITSA - https://github.com/itsa</i>\n<br>\nNew BSD License - http://choosealicense.com/licenses/bsd-3-clause/"
        },
        "Node": {
            "name": "Node",
            "shortname": "Node",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "vdom",
            "submodule": "extend-element",
            "namespace": ""
        },
        "NS-vdom": {
            "name": "NS-vdom",
            "shortname": "NS-vdom",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "vdom",
            "submodule": "vnode",
            "namespace": "",
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8791,
            "description": "Creates a Namespace that can be used accros multiple vdom-modules to share information.\n\n\n<i>Copyright (c) 2014 ITSA - https://github.com/itsa</i>\n<br>\nNew BSD License - http://choosealicense.com/licenses/bsd-3-clause/"
        },
        "vnode": {
            "name": "vnode",
            "shortname": "vnode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "itsa.build",
            "submodule": "vnode",
            "namespace": "",
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8901,
            "description": "Delivers the `vnode` prototype object, which is a virtualisation of an `Element` inside the Dom.\nThese Elements work smoothless with the vdom (see ...).\n\nvnodes are much quicker to access and walk through than native dom-nodes. However, this is a module you don't need\nby itself: `Element`-types use these features under the hood.\n\n\n<i>Copyright (c) 2014 ITSA - https://github.com/itsa</i>\n<br>\nNew BSD License - http://choosealicense.com/licenses/bsd-3-clause/"
        },
        "ITSA": {
            "name": "ITSA",
            "shortname": "ITSA",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "itsa.build",
            "namespace": "",
            "file": "src/itags.core/tests/itsa.build.js",
            "line": 20,
            "description": "The ITSA class provides the core functionality for the ITSA library\nand is the root namespace for all the additional modules.\n\nThe ITSA class cannot be instantiated.\nInstead, the ITSA function takes a configuration object to allow for tailoring of the library.\nThe ITSA function returns itself to allow for further chaining.\n\nCalling the ITSA function is optional. If the default configuration is acceptable,\nthe ITSA class can be used directly.\n\nThe ITSA name is usually used only once in an application, when configuring it\nand when calling the [`ready`](#method_ready) or [`require`](#method_require) methods.\nThe callback to these two methods provide a reference to ITSA itself as their argument.\nThese methods allow the developer to rename ITSA to a shorter name, usually `P`,\nfor use within the local scope.\n\n ITSA( config )\n     .require('dialog', 'event', ...)\n     .then(function (P) {\n         // P is an alias of ITSA\n     });\n\n // If the default configuration is acceptable, you can simply do:\n ITSA.require('dialog', 'event', ...)\n     .then(function (P) {\n         // P is an alias of ITSA\n     });\n\n // If extra modules are to be loaded later, you can simply do:\n ITSA( config ).ready\n     .then(function (P) {\n         // P is an alias of ITSA\n     });\n\n // And if no configuration is needed:\n ITSA.ready\n     .then(function (P) {\n         // P is an alias of ITSA\n     });",
            "static": 1,
            "params": [
                {
                    "name": "config",
                    "description": "Configuration options for the ITSA Library",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "self",
                "type": "Object"
            }
        }
    },
    "classitems": [
        {
            "file": "server/mocha/chai.js",
            "line": 3,
            "description": "Require the given path.",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "exports",
                "type": "Object"
            },
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 43,
            "description": "Registered modules.",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 49,
            "description": "Registered aliases.",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 55,
            "description": "Resolve `path`.\n\nLookup:\n\n  - PATH/index.js\n  - PATH.js\n  - PATH",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "path or null",
                "type": "String"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 87,
            "description": "Normalize `path` relative to the current path.",
            "params": [
                {
                    "name": "curr",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 115,
            "description": "Register module at `path` with callback `definition`.",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "definition",
                    "description": "",
                    "type": "Function"
                }
            ],
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 127,
            "description": "Alias a module definition.",
            "params": [
                {
                    "name": "from",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "to",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 142,
            "description": "Return a require function relative to the `parent` path.",
            "params": [
                {
                    "name": "parent",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 153,
            "description": "lastIndexOf helper.",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 165,
            "description": "The relative require() itself.",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 174,
            "description": "Resolve relative to the parent.",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 193,
            "description": "Check if module is defined at `path`.",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 247,
            "description": "### AssertionError\n\nAn extension of the JavaScript `Error` constructor for\nassertion and validation scenarios.",
            "params": [
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "properties",
                    "description": "to include (optional)",
                    "type": "Object"
                },
                {
                    "name": "start",
                    "description": "stack function (optional)",
                    "type": "Callee"
                }
            ],
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 296,
            "description": "Allow errors to be converted to JSON for static transfer.",
            "params": [
                {
                    "name": "include",
                    "description": "stack (default: `true`)",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "object that can be `JSON.stringify`",
                "type": "Object"
            },
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 341,
            "description": "### typeOf (obj)\n\nUse several different techniques to determine\nthe type of object being tested.",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "object type",
                "type": "String"
            },
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 364,
            "description": "### Library\n\nCreate a repository for custom type detection.\n\n```js\nvar lib = new type.Library;\n```",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 379,
            "description": "#### .of (obj)\n\nExpose replacement `typeof` detection to the library.\n\n```js\nif ('string' === lib.of('hello world')) {\n  // ...\n}\n```",
            "params": [
                {
                    "name": "object",
                    "description": "to test",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "type",
                "type": "String"
            },
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 396,
            "description": "#### .define (type, test)\n\nAdd a test to for the `.test()` assertion.\n\nCan be defined as a regular expression:\n\n```js\nlib.define('int', /^[0-9]+$/);\n```\n\n... or as a function:\n\n```js\nlib.define('bln', function (obj) {\n  if ('boolean' === lib.of(obj)) return true;\n  var blns = [ 'yes', 'no', 'true', 'false', 1, 0 ];\n  if ('string' === lib.of(obj)) obj = obj.toLowerCase();\n  return !! ~blns.indexOf(obj);\n});\n```",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "test",
                    "description": "",
                    "type": "RegExp|Function"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 429,
            "description": "#### .test (obj, test)\n\nAssert that an object is of type. Will first\ncheck natives, and if that does not pass it will\nuse the user defined custom tests.\n\n```js\nassert(lib.test('1', 'int'));\nassert(lib.test('yes', 'bln'));\n```",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "result",
                "type": "Boolean"
            },
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 491,
            "description": "Assert super-strict (egal) equality between\ntwo objects of any type.",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "memoised",
                    "description": "(optional)",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "equal match",
                "type": "Boolean"
            },
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 753,
            "description": "# .use(function)\n\nProvides a way to extend the internals of Chai",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "for chaining",
                "type": "This"
            },
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 951,
            "description": "### config.includeStack\n\nUser configurable property, influences whether stack trace\nis included in Assertion error message. Default of false\nsuppresses stack trace in the error message.\n\n    chai.config.includeStack = true;  // enable stack on error",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 966,
            "description": "### config.showDiff\n\nUser configurable property, influences whether or not\nthe `showDiff` flag should be included in the thrown\nAssertionErrors. `false` will always be `false`; `true`\nwill be true when the assertion has requested a diff\nbe shown.",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 981,
            "description": "### config.truncateThreshold\n\nUser configurable property, sets length threshold for actual and\nexpected values in assertion errors. If this threshold is exceeded,\nthe value is truncated.\n\nSet it to zero if you want to disable truncating altogether.\n\n    chai.config.truncateThreshold = 0;  // disable truncating",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Number"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 1014,
            "description": "### Language Chains\n\nThe following are provided as chainable getters to\nimprove the readability of your assertions. They\ndo not provide testing capabilities unless they\nhave been overwritten by a plugin.\n\n**Chains**\n\n- to\n- be\n- been\n- is\n- that\n- and\n- has\n- have\n- with\n- at\n- of\n- same",
            "name": "language chains",
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 1050,
            "description": "### .not\n\nNegates any of assertions following in the chain.\n\n    expect(foo).to.not.equal('bar');\n    expect(goodFn).to.not.throw(Error);\n    expect({ foo: 'baz' }).to.have.property('foo')\n      .and.not.equal('bar');",
            "name": "not",
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 1068,
            "description": "### .deep\n\nSets the `deep` flag, later used by the `equal` and\n`property` assertions.\n\n    expect(foo).to.deep.equal({ bar: 'baz' });\n    expect({ foo: { bar: { baz: 'quux' } } })\n      .to.have.deep.property('foo.bar.baz', 'quux');",
            "name": "deep",
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 1086,
            "description": "### .a(type)\n\nThe `a` and `an` assertions are aliases that can be\nused either as language chains or to assert a value's\ntype.\n\n    // typeof\n    expect('test').to.be.a('string');\n    expect({ foo: 'bar' }).to.be.an('object');\n    expect(null).to.be.a('null');\n    expect(undefined).to.be.an('undefined');\n\n    // language chain\n    expect(foo).to.be.an.instanceof(Foo);",
            "name": "a",
            "alias": "an",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "_optional_",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 1125,
            "description": "### .include(value)\n\nThe `include` and `contain` assertions can be used as either property\nbased language chains or as methods to assert the inclusion of an object\nin an array or a substring in a string. When used as language chains,\nthey toggle the `contain` flag for the `keys` assertion.\n\n    expect([1,2,3]).to.include(2);\n    expect('foobar').to.contain('foo');\n    expect({ foo: 'bar', hello: 'universe' }).to.include.keys('foo');",
            "name": "include",
            "alias": "contain",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object|String|Number"
                },
                {
                    "name": "message",
                    "description": "_optional_",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 1179,
            "description": "### .ok\n\nAsserts that the target is truthy.\n\n    expect('everthing').to.be.ok;\n    expect(1).to.be.ok;\n    expect(false).to.not.be.ok;\n    expect(undefined).to.not.be.ok;\n    expect(null).to.not.be.ok;",
            "name": "ok",
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 1201,
            "description": "### .true\n\nAsserts that the target is `true`.\n\n    expect(true).to.be.true;\n    expect(1).to.not.be.true;",
            "name": "true",
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 1222,
            "description": "### .false\n\nAsserts that the target is `false`.\n\n    expect(false).to.be.false;\n    expect(0).to.not.be.false;",
            "name": "false",
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 1243,
            "description": "### .null\n\nAsserts that the target is `null`.\n\n    expect(null).to.be.null;\n    expect(undefined).not.to.be.null;",
            "name": "null",
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 1263,
            "description": "### .undefined\n\nAsserts that the target is `undefined`.\n\n    expect(undefined).to.be.undefined;\n    expect(null).to.not.be.undefined;",
            "name": "undefined",
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 1283,
            "description": "### .exist\n\nAsserts that the target is neither `null` nor `undefined`.\n\n    var foo = 'hi'\n      , bar = null\n      , baz;\n\n    expect(foo).to.exist;\n    expect(bar).to.not.exist;\n    expect(baz).to.not.exist;",
            "name": "exist",
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 1309,
            "description": "### .empty\n\nAsserts that the target's length is `0`. For arrays, it checks\nthe `length` property. For objects, it gets the count of\nenumerable keys.\n\n    expect([]).to.be.empty;\n    expect('').to.be.empty;\n    expect({}).to.be.empty;",
            "name": "empty",
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 1341,
            "description": "### .arguments\n\nAsserts that the target is an arguments object.\n\n    function test () {\n      expect(arguments).to.be.arguments;\n    }",
            "name": "arguments",
            "alias": "Arguments",
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 1368,
            "description": "### .equal(value)\n\nAsserts that the target is strictly equal (`===`) to `value`.\nAlternately, if the `deep` flag is set, asserts that\nthe target is deeply equal to `value`.\n\n    expect('hello').to.equal('hello');\n    expect(42).to.equal(42);\n    expect(1).to.not.equal(true);\n    expect({ foo: 'bar' }).to.not.equal({ foo: 'bar' });\n    expect({ foo: 'bar' }).to.deep.equal({ foo: 'bar' });",
            "name": "equal",
            "alias": "deep.equal",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "_optional_",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 1411,
            "description": "### .eql(value)\n\nAsserts that the target is deeply equal to `value`.\n\n    expect({ foo: 'bar' }).to.eql({ foo: 'bar' });\n    expect([ 1, 2, 3 ]).to.eql([ 1, 2, 3 ]);",
            "name": "eql",
            "alias": "eqls",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "_optional_",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 1441,
            "description": "### .above(value)\n\nAsserts that the target is greater than `value`.\n\n    expect(10).to.be.above(5);\n\nCan also be used in conjunction with `length` to\nassert a minimum length. The benefit being a\nmore informative error message than if the length\nwas supplied directly.\n\n    expect('foo').to.have.length.above(2);\n    expect([ 1, 2, 3 ]).to.have.length.above(2);",
            "name": "above",
            "alias": "greaterThan",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "message",
                    "description": "_optional_",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 1490,
            "description": "### .least(value)\n\nAsserts that the target is greater than or equal to `value`.\n\n    expect(10).to.be.at.least(10);\n\nCan also be used in conjunction with `length` to\nassert a minimum length. The benefit being a\nmore informative error message than if the length\nwas supplied directly.\n\n    expect('foo').to.have.length.of.at.least(2);\n    expect([ 1, 2, 3 ]).to.have.length.of.at.least(3);",
            "name": "least",
            "alias": "gte",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "message",
                    "description": "_optional_",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 1537,
            "description": "### .below(value)\n\nAsserts that the target is less than `value`.\n\n    expect(5).to.be.below(10);\n\nCan also be used in conjunction with `length` to\nassert a maximum length. The benefit being a\nmore informative error message than if the length\nwas supplied directly.\n\n    expect('foo').to.have.length.below(4);\n    expect([ 1, 2, 3 ]).to.have.length.below(4);",
            "name": "below",
            "alias": "lessThan",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "message",
                    "description": "_optional_",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 1586,
            "description": "### .most(value)\n\nAsserts that the target is less than or equal to `value`.\n\n    expect(5).to.be.at.most(5);\n\nCan also be used in conjunction with `length` to\nassert a maximum length. The benefit being a\nmore informative error message than if the length\nwas supplied directly.\n\n    expect('foo').to.have.length.of.at.most(4);\n    expect([ 1, 2, 3 ]).to.have.length.of.at.most(3);",
            "name": "most",
            "alias": "lte",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "message",
                    "description": "_optional_",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 1633,
            "description": "### .within(start, finish)\n\nAsserts that the target is within a range.\n\n    expect(7).to.be.within(5,10);\n\nCan also be used in conjunction with `length` to\nassert a length range. The benefit being a\nmore informative error message than if the length\nwas supplied directly.\n\n    expect('foo').to.have.length.within(2,4);\n    expect([ 1, 2, 3 ]).to.have.length.within(2,4);",
            "name": "within",
            "params": [
                {
                    "name": "start",
                    "description": "lowerbound inclusive",
                    "type": "Number"
                },
                {
                    "name": "finish",
                    "description": "upperbound inclusive",
                    "type": "Number"
                },
                {
                    "name": "message",
                    "description": "_optional_",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 1676,
            "description": "### .instanceof(constructor)\n\nAsserts that the target is an instance of `constructor`.\n\n    var Tea = function (name) { this.name = name; }\n      , Chai = new Tea('chai');\n\n    expect(Chai).to.be.an.instanceof(Tea);\n    expect([ 1, 2, 3 ]).to.be.instanceof(Array);",
            "name": "instanceof",
            "params": [
                {
                    "name": "constructor",
                    "description": "",
                    "type": "Constructor"
                },
                {
                    "name": "message",
                    "description": "_optional_",
                    "type": "String"
                }
            ],
            "alias": "instanceOf",
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 1707,
            "description": "### .property(name, [value])\n\nAsserts that the target has a property `name`, optionally asserting that\nthe value of that property is strictly equal to  `value`.\nIf the `deep` flag is set, you can use dot- and bracket-notation for deep\nreferences into objects and arrays.\n\n    // simple referencing\n    var obj = { foo: 'bar' };\n    expect(obj).to.have.property('foo');\n    expect(obj).to.have.property('foo', 'bar');\n\n    // deep referencing\n    var deepObj = {\n        green: { tea: 'matcha' }\n      , teas: [ 'chai', 'matcha', { tea: 'konacha' } ]\n    };\n\n    expect(deepObj).to.have.deep.property('green.tea', 'matcha');\n    expect(deepObj).to.have.deep.property('teas[1]', 'matcha');\n    expect(deepObj).to.have.deep.property('teas[2].tea', 'konacha');\n\nYou can also use an array as the starting point of a `deep.property`\nassertion, or traverse nested arrays.\n\n    var arr = [\n        [ 'chai', 'matcha', 'konacha' ]\n      , [ { tea: 'chai' }\n        , { tea: 'matcha' }\n        , { tea: 'konacha' } ]\n    ];\n\n    expect(arr).to.have.deep.property('[0][1]', 'matcha');\n    expect(arr).to.have.deep.property('[1][2].tea', 'konacha');\n\nFurthermore, `property` changes the subject of the assertion\nto be the value of that property from the original object. This\npermits for further chainable assertions on that property.\n\n    expect(obj).to.have.property('foo')\n      .that.is.a('string');\n    expect(deepObj).to.have.property('green')\n      .that.is.an('object')\n      .that.deep.equals({ tea: 'matcha' });\n    expect(deepObj).to.have.property('teas')\n      .that.is.an('array')\n      .with.deep.property('[2]')\n        .that.deep.equals({ tea: 'konacha' });",
            "name": "property",
            "alias": "deep.property",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "(optional)",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "_optional_",
                    "type": "String"
                }
            ],
            "return": {
                "description": "value of property for chaining"
            },
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 1802,
            "description": "### .ownProperty(name)\n\nAsserts that the target has an own property `name`.\n\n    expect('test').to.have.ownProperty('length');",
            "name": "ownProperty",
            "alias": "haveOwnProperty",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "_optional_",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 1829,
            "description": "### .length(value)\n\nAsserts that the target's `length` property has\nthe expected value.\n\n    expect([ 1, 2, 3]).to.have.length(3);\n    expect('foobar').to.have.length(6);\n\nCan also be used as a chain precursor to a value\ncomparison for the length property.\n\n    expect('foo').to.have.length.above(2);\n    expect([ 1, 2, 3 ]).to.have.length.above(2);\n    expect('foo').to.have.length.below(4);\n    expect([ 1, 2, 3 ]).to.have.length.below(4);\n    expect('foo').to.have.length.within(2,4);\n    expect([ 1, 2, 3 ]).to.have.length.within(2,4);",
            "name": "length",
            "alias": "lengthOf",
            "params": [
                {
                    "name": "length",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "message",
                    "description": "_optional_",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 1877,
            "description": "### .match(regexp)\n\nAsserts that the target matches a regular expression.\n\n    expect('foobar').to.match(/^foo/);",
            "name": "match",
            "params": [
                {
                    "name": "RegularExpression",
                    "description": "",
                    "type": "RegExp"
                },
                {
                    "name": "message",
                    "description": "_optional_",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 1900,
            "description": "### .string(string)\n\nAsserts that the string target contains another string.\n\n    expect('foobar').to.have.string('bar');",
            "name": "string",
            "params": [
                {
                    "name": "string",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "_optional_",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 1926,
            "description": "### .keys(key1, [key2], [...])\n\nAsserts that the target has exactly the given keys, or\nasserts the inclusion of some keys when using the\n`include` or `contain` modifiers.\n\n    expect({ foo: 1, bar: 2 }).to.have.keys(['foo', 'bar']);\n    expect({ foo: 1, bar: 2, baz: 3 }).to.contain.keys('foo', 'bar');",
            "name": "keys",
            "alias": "key",
            "params": [
                {
                    "name": "keys",
                    "description": "",
                    "type": "String...|Array"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 1994,
            "description": "### .throw(constructor)\n\nAsserts that the function target will throw a specific error, or specific type of error\n(as determined using `instanceof`), optionally with a RegExp or string inclusion test\nfor the error's message.\n\n    var err = new ReferenceError('This is a bad function.');\n    var fn = function () { throw err; }\n    expect(fn).to.throw(ReferenceError);\n    expect(fn).to.throw(Error);\n    expect(fn).to.throw(/bad function/);\n    expect(fn).to.not.throw('good function');\n    expect(fn).to.throw(ReferenceError, /bad function/);\n    expect(fn).to.throw(err);\n    expect(fn).to.not.throw(new RangeError('Out of range.'));\n\nPlease note that when a throw expectation is negated, it will check each\nparameter independently, starting with error constructor type. The appropriate way\nto check for the existence of a type of error but for a message that does not match\nis to use `and`.\n\n    expect(fn).to.throw(ReferenceError)\n       .and.not.throw(/good function/);",
            "name": "throw",
            "alias": "Throw",
            "params": [
                {
                    "name": "constructor",
                    "description": "",
                    "type": "ErrorConstructor"
                },
                {
                    "name": "expected",
                    "description": "error message",
                    "type": "String|RegExp"
                },
                {
                    "name": "message",
                    "description": "_optional_",
                    "type": "String"
                }
            ],
            "see": [
                "https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types"
            ],
            "return": {
                "description": "error for chaining (null if no error)"
            },
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 2151,
            "description": "### .respondTo(method)\n\nAsserts that the object or class target will respond to a method.\n\n    Klass.prototype.bar = function(){};\n    expect(Klass).to.respondTo('bar');\n    expect(obj).to.respondTo('bar');\n\nTo check if a constructor will respond to a static function,\nset the `itself` flag.\n\n    Klass.baz = function(){};\n    expect(Klass).itself.to.respondTo('baz');",
            "name": "respondTo",
            "params": [
                {
                    "name": "method",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "_optional_",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 2187,
            "description": "### .itself\n\nSets the `itself` flag, later used by the `respondTo` assertion.\n\n    function Foo() {}\n    Foo.bar = function() {}\n    Foo.prototype.baz = function() {}\n\n    expect(Foo).itself.to.respondTo('bar');\n    expect(Foo).itself.not.to.respondTo('baz');",
            "name": "itself",
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 2207,
            "description": "### .satisfy(method)\n\nAsserts that the target passes a given truth test.\n\n    expect(1).to.satisfy(function(num) { return num > 0; });",
            "name": "satisfy",
            "params": [
                {
                    "name": "matcher",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "message",
                    "description": "_optional_",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 2232,
            "description": "### .closeTo(expected, delta)\n\nAsserts that the target is equal `expected`, to within a +/- `delta` range.\n\n    expect(1.5).to.be.closeTo(1, 0.5);",
            "name": "closeTo",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "delta",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "message",
                    "description": "_optional_",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 2266,
            "description": "### .members(set)\n\nAsserts that the target is a superset of `set`,\nor that the target and `set` have the same strictly-equal (===) members.\nAlternately, if the `deep` flag is set, set members are compared for deep\nequality.\n\n    expect([1, 2, 3]).to.include.members([3, 2]);\n    expect([1, 2, 3]).to.not.include.members([3, 2, 8]);\n\n    expect([4, 2]).to.have.members([2, 4]);\n    expect([5, 2]).to.not.have.members([5, 2, 1]);\n\n    expect([{ id: 1 }]).to.deep.include.members([{ id: 1 }]);",
            "name": "members",
            "params": [
                {
                    "name": "set",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "message",
                    "description": "_optional_",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 2339,
            "description": "### assert(expression, message)\n\nWrite your own test expressions.\n\n    assert('foo' !== 'bar', 'foo is not bar');\n    assert(Array.isArray([]), 'empty arrays are arrays');",
            "params": [
                {
                    "name": "expression",
                    "description": "to test for truthiness",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "to display on error",
                    "type": "String"
                }
            ],
            "name": "assert",
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 2362,
            "description": "### .fail(actual, expected, [message], [operator])\n\nThrow a failure. Node.js `assert` module-compatible.",
            "name": "fail",
            "params": [
                {
                    "name": "actual",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "expected",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "operator",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 2384,
            "description": "### .ok(object, [message])\n\nAsserts that `object` is truthy.\n\n    assert.ok('everything', 'everything is ok');\n    assert.ok(false, 'this will fail');",
            "name": "ok",
            "params": [
                {
                    "name": "object",
                    "description": "to test",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 2402,
            "description": "### .notOk(object, [message])\n\nAsserts that `object` is falsy.\n\n    assert.notOk('everything', 'this will fail');\n    assert.notOk(false, 'this will pass');",
            "name": "notOk",
            "params": [
                {
                    "name": "object",
                    "description": "to test",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 2420,
            "description": "### .equal(actual, expected, [message])\n\nAsserts non-strict equality (`==`) of `actual` and `expected`.\n\n    assert.equal(3, '3', '== coerces values to strings');",
            "name": "equal",
            "params": [
                {
                    "name": "actual",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "expected",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 2446,
            "description": "### .notEqual(actual, expected, [message])\n\nAsserts non-strict inequality (`!=`) of `actual` and `expected`.\n\n    assert.notEqual(3, 4, 'these numbers are not equal');",
            "name": "notEqual",
            "params": [
                {
                    "name": "actual",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "expected",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 2472,
            "description": "### .strictEqual(actual, expected, [message])\n\nAsserts strict equality (`===`) of `actual` and `expected`.\n\n    assert.strictEqual(true, true, 'these booleans are strictly equal');",
            "name": "strictEqual",
            "params": [
                {
                    "name": "actual",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "expected",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 2490,
            "description": "### .notStrictEqual(actual, expected, [message])\n\nAsserts strict inequality (`!==`) of `actual` and `expected`.\n\n    assert.notStrictEqual(3, '3', 'no coercion for strict equality');",
            "name": "notStrictEqual",
            "params": [
                {
                    "name": "actual",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "expected",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 2508,
            "description": "### .deepEqual(actual, expected, [message])\n\nAsserts that `actual` is deeply equal to `expected`.\n\n    assert.deepEqual({ tea: 'green' }, { tea: 'green' });",
            "name": "deepEqual",
            "params": [
                {
                    "name": "actual",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "expected",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 2526,
            "description": "### .notDeepEqual(actual, expected, [message])\n\nAssert that `actual` is not deeply equal to `expected`.\n\n    assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });",
            "name": "notDeepEqual",
            "params": [
                {
                    "name": "actual",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "expected",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 2544,
            "description": "### .isTrue(value, [message])\n\nAsserts that `value` is true.\n\n    var teaServed = true;\n    assert.isTrue(teaServed, 'the tea has been served');",
            "name": "isTrue",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 2562,
            "description": "### .isFalse(value, [message])\n\nAsserts that `value` is false.\n\n    var teaServed = false;\n    assert.isFalse(teaServed, 'no tea yet? hmm...');",
            "name": "isFalse",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 2580,
            "description": "### .isNull(value, [message])\n\nAsserts that `value` is null.\n\n    assert.isNull(err, 'there was no error');",
            "name": "isNull",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 2597,
            "description": "### .isNotNull(value, [message])\n\nAsserts that `value` is not null.\n\n    var tea = 'tasty chai';\n    assert.isNotNull(tea, 'great, time for tea!');",
            "name": "isNotNull",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 2615,
            "description": "### .isUndefined(value, [message])\n\nAsserts that `value` is `undefined`.\n\n    var tea;\n    assert.isUndefined(tea, 'no tea defined');",
            "name": "isUndefined",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 2633,
            "description": "### .isDefined(value, [message])\n\nAsserts that `value` is not `undefined`.\n\n    var tea = 'cup of chai';\n    assert.isDefined(tea, 'tea has been defined');",
            "name": "isDefined",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 2651,
            "description": "### .isFunction(value, [message])\n\nAsserts that `value` is a function.\n\n    function serveTea() { return 'cup of tea'; };\n    assert.isFunction(serveTea, 'great, we can have tea now');",
            "name": "isFunction",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 2669,
            "description": "### .isNotFunction(value, [message])\n\nAsserts that `value` is _not_ a function.\n\n    var serveTea = [ 'heat', 'pour', 'sip' ];\n    assert.isNotFunction(serveTea, 'great, we have listed the steps');",
            "name": "isNotFunction",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 2687,
            "description": "### .isObject(value, [message])\n\nAsserts that `value` is an object (as revealed by\n`Object.prototype.toString`).\n\n    var selection = { name: 'Chai', serve: 'with spices' };\n    assert.isObject(selection, 'tea selection is an object');",
            "name": "isObject",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 2706,
            "description": "### .isNotObject(value, [message])\n\nAsserts that `value` is _not_ an object.\n\n    var selection = 'chai'\n    assert.isNotObject(selection, 'tea selection is not an object');\n    assert.isNotObject(null, 'null is not an object');",
            "name": "isNotObject",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 2725,
            "description": "### .isArray(value, [message])\n\nAsserts that `value` is an array.\n\n    var menu = [ 'green', 'chai', 'oolong' ];\n    assert.isArray(menu, 'what kind of tea do we want?');",
            "name": "isArray",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 2743,
            "description": "### .isNotArray(value, [message])\n\nAsserts that `value` is _not_ an array.\n\n    var menu = 'green|chai|oolong';\n    assert.isNotArray(menu, 'what kind of tea do we want?');",
            "name": "isNotArray",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 2761,
            "description": "### .isString(value, [message])\n\nAsserts that `value` is a string.\n\n    var teaOrder = 'chai';\n    assert.isString(teaOrder, 'order placed');",
            "name": "isString",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 2779,
            "description": "### .isNotString(value, [message])\n\nAsserts that `value` is _not_ a string.\n\n    var teaOrder = 4;\n    assert.isNotString(teaOrder, 'order placed');",
            "name": "isNotString",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 2797,
            "description": "### .isNumber(value, [message])\n\nAsserts that `value` is a number.\n\n    var cups = 2;\n    assert.isNumber(cups, 'how many cups');",
            "name": "isNumber",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 2815,
            "description": "### .isNotNumber(value, [message])\n\nAsserts that `value` is _not_ a number.\n\n    var cups = '2 cups please';\n    assert.isNotNumber(cups, 'how many cups');",
            "name": "isNotNumber",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 2833,
            "description": "### .isBoolean(value, [message])\n\nAsserts that `value` is a boolean.\n\n    var teaReady = true\n      , teaServed = false;\n\n    assert.isBoolean(teaReady, 'is the tea ready');\n    assert.isBoolean(teaServed, 'has tea been served');",
            "name": "isBoolean",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 2854,
            "description": "### .isNotBoolean(value, [message])\n\nAsserts that `value` is _not_ a boolean.\n\n    var teaReady = 'yep'\n      , teaServed = 'nope';\n\n    assert.isNotBoolean(teaReady, 'is the tea ready');\n    assert.isNotBoolean(teaServed, 'has tea been served');",
            "name": "isNotBoolean",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 2875,
            "description": "### .typeOf(value, name, [message])\n\nAsserts that `value`'s type is `name`, as determined by\n`Object.prototype.toString`.\n\n    assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');\n    assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');\n    assert.typeOf('tea', 'string', 'we have a string');\n    assert.typeOf(/tea/, 'regexp', 'we have a regular expression');\n    assert.typeOf(null, 'null', 'we have a null');\n    assert.typeOf(undefined, 'undefined', 'we have an undefined');",
            "name": "typeOf",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 2899,
            "description": "### .notTypeOf(value, name, [message])\n\nAsserts that `value`'s type is _not_ `name`, as determined by\n`Object.prototype.toString`.\n\n    assert.notTypeOf('tea', 'number', 'strings are not numbers');",
            "name": "notTypeOf",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "typeof",
                    "description": "name",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 2918,
            "description": "### .instanceOf(object, constructor, [message])\n\nAsserts that `value` is an instance of `constructor`.\n\n    var Tea = function (name) { this.name = name; }\n      , chai = new Tea('chai');\n\n    assert.instanceOf(chai, Tea, 'chai is an instance of tea');",
            "name": "instanceOf",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "constructor",
                    "description": "",
                    "type": "Constructor"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 2939,
            "description": "### .notInstanceOf(object, constructor, [message])\n\nAsserts `value` is not an instance of `constructor`.\n\n    var Tea = function (name) { this.name = name; }\n      , chai = new String('chai');\n\n    assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');",
            "name": "notInstanceOf",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "constructor",
                    "description": "",
                    "type": "Constructor"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 2960,
            "description": "### .include(haystack, needle, [message])\n\nAsserts that `haystack` includes `needle`. Works\nfor strings and arrays.\n\n    assert.include('foobar', 'bar', 'foobar contains string \"bar\"');\n    assert.include([ 1, 2, 3 ], 3, 'array contains value');",
            "name": "include",
            "params": [
                {
                    "name": "haystack",
                    "description": "",
                    "type": "Array|String"
                },
                {
                    "name": "needle",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 2980,
            "description": "### .notInclude(haystack, needle, [message])\n\nAsserts that `haystack` does not include `needle`. Works\nfor strings and arrays.\ni\n    assert.notInclude('foobar', 'baz', 'string not include substring');\n    assert.notInclude([ 1, 2, 3 ], 4, 'array not include contain value');",
            "name": "notInclude",
            "params": [
                {
                    "name": "haystack",
                    "description": "",
                    "type": "Array|String"
                },
                {
                    "name": "needle",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 3000,
            "description": "### .match(value, regexp, [message])\n\nAsserts that `value` matches the regular expression `regexp`.\n\n    assert.match('foobar', /^foo/, 'regexp matches');",
            "name": "match",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "regexp",
                    "description": "",
                    "type": "RegExp"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 3018,
            "description": "### .notMatch(value, regexp, [message])\n\nAsserts that `value` does not match the regular expression `regexp`.\n\n    assert.notMatch('foobar', /^foo/, 'regexp does not match');",
            "name": "notMatch",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "regexp",
                    "description": "",
                    "type": "RegExp"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 3036,
            "description": "### .property(object, property, [message])\n\nAsserts that `object` has a property named by `property`.\n\n    assert.property({ tea: { green: 'matcha' }}, 'tea');",
            "name": "property",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 3054,
            "description": "### .notProperty(object, property, [message])\n\nAsserts that `object` does _not_ have a property named by `property`.\n\n    assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');",
            "name": "notProperty",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 3072,
            "description": "### .deepProperty(object, property, [message])\n\nAsserts that `object` has a property named by `property`, which can be a\nstring using dot- and bracket-notation for deep reference.\n\n    assert.deepProperty({ tea: { green: 'matcha' }}, 'tea.green');",
            "name": "deepProperty",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 3091,
            "description": "### .notDeepProperty(object, property, [message])\n\nAsserts that `object` does _not_ have a property named by `property`, which\ncan be a string using dot- and bracket-notation for deep reference.\n\n    assert.notDeepProperty({ tea: { green: 'matcha' }}, 'tea.oolong');",
            "name": "notDeepProperty",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 3110,
            "description": "### .propertyVal(object, property, value, [message])\n\nAsserts that `object` has a property named by `property` with value given\nby `value`.\n\n    assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');",
            "name": "propertyVal",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 3130,
            "description": "### .propertyNotVal(object, property, value, [message])\n\nAsserts that `object` has a property named by `property`, but with a value\ndifferent from that given by `value`.\n\n    assert.propertyNotVal({ tea: 'is good' }, 'tea', 'is bad');",
            "name": "propertyNotVal",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 3150,
            "description": "### .deepPropertyVal(object, property, value, [message])\n\nAsserts that `object` has a property named by `property` with value given\nby `value`. `property` can use dot- and bracket-notation for deep\nreference.\n\n    assert.deepPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');",
            "name": "deepPropertyVal",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 3171,
            "description": "### .deepPropertyNotVal(object, property, value, [message])\n\nAsserts that `object` has a property named by `property`, but with a value\ndifferent from that given by `value`. `property` can use dot- and\nbracket-notation for deep reference.\n\n    assert.deepPropertyNotVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');",
            "name": "deepPropertyNotVal",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 3192,
            "description": "### .lengthOf(object, length, [message])\n\nAsserts that `object` has a `length` property with the expected value.\n\n    assert.lengthOf([1,2,3], 3, 'array has length of 3');\n    assert.lengthOf('foobar', 5, 'string has length of 6');",
            "name": "lengthOf",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "length",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 3211,
            "description": "### .throws(function, [constructor/string/regexp], [string/regexp], [message])\n\nAsserts that `function` will throw an error that is an instance of\n`constructor`, or alternately that it will throw an error with message\nmatching `regexp`.\n\n    assert.throw(fn, 'function throws a reference error');\n    assert.throw(fn, /function throws a reference error/);\n    assert.throw(fn, ReferenceError);\n    assert.throw(fn, ReferenceError, 'function throws a reference error');\n    assert.throw(fn, ReferenceError, /function throws a reference error/);",
            "name": "throws",
            "alias": "Throw",
            "params": [
                {
                    "name": "function",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "constructor",
                    "description": "",
                    "type": "ErrorConstructor"
                },
                {
                    "name": "regexp",
                    "description": "",
                    "type": "RegExp"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "see": [
                "https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types"
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 3245,
            "description": "### .doesNotThrow(function, [constructor/regexp], [message])\n\nAsserts that `function` will _not_ throw an error that is an instance of\n`constructor`, or alternately that it will not throw an error with message\nmatching `regexp`.\n\n    assert.doesNotThrow(fn, Error, 'function does not throw');",
            "name": "doesNotThrow",
            "params": [
                {
                    "name": "function",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "constructor",
                    "description": "",
                    "type": "ErrorConstructor"
                },
                {
                    "name": "regexp",
                    "description": "",
                    "type": "RegExp"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "see": [
                "https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types"
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 3272,
            "description": "### .operator(val1, operator, val2, [message])\n\nCompares two values using `operator`.\n\n    assert.operator(1, '<', 2, 'everything is ok');\n    assert.operator(1, '>', 2, 'this will fail');",
            "name": "operator",
            "params": [
                {
                    "name": "val1",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "operator",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "val2",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 3299,
            "description": "### .closeTo(actual, expected, delta, [message])\n\nAsserts that the target is equal `expected`, to within a +/- `delta` range.\n\n    assert.closeTo(1.5, 1, 0.5, 'numbers are close');",
            "name": "closeTo",
            "params": [
                {
                    "name": "actual",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "expected",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "delta",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 3318,
            "description": "### .sameMembers(set1, set2, [message])\n\nAsserts that `set1` and `set2` have the same members.\nOrder is not taken into account.\n\n    assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');",
            "name": "sameMembers",
            "params": [
                {
                    "name": "superset",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "subset",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 3337,
            "description": "### .includeMembers(superset, subset, [message])\n\nAsserts that `subset` is included in `superset`.\nOrder is not taken into account.\n\n    assert.includeMembers([ 1, 2, 3 ], [ 2, 1 ], 'include members');",
            "name": "includeMembers",
            "params": [
                {
                    "name": "superset",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "subset",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 3504,
            "description": "### addChainableMethod (ctx, name, method, chainingBehavior)\n\nAdds a method to an object, such that the method can also be chained.\n\n    utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {\n      var obj = utils.flag(this, 'object');\n      new chai.Assertion(obj).to.be.equal(str);\n    });\n\nCan also be accessed directly from `chai.Assertion`.\n\n    chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);\n\nThe result can then be used as both a method assertion, executing both `method` and\n`chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.\n\n    expect(fooStr).to.be.foo('bar');\n    expect(fooStr).to.be.foo.equal('foo');",
            "params": [
                {
                    "name": "ctx",
                    "description": "object to which the method is added",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "of method to add",
                    "type": "String"
                },
                {
                    "name": "method",
                    "description": "function to be used for `name`, when called",
                    "type": "Function"
                },
                {
                    "name": "chainingBehavior",
                    "description": "function to be called every time the property is accessed",
                    "type": "Function"
                }
            ],
            "name": "addChainableMethod",
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 3596,
            "description": "### .addMethod (ctx, name, method)\n\nAdds a method to the prototype of an object.\n\n    utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {\n      var obj = utils.flag(this, 'object');\n      new chai.Assertion(obj).to.be.equal(str);\n    });\n\nCan also be accessed directly from `chai.Assertion`.\n\n    chai.Assertion.addMethod('foo', fn);\n\nThen can be used as any other assertion.\n\n    expect(fooStr).to.be.foo('bar');",
            "params": [
                {
                    "name": "ctx",
                    "description": "object to which the method is added",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "of method to add",
                    "type": "String"
                },
                {
                    "name": "method",
                    "description": "function to be used for name",
                    "type": "Function"
                }
            ],
            "name": "addMethod",
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 3640,
            "description": "### addProperty (ctx, name, getter)\n\nAdds a property to the prototype of an object.\n\n    utils.addProperty(chai.Assertion.prototype, 'foo', function () {\n      var obj = utils.flag(this, 'object');\n      new chai.Assertion(obj).to.be.instanceof(Foo);\n    });\n\nCan also be accessed directly from `chai.Assertion`.\n\n    chai.Assertion.addProperty('foo', fn);\n\nThen can be used as any other assertion.\n\n    expect(myFoo).to.be.foo;",
            "params": [
                {
                    "name": "ctx",
                    "description": "object to which the property is added",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "of property to add",
                    "type": "String"
                },
                {
                    "name": "getter",
                    "description": "function to be used for name",
                    "type": "Function"
                }
            ],
            "name": "addProperty",
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 3683,
            "description": "### flag(object ,key, [value])\n\nGet or set a flag value on an object. If a\nvalue is provided it will be set, else it will\nreturn the currently set value or `undefined` if\nthe value is not set.\n\n    utils.flag(this, 'foo', 'bar'); // setter\n    utils.flag(this, 'foo'); // getter, returns `bar`",
            "params": [
                {
                    "name": "object",
                    "description": "(constructed Assertion",
                    "type": "Object"
                },
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "(optional)",
                    "type": "Mixed"
                }
            ],
            "name": "flag",
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 3718,
            "description": "# getActual(object, [actual])\n\nReturns the `actual` value for an Assertion",
            "params": [
                {
                    "name": "object",
                    "description": "(constructed Assertion)",
                    "type": "Object"
                },
                {
                    "name": "chai.Assertion.prototype.assert",
                    "description": "arguments",
                    "type": "Arguments"
                }
            ],
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 3739,
            "description": "### .getEnumerableProperties(object)\n\nThis allows the retrieval of enumerable property names of an object,\ninherited or not.",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "name": "getEnumerableProperties",
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 3776,
            "description": "### .getMessage(object, message, negateMessage)\n\nConstruct the error message based on flags\nand template tags. Template tags will return\na stringified inspection of the object referenced.\n\nMessage template tags:\n- `#{this}` current asserted object\n- `#{act}` actual value\n- `#{exp}` expected value",
            "params": [
                {
                    "name": "object",
                    "description": "(constructed Assertion)",
                    "type": "Object"
                },
                {
                    "name": "chai.Assertion.prototype.assert",
                    "description": "arguments",
                    "type": "Arguments"
                }
            ],
            "name": "getMessage",
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 3819,
            "description": "# getName(func)\n\nGets the name of a function, in a cross-browser way.",
            "params": [
                {
                    "name": "a",
                    "description": "function (usually a constructor)",
                    "type": "Function"
                }
            ],
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 3843,
            "description": "### .getPathValue(path, object)\n\nThis allows the retrieval of values in an\nobject given a string path.\n\n    var obj = {\n        prop1: {\n            arr: ['a', 'b', 'c']\n          , str: 'Hello'\n        }\n      , prop2: {\n            arr: [ { nested: 'Universe' } ]\n          , str: 'Hello again!'\n        }\n    }\n\nThe following would be the results.\n\n    getPathValue('prop1.str', obj); // Hello\n    getPathValue('prop1.att[2]', obj); // b\n    getPathValue('prop2.arr[0].nested', obj); // Universe",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "value or `undefined`",
                "type": "Object"
            },
            "name": "getPathValue",
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 3947,
            "description": "### .getProperties(object)\n\nThis allows the retrieval of property names of an object, enumerable or not,\ninherited or not.",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "name": "getProperties",
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 4105,
            "description": "Echos the value of a value. Trys to print the value out\nin the best way possible given the different types.",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to print out.",
                    "type": "Object"
                },
                {
                    "name": "showHidden",
                    "description": "Flag that shows hidden (not enumerable)\n   properties of objects.",
                    "type": "Boolean"
                },
                {
                    "name": "depth",
                    "description": "Depth in which to descend in object. Default is 2.",
                    "type": "Number"
                },
                {
                    "name": "colors",
                    "description": "Flag to turn on ANSI escape codes to color the\n   output. Default is false (no coloring).",
                    "type": "Boolean"
                }
            ],
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 4432,
            "description": "### .objDisplay (object)\n\nDetermines if an object or an array matches\ncriteria to be inspected in-line for error\nmessages or should be truncated.",
            "params": [
                {
                    "name": "javascript",
                    "description": "object to inspect",
                    "type": "Mixed"
                }
            ],
            "name": "objDisplay",
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 4477,
            "description": "### overwriteMethod (ctx, name, fn)\n\nOverwites an already existing method and provides\naccess to previous function. Must return function\nto be used for name.\n\n    utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {\n      return function (str) {\n        var obj = utils.flag(this, 'object');\n        if (obj instanceof Foo) {\n          new chai.Assertion(obj.value).to.equal(str);\n        } else {\n          _super.apply(this, arguments);\n        }\n      }\n    });\n\nCan also be accessed directly from `chai.Assertion`.\n\n    chai.Assertion.overwriteMethod('foo', fn);\n\nThen can be used as any other assertion.\n\n    expect(myFoo).to.equal('bar');",
            "params": [
                {
                    "name": "ctx",
                    "description": "object whose method is to be overwritten",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "of method to overwrite",
                    "type": "String"
                },
                {
                    "name": "method",
                    "description": "function that returns a function to be used for name",
                    "type": "Function"
                }
            ],
            "name": "overwriteMethod",
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 4531,
            "description": "### overwriteProperty (ctx, name, fn)\n\nOverwites an already existing property getter and provides\naccess to previous value. Must return function to use as getter.\n\n    utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {\n      return function () {\n        var obj = utils.flag(this, 'object');\n        if (obj instanceof Foo) {\n          new chai.Assertion(obj.name).to.equal('bar');\n        } else {\n          _super.call(this);\n        }\n      }\n    });\n\n\nCan also be accessed directly from `chai.Assertion`.\n\n    chai.Assertion.overwriteProperty('foo', fn);\n\nThen can be used as any other assertion.\n\n    expect(myFoo).to.be.ok;",
            "params": [
                {
                    "name": "ctx",
                    "description": "object whose property is to be overwritten",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "of property to overwrite",
                    "type": "String"
                },
                {
                    "name": "getter",
                    "description": "function that returns a getter function to be used for name",
                    "type": "Function"
                }
            ],
            "name": "overwriteProperty",
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 4588,
            "description": "### overwriteChainableMethod (ctx, name, fn)\n\nOverwites an already existing chainable method\nand provides access to the previous function or\nproperty.  Must return functions to be used for\nname.\n\n    utils.overwriteChainableMethod(chai.Assertion.prototype, 'length',\n      function (_super) {\n      }\n    , function (_super) {\n      }\n    );\n\nCan also be accessed directly from `chai.Assertion`.\n\n    chai.Assertion.overwriteChainableMethod('foo', fn, fn);\n\nThen can be used as any other assertion.\n\n    expect(myFoo).to.have.length(3);\n    expect(myFoo).to.have.length.above(3);",
            "params": [
                {
                    "name": "ctx",
                    "description": "object whose method / property is to be overwritten",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "of method / property to overwrite",
                    "type": "String"
                },
                {
                    "name": "method",
                    "description": "function that returns a function to be used for name",
                    "type": "Function"
                },
                {
                    "name": "chainingBehavior",
                    "description": "function that returns a function to be used for property",
                    "type": "Function"
                }
            ],
            "name": "overwriteChainableMethod",
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 4650,
            "description": "# test(object, expression)\n\nTest and object for expression.",
            "params": [
                {
                    "name": "object",
                    "description": "(constructed Assertion)",
                    "type": "Object"
                },
                {
                    "name": "chai.Assertion.prototype.assert",
                    "description": "arguments",
                    "type": "Arguments"
                }
            ],
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 4673,
            "description": "### transferFlags(assertion, object, includeAll = true)\n\nTransfer all the flags for `assertion` to `object`. If\n`includeAll` is set to `false`, then the base Chai\nassertion flags (namely `object`, `ssfi`, and `message`)\nwill not be transferred.\n\n\n    var newAssertion = new Assertion();\n    utils.transferFlags(assertion, newAssertion);\n\n    var anotherAsseriton = new Assertion(myObj);\n    utils.transferFlags(assertion, anotherAssertion, false);",
            "params": [
                {
                    "name": "assertion",
                    "description": "the assertion to transfer the flags from",
                    "type": "Assertion"
                },
                {
                    "name": "object",
                    "description": "the object to transfer the flags too; usually a new assertion",
                    "type": "Object"
                },
                {
                    "name": "includeAll",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "name": "getAllFlags",
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/chai.js",
            "line": 4734,
            "description": "### type(object)\n\nBetter implementation of `typeof` detection that can\nbe used cross-browser. Handles the inconsistencies of\nArray, `null`, and `undefined` detection.\n\n    utils.type({}) // 'object'\n    utils.type(null) // `null'\n    utils.type(undefined) // `undefined`\n    utils.type([]) // `array`",
            "params": [
                {
                    "name": "object",
                    "description": "to detect type of",
                    "type": "Mixed"
                }
            ],
            "name": "type",
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 419,
            "description": "Module exports.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 425,
            "description": "Check if `obj` is an array.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 433,
            "description": "Event emitter constructor.",
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 441,
            "description": "Adds a listener.",
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 465,
            "description": "Adds a volatile listener.",
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 485,
            "description": "Removes a listener.",
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 522,
            "description": "Removes all listeners for an event.",
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 541,
            "description": "Gets all listeners for a certain event.",
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 563,
            "description": "Emits an event.",
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 607,
            "description": "Expose `Progress`.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 613,
            "description": "Initialize a new `Progress` indicator.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 624,
            "description": "Set progress size to `n`.",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "for chaining",
                "type": "Progress"
            },
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 637,
            "description": "Set text to `str`.",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "for chaining",
                "type": "Progress"
            },
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 650,
            "description": "Set font size to `n`.",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "for chaining",
                "type": "Progress"
            },
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 663,
            "description": "Set font `family`.",
            "params": [
                {
                    "name": "family",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "for chaining",
                "type": "Progress"
            },
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 675,
            "description": "Update percentage to `n`.",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "for chaining",
                "type": "Progress"
            },
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 687,
            "description": "Draw on `ctx`.",
            "params": [
                {
                    "name": "ctx",
                    "description": "",
                    "type": "CanvasRenderingContext2d"
                }
            ],
            "return": {
                "description": "for chaining",
                "type": "Progress"
            },
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 754,
            "description": "Expose `Context`.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 760,
            "description": "Initialize a new `Context`.",
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 768,
            "description": "Set or get the context `Runnable` to `runnable`.",
            "params": [
                {
                    "name": "runnable",
                    "description": "",
                    "type": "Runnable"
                }
            ],
            "return": {
                "description": "",
                "type": "Context"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 782,
            "description": "Set test timeout `ms`.",
            "params": [
                {
                    "name": "ms",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "self",
                "type": "Context"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 796,
            "description": "Set test timeout `enabled`.",
            "params": [
                {
                    "name": "enabled",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "self",
                "type": "Context"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 810,
            "description": "Set test slowness threshold `ms`.",
            "params": [
                {
                    "name": "ms",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "self",
                "type": "Context"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 823,
            "description": "Inspect the context void of `._runnable`.",
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 842,
            "description": "Module dependencies.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 848,
            "description": "Expose `Hook`.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 854,
            "description": "Initialize a new `Hook` with the given `title` and callback `fn`.",
            "params": [
                {
                    "name": "title",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 867,
            "description": "Inherit from `Runnable.prototype`.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 877,
            "description": "Get or set the test `err`.",
            "params": [
                {
                    "name": "err",
                    "description": "",
                    "type": "Error"
                }
            ],
            "return": {
                "description": "",
                "type": "Error"
            },
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 899,
            "description": "Module dependencies.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 907,
            "description": "BDD-style interface:\n\n     describe('Array', function(){\n       describe('#indexOf()', function(){\n         it('should return -1 when not present', function(){\n\n         });\n\n         it('should return the index when present', function(){\n\n         });\n       });\n     });",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 929,
            "description": "Execute before running tests.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 937,
            "description": "Execute after running tests.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 945,
            "description": "Execute before each test case.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 953,
            "description": "Execute after each test case.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 961,
            "description": "Describe a \"suite\" with the given `title`\nand callback `fn` containing nested suites\nand/or tests.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 976,
            "description": "Pending describe.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 990,
            "description": "Exclusive suite.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1000,
            "description": "Describe a specification or test-case\nwith the given `title` and callback `fn`\nacting as a thunk.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1015,
            "description": "Exclusive test-case.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1026,
            "description": "Pending test case.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1042,
            "description": "Module dependencies.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1049,
            "description": "TDD-style interface:\n\n    exports.Array = {\n      '#indexOf()': {\n        'should return -1 when the value is not present': function(){\n\n        },\n\n        'should return the correct index when the value is present': function(){\n\n        }\n      }\n    };",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1117,
            "description": "Module dependencies.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1125,
            "description": "QUnit-style interface:\n\n    suite('Array');\n\n    test('#length', function(){\n      var arr = [1,2,3];\n      ok(arr.length == 3);\n    });\n\n    test('#indexOf()', function(){\n      var arr = [1,2,3];\n      ok(arr.indexOf(1) == 0);\n      ok(arr.indexOf(2) == 1);\n      ok(arr.indexOf(3) == 2);\n    });\n\n    suite('String');\n\n    test('#length', function(){\n      ok('foo'.length == 3);\n    });",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1155,
            "description": "Execute before running tests.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1163,
            "description": "Execute after running tests.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1171,
            "description": "Execute before each test case.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1179,
            "description": "Execute after each test case.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1187,
            "description": "Describe a \"suite\" with the given `title`.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1199,
            "description": "Exclusive test-case.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1208,
            "description": "Describe a specification or test-case\nwith the given `title` and callback `fn`\nacting as a thunk.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1221,
            "description": "Exclusive test-case.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1231,
            "description": "Pending test case.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1245,
            "description": "Module dependencies.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1253,
            "description": "TDD-style interface:\n\n     suite('Array', function(){\n       suite('#indexOf()', function(){\n         suiteSetup(function(){\n\n         });\n\n         test('should return -1 when not present', function(){\n\n         });\n\n         test('should return the index when present', function(){\n\n         });\n\n         suiteTeardown(function(){\n\n         });\n       });\n     });",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1283,
            "description": "Execute before each test case.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1291,
            "description": "Execute after each test case.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1299,
            "description": "Execute before the suite.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1307,
            "description": "Execute after the suite.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1315,
            "description": "Describe a \"suite\" with the given `title`\nand callback `fn` containing nested suites\nand/or tests.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1330,
            "description": "Pending suite.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1341,
            "description": "Exclusive test-case.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1350,
            "description": "Describe a specification or test-case\nwith the given `title` and callback `fn`\nacting as a thunk.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1365,
            "description": "Exclusive test-case.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1375,
            "description": "Pending test case.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1394,
            "description": "Module dependencies.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1401,
            "description": "Expose `Mocha`.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1407,
            "description": "To require local UIs and reporters when running in node.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1417,
            "description": "Expose internals.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1431,
            "description": "Return image `name` path.",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1443,
            "description": "Setup mocha with `options`.\n\nOptions:\n\n  - `ui` name \"bdd\", \"tdd\", \"exports\" etc\n  - `reporter` reporter instance, defaults to `mocha.reporters.spec`\n  - `globals` array of accepted globals\n  - `timeout` timeout in milliseconds\n  - `bail` bail on the first test failure\n  - `slow` milliseconds to wait before considering a test slow\n  - `ignoreLeaks` ignore global leaks\n  - `grep` string or regexp to filter tests with",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1491,
            "description": "Enable or disable bailing on the first failure.",
            "params": [
                {
                    "name": "bail",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1504,
            "description": "Add test `file`.",
            "params": [
                {
                    "name": "file",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1516,
            "description": "Set reporter to `reporter`, defaults to \"spec\".",
            "params": [
                {
                    "name": "reporter",
                    "description": "name or constructor",
                    "type": "String|Function"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1541,
            "description": "Set test UI `name`, defaults to \"bdd\".",
            "params": [
                {
                    "name": "bdd",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1557,
            "description": "Load registered files.",
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1576,
            "description": "Enable growl support.",
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1600,
            "description": "Add regexp to grep, if `re` is a string it is escaped.",
            "params": [
                {
                    "name": "re",
                    "description": "",
                    "type": "RegExp|String"
                }
            ],
            "return": {
                "description": "",
                "type": "Mocha"
            },
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1615,
            "description": "Invert `.grep()` matches.",
            "return": {
                "description": "",
                "type": "Mocha"
            },
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1627,
            "description": "Ignore global leaks.",
            "params": [
                {
                    "name": "ignore",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Mocha"
            },
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1640,
            "description": "Enable global leak checking.",
            "return": {
                "description": "",
                "type": "Mocha"
            },
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1652,
            "description": "Enable growl support.",
            "return": {
                "description": "",
                "type": "Mocha"
            },
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1664,
            "description": "Ignore `globals` array or string.",
            "params": [
                {
                    "name": "globals",
                    "description": "",
                    "type": "Array|String"
                }
            ],
            "return": {
                "description": "",
                "type": "Mocha"
            },
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1677,
            "description": "Emit color output.",
            "params": [
                {
                    "name": "colors",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Mocha"
            },
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1692,
            "description": "Use inline diffs rather than +/-.",
            "params": [
                {
                    "name": "inlineDiffs",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Mocha"
            },
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1707,
            "description": "Set the timeout in milliseconds.",
            "params": [
                {
                    "name": "timeout",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Mocha"
            },
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1720,
            "description": "Set slowness threshold in milliseconds.",
            "params": [
                {
                    "name": "slow",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Mocha"
            },
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1733,
            "description": "Enable timeouts.",
            "params": [
                {
                    "name": "enabled",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Mocha"
            },
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1748,
            "description": "Makes all tests async (accepting a callback)",
            "return": {
                "description": "",
                "type": "Mocha"
            },
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1760,
            "description": "Run tests and invoke `fn()` when complete.",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Runner"
            },
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1788,
            "description": "Helpers.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1798,
            "description": "Parse or format the given `val`.\n\nOptions:\n\n - `long` verbose formatting [false]",
            "params": [
                {
                    "name": "val",
                    "description": "",
                    "type": "String|Number"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String|Number"
            },
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1817,
            "description": "Parse the given `str` and return milliseconds.",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1856,
            "description": "Short format for `ms`.",
            "params": [
                {
                    "name": "ms",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1872,
            "description": "Long format for `ms`.",
            "params": [
                {
                    "name": "ms",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1888,
            "description": "Pluralization helper.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1902,
            "description": "Module dependencies.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1911,
            "description": "Save timer references to avoid Sinon interfering (see GH-237).",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1921,
            "description": "Check if both stdio streams are associated with a tty.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1927,
            "description": "Expose `Base`.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1933,
            "description": "Enable coloring by default.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1939,
            "description": "Inline diffs instead of +/-",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1945,
            "description": "Default color map.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1971,
            "description": "Default symbol map.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 1988,
            "description": "Color `str` with the given `type`,\nallowing colors to be disabled,\nas well as user-defined color\nschemes.",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 2005,
            "description": "Expose term window size, with some\ndefaults for when stderr is not a tty.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 2018,
            "description": "Expose some basic cursor interactions\nthat are common among reporters.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 2050,
            "description": "Outut the given `failures` as a list.",
            "params": [
                {
                    "name": "failures",
                    "description": "",
                    "type": "Array"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 2108,
            "description": "Initialize a new `Base` reporter.\n\nAll other reporters generally\ninherit from this reporter, providing\nstats such as test duration, number\nof tests passed / failed etc.",
            "params": [
                {
                    "name": "runner",
                    "description": "",
                    "type": "Runner"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 2174,
            "description": "Output common epilogue used by many of\nthe bundled reporters.",
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 2219,
            "description": "Pad the given `str` to `len`.",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "len",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 2234,
            "description": "Returns an inline diff between 2 strings with coloured ANSI output",
            "params": [
                {
                    "name": "Error",
                    "description": "with actual/expected",
                    "type": "Error"
                }
            ],
            "return": {
                "description": "Diff",
                "type": "String"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 2268,
            "description": "Returns a unified diff between 2 strings",
            "params": [
                {
                    "name": "Error",
                    "description": "with actual/expected",
                    "type": "Error"
                }
            ],
            "return": {
                "description": "Diff",
                "type": "String"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 2300,
            "description": "Return a character diff for `err`.",
            "params": [
                {
                    "name": "err",
                    "description": "",
                    "type": "Error"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 2318,
            "description": "Returns a string with all invisible characters in plain text",
            "params": [
                {
                    "name": "line",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 2331,
            "description": "Color lines for `str`, using the color `name`.",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 2346,
            "description": "Check that a / b have the same type.",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 2365,
            "description": "Module dependencies.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 2372,
            "description": "Expose `Doc`.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 2378,
            "description": "Initialize a new `Doc` reporter.",
            "params": [
                {
                    "name": "runner",
                    "description": "",
                    "type": "Runner"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 2432,
            "description": "Module dependencies.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 2439,
            "description": "Expose `Dot`.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 2445,
            "description": "Initialize a new `Dot` matrix test reporter.",
            "params": [
                {
                    "name": "runner",
                    "description": "",
                    "type": "Runner"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 2489,
            "description": "Inherit from `Base.prototype`.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 2503,
            "description": "Module dependencies.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 2510,
            "description": "Expose `HTMLCov`.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 2516,
            "description": "Initialize a new `JsCoverage` reporter.",
            "params": [
                {
                    "name": "runner",
                    "description": "",
                    "type": "Runner"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 2540,
            "description": "Return coverage class for `n`.",
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 2557,
            "description": "Module dependencies.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 2566,
            "description": "Save timer references to avoid Sinon interfering (see GH-237).",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 2576,
            "description": "Expose `HTML`.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 2582,
            "description": "Stats template.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 2593,
            "description": "Initialize a new `HTML` reporter.",
            "params": [
                {
                    "name": "runner",
                    "description": "",
                    "type": "Runner"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 2735,
            "description": "Provide suite URL",
            "params": [
                {
                    "name": "suite",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 2745,
            "description": "Provide test URL",
            "params": [
                {
                    "name": "test",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 2755,
            "description": "Display error `msg`.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 2763,
            "description": "Return a DOM fragment from `html`.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 2782,
            "description": "Check for suites that do not have elements\nwith `classname`, and hide them.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 2795,
            "description": "Unhide .hidden suites.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 2806,
            "description": "Set `el` text to `str`.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 2818,
            "description": "Listen on `event` with callback `fn`.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 2856,
            "description": "Module dependencies.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 2862,
            "description": "Expose `JSONCov`.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 2868,
            "description": "Initialize a new `JsCoverage` reporter.",
            "params": [
                {
                    "name": "runner",
                    "description": "",
                    "type": "Runner"
                },
                {
                    "name": "output",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 2910,
            "description": "Map jscoverage data to a JSON structure\nsuitable for reporting.",
            "params": [
                {
                    "name": "cov",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 2948,
            "description": "Map jscoverage data for a single source file\nto a JSON structure suitable for reporting.",
            "params": [
                {
                    "name": "filename",
                    "description": "name of the source file",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "jscoverage coverage data",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 2992,
            "description": "Return a plain-object representation of `test`\nfree of cyclic properties etc.",
            "params": [
                {
                    "name": "test",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3013,
            "description": "Module dependencies.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3020,
            "description": "Expose `List`.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3026,
            "description": "Initialize a new `List` test reporter.",
            "params": [
                {
                    "name": "runner",
                    "description": "",
                    "type": "Runner"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3057,
            "description": "Return a plain-object representation of `test`\nfree of cyclic properties etc.",
            "params": [
                {
                    "name": "test",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3077,
            "description": "Module dependencies.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3085,
            "description": "Expose `JSON`.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3091,
            "description": "Initialize a new `JSON` reporter.",
            "params": [
                {
                    "name": "runner",
                    "description": "",
                    "type": "Runner"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3132,
            "description": "Return a plain-object representation of `test`\nfree of cyclic properties etc.",
            "params": [
                {
                    "name": "test",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3150,
            "description": "Transform `error` into a JSON object.",
            "params": [
                {
                    "name": "err",
                    "description": "",
                    "type": "Error"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3168,
            "description": "Module dependencies.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3176,
            "description": "Expose `Landing`.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3182,
            "description": "Airplane color.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3188,
            "description": "Airplane crash color.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3194,
            "description": "Runway color.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3200,
            "description": "Initialize a new `Landing` reporter.",
            "params": [
                {
                    "name": "runner",
                    "description": "",
                    "type": "Runner"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3259,
            "description": "Inherit from `Base.prototype`.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3272,
            "description": "Module dependencies.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3280,
            "description": "Expose `List`.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3286,
            "description": "Initialize a new `List` test reporter.",
            "params": [
                {
                    "name": "runner",
                    "description": "",
                    "type": "Runner"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3330,
            "description": "Inherit from `Base.prototype`.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3343,
            "description": "Module dependencies.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3350,
            "description": "Expose `Markdown`.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3356,
            "description": "Initialize a new `Markdown` reporter.",
            "params": [
                {
                    "name": "runner",
                    "description": "",
                    "type": "Runner"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3438,
            "description": "Module dependencies.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3444,
            "description": "Expose `Min`.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3450,
            "description": "Initialize a new `Min` minimal test reporter (best used with --watch).",
            "params": [
                {
                    "name": "runner",
                    "description": "",
                    "type": "Runner"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3470,
            "description": "Inherit from `Base.prototype`.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3483,
            "description": "Module dependencies.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3490,
            "description": "Expose `Dot`.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3496,
            "description": "Initialize a new `Dot` matrix test reporter.",
            "params": [
                {
                    "name": "runner",
                    "description": "",
                    "type": "Runner"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3542,
            "description": "Draw the nyan cat",
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3556,
            "description": "Draw the \"scoreboard\" showing the number\nof passes, failures and pending tests.",
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3581,
            "description": "Append the rainbow.",
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3598,
            "description": "Draw the rainbow.",
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3616,
            "description": "Draw the nyan cat",
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3652,
            "description": "Draw nyan cat face.",
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3672,
            "description": "Move cursor up `n`.",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "Number"
                }
            ],
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3683,
            "description": "Move cursor down `n`.",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "Number"
                }
            ],
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3694,
            "description": "Generate rainbow colors.",
            "return": {
                "description": "",
                "type": "Array"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3716,
            "description": "Apply rainbow to the given `str`.",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3730,
            "description": "Stdout helper.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3738,
            "description": "Inherit from `Base.prototype`.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3751,
            "description": "Module dependencies.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3759,
            "description": "Expose `Progress`.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3765,
            "description": "General progress bar color.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3771,
            "description": "Initialize a new `Progress` bar test reporter.",
            "params": [
                {
                    "name": "runner",
                    "description": "",
                    "type": "Runner"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3838,
            "description": "Inherit from `Base.prototype`.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3852,
            "description": "Module dependencies.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3860,
            "description": "Expose `Spec`.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3866,
            "description": "Initialize a new `Spec` test reporter.",
            "params": [
                {
                    "name": "runner",
                    "description": "",
                    "type": "Runner"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3929,
            "description": "Inherit from `Base.prototype`.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3943,
            "description": "Module dependencies.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3951,
            "description": "Expose `TAP`.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 3957,
            "description": "Initialize a new `TAP` reporter.",
            "params": [
                {
                    "name": "runner",
                    "description": "",
                    "type": "Runner"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4004,
            "description": "Return a TAP-safe title of `test`",
            "params": [
                {
                    "name": "test",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4020,
            "description": "Module dependencies.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4028,
            "description": "Save timer references to avoid Sinon interfering (see GH-237).",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4038,
            "description": "Expose `XUnit`.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4044,
            "description": "Initialize a new `XUnit` reporter.",
            "params": [
                {
                    "name": "runner",
                    "description": "",
                    "type": "Runner"
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4085,
            "description": "Inherit from `Base.prototype`.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4095,
            "description": "Output tag for the given `test.`",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4116,
            "description": "HTML tag helper.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4134,
            "description": "Return cdata escaped CDATA `str`.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4146,
            "description": "Module dependencies.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4154,
            "description": "Save timer references to avoid Sinon interfering (see GH-237).",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4164,
            "description": "Object#toString().",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4170,
            "description": "Expose `Runnable`.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4176,
            "description": "Initialize a new `Runnable` with the given `title` and callback `fn`.",
            "params": [
                {
                    "name": "title",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4195,
            "description": "Inherit from `EventEmitter.prototype`.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4205,
            "description": "Set & get timeout `ms`.",
            "params": [
                {
                    "name": "ms",
                    "description": "",
                    "type": "Number|String"
                }
            ],
            "return": {
                "description": "ms or self",
                "type": "Runnable|Number"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4223,
            "description": "Set & get slow `ms`.",
            "params": [
                {
                    "name": "ms",
                    "description": "",
                    "type": "Number|String"
                }
            ],
            "return": {
                "description": "ms or self",
                "type": "Runnable|Number"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4239,
            "description": "Set and & get timeout `enabled`.",
            "params": [
                {
                    "name": "enabled",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "enabled or self",
                "type": "Runnable|Boolean"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4254,
            "description": "Return the full title generated by recursively\nconcatenating the parent's full title.",
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4266,
            "description": "Clear the timeout.",
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4276,
            "description": "Inspect the runnable void of private properties.",
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4292,
            "description": "Reset the timeout.",
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4310,
            "description": "Whitelist these globals for this test run",
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4320,
            "description": "Run the test and invoke `fn(err)`.",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4416,
            "description": "Module dependencies.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4427,
            "description": "Non-enumerable globals.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4440,
            "description": "Expose `Runner`.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4446,
            "description": "Initialize a `Runner` for the given `suite`.\n\nEvents:\n\n  - `start`  execution started\n  - `end`  execution complete\n  - `suite`  (suite) test suite execution started\n  - `suite end`  (suite) all tests (and sub-suites) have finished\n  - `test`  (test) test execution started\n  - `test end`  (test) test completed\n  - `hook`  (hook) hook execution started\n  - `hook end`  (hook) hook complete\n  - `pass`  (test) test passed\n  - `fail`  (test, err) test failed\n  - `pending`  (test) test pending",
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4479,
            "description": "Wrapper for setImmediate, process.nextTick, or browser polyfill.",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4488,
            "description": "Inherit from `EventEmitter.prototype`.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4498,
            "description": "Run tests with full titles matching `re`. Updates runner.total\nwith number of tests matched.",
            "params": [
                {
                    "name": "re",
                    "description": "",
                    "type": "RegExp"
                },
                {
                    "name": "invert",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "for chaining",
                "type": "Runner"
            },
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4516,
            "description": "Returns the number of tests matching the grep search for the\ngiven suite.",
            "params": [
                {
                    "name": "suite",
                    "description": "",
                    "type": "Suite"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4538,
            "description": "Return a list of global properties.",
            "return": {
                "description": "",
                "type": "Array"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4557,
            "description": "Allow the given `arr` of globals.",
            "params": [
                {
                    "name": "arr",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "for chaining",
                "type": "Runner"
            },
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4572,
            "description": "Check for global variable leaks.",
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4602,
            "description": "Fail the given `test`.",
            "params": [
                {
                    "name": "test",
                    "description": "",
                    "type": "Test"
                },
                {
                    "name": "err",
                    "description": "",
                    "type": "Error"
                }
            ],
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4621,
            "description": "Fail the given `hook` with `err`.\n\nHook failures work in the following pattern:\n- If bail, then exit\n- Failed `before` hook skips all tests in a suite and subsuites,\n  but jumps to corresponding `after` hook\n- Failed `before each` hook skips remaining tests in a\n  suite and jumps to corresponding `after each` hook,\n  which is run only once\n- Failed `after` hook does not alter\n  execution order\n- Failed `after each` hook skips remaining tests in a\n  suite and subsuites, but executes other `after each`\n  hooks",
            "params": [
                {
                    "name": "hook",
                    "description": "",
                    "type": "Hook"
                },
                {
                    "name": "err",
                    "description": "",
                    "type": "Error"
                }
            ],
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4649,
            "description": "Run hook `name` callbacks and then invoke `fn()`.",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "function",
                    "description": "",
                    "type": "Function"
                }
            ],
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4698,
            "description": "Run hook `name` for the given array of `suites`\nin order, and callback `fn(err, errSuite)`.",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "suites",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4734,
            "description": "Run hooks from the top level down.",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4747,
            "description": "Run hooks from the bottom up.",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4760,
            "description": "Return an array of parent Suites from\nclosest to furthest.",
            "return": {
                "description": "",
                "type": "Array"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4775,
            "description": "Run the current test and callback `fn(err)`.",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4798,
            "description": "Run tests in the given `suite` and invoke\nthe callback `fn()` when complete.",
            "params": [
                {
                    "name": "suite",
                    "description": "",
                    "type": "Suite"
                },
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4891,
            "description": "Run the given `suite` and invoke the\ncallback `fn()` when complete.",
            "params": [
                {
                    "name": "suite",
                    "description": "",
                    "type": "Suite"
                },
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4946,
            "description": "Handle uncaught exceptions.",
            "params": [
                {
                    "name": "err",
                    "description": "",
                    "type": "Error"
                }
            ],
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 4978,
            "description": "Run the root suite and invoke `fn(failures)`\non completion.",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "for chaining",
                "type": "Runner"
            },
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5017,
            "description": "Cleanly abort execution",
            "return": {
                "description": "for chaining",
                "type": "Runner"
            },
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5028,
            "description": "Filter leaks with the given globals flagged as `ok`.",
            "params": [
                {
                    "name": "ok",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "globals",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5062,
            "description": "Array of globals dependent on the environment.",
            "return": {
                "description": "",
                "type": "Array"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5091,
            "description": "Module dependencies.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5101,
            "description": "Expose `Suite`.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5107,
            "description": "Create a new `Suite` with the given `title`\nand parent `Suite`. When a suite with the\nsame title is already present, that suite\nis returned to provide nicer reporter\nand more flexible meta-testing.",
            "params": [
                {
                    "name": "parent",
                    "description": "",
                    "type": "Suite"
                },
                {
                    "name": "title",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Suite"
            },
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5129,
            "description": "Initialize a new `Suite` with the given\n`title` and `ctx`.",
            "params": [
                {
                    "name": "title",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "ctx",
                    "description": "",
                    "type": "Context"
                }
            ],
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5157,
            "description": "Inherit from `EventEmitter.prototype`.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5167,
            "description": "Return a clone of this `Suite`.",
            "return": {
                "description": "",
                "type": "Suite"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5185,
            "description": "Set timeout `ms` or short-hand such as \"2s\".",
            "params": [
                {
                    "name": "ms",
                    "description": "",
                    "type": "Number|String"
                }
            ],
            "return": {
                "description": "for chaining",
                "type": "Suite|Number"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5202,
            "description": "Set timeout `enabled`.",
            "params": [
                {
                    "name": "enabled",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "self or enabled",
                "type": "Suite|Boolean"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5217,
            "description": "Set slow `ms` or short-hand such as \"2s\".",
            "params": [
                {
                    "name": "ms",
                    "description": "",
                    "type": "Number|String"
                }
            ],
            "return": {
                "description": "for chaining",
                "type": "Suite|Number"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5233,
            "description": "Sets whether to bail after first error.",
            "params": [
                {
                    "name": "bail",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "for chaining",
                "type": "Suite|Number"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5248,
            "description": "Run `fn(test[, done])` before running tests.",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "for chaining",
                "type": "Suite"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5275,
            "description": "Run `fn(test[, done])` after running tests.",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "for chaining",
                "type": "Suite"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5302,
            "description": "Run `fn(test[, done])` before each test case.",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "for chaining",
                "type": "Suite"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5329,
            "description": "Run `fn(test[, done])` after each test case.",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "for chaining",
                "type": "Suite"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5356,
            "description": "Add a test `suite`.",
            "params": [
                {
                    "name": "suite",
                    "description": "",
                    "type": "Suite"
                }
            ],
            "return": {
                "description": "for chaining",
                "type": "Suite"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5375,
            "description": "Add a `test` to this suite.",
            "params": [
                {
                    "name": "test",
                    "description": "",
                    "type": "Test"
                }
            ],
            "return": {
                "description": "for chaining",
                "type": "Suite"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5394,
            "description": "Return the full title generated by recursively\nconcatenating the parent's full title.",
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5410,
            "description": "Return the total number of tests.",
            "return": {
                "description": "",
                "type": "Number"
            },
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5423,
            "description": "Iterates through each suite recursively to find\nall tests. Applies a function in the format\n`fn(test)`.",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Suite"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5445,
            "description": "Module dependencies.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5451,
            "description": "Expose `Test`.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5457,
            "description": "Initialize a new `Test` with the given `title` and callback `fn`.",
            "params": [
                {
                    "name": "title",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5471,
            "description": "Inherit from `Runnable.prototype`.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5484,
            "description": "Module dependencies.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5493,
            "description": "Ignored directories.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5499,
            "description": "Escape special characters in the given string of html.",
            "params": [
                {
                    "name": "html",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5515,
            "description": "Array#forEach (<=IE8)",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "",
                    "type": "Object"
                }
            ],
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5529,
            "description": "Array#map (<=IE8)",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "",
                    "type": "Object"
                }
            ],
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5545,
            "description": "Array#indexOf (<=IE8)",
            "params": [
                {
                    "name": "arr",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "obj",
                    "description": "to find index of",
                    "type": "Object"
                },
                {
                    "name": "start",
                    "description": "",
                    "type": "Number"
                }
            ],
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5562,
            "description": "Array#reduce (<=IE8)",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "initial",
                    "description": "value",
                    "type": "Object"
                }
            ],
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5581,
            "description": "Array#filter (<=IE8)",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5600,
            "description": "Object.keys (<=IE8)",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "keys",
                "type": "Array"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5621,
            "description": "Watch the given `files` for changes\nand invoke `fn(file)` on modification.",
            "params": [
                {
                    "name": "files",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5640,
            "description": "Ignored files.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5648,
            "description": "Lookup files in the given `dir`.",
            "return": {
                "description": "",
                "type": "Array"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5675,
            "description": "Compute a slug from the given `str`.",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5690,
            "description": "Strip the function definition from `str`,\nand re-indent for pre whitespace.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5710,
            "description": "Escape regular expression characters in `str`.",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5722,
            "description": "Trim the given `str`.",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5734,
            "description": "Parse the given `qs`.",
            "params": [
                {
                    "name": "qs",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5753,
            "description": "Highlight the given string of `js`.",
            "params": [
                {
                    "name": "js",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5773,
            "description": "Highlight the contents of tag `name`.",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5788,
            "description": "Stringify `obj`.",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5801,
            "description": "Return a new object that has the keys in sorted order.",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5839,
            "description": "Save timer references to avoid Sinon interfering (see GH-237).",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5849,
            "description": "Node shims.\n\nThese are meant only to allow\nmocha.js to run untouched, not\nto allow running node code in\nthe browser.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5866,
            "description": "Remove uncaughtException listener.\nRevert to original onerror handler if previously defined.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5883,
            "description": "Implements uncaughtException listener.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5897,
            "description": "Expose mocha.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5924,
            "description": "High-performance override of Runner.immediately.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5935,
            "description": "Function to allow assertion libraries to throw errors directly into mocha.\nThis is useful when running tests in a browser because window.onerror will\nonly receive the 'message' attribute of the Error.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5947,
            "description": "Override ui to ensure that the ui functions are initialized.\nNormally this would happen in Mocha.prototype.loadFiles.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5958,
            "description": "Setup mocha with the given setting options.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5968,
            "description": "Run mocha, returning the Runner.",
            "class": "window"
        },
        {
            "file": "server/mocha/mocha.js",
            "line": 5989,
            "description": "Expose the process shim.",
            "class": "window"
        },
        {
            "file": "server/mocha/should.js",
            "line": 1,
            "description": "should - test framework agnostic BDD-style assertions",
            "version": "v4.0.4",
            "author": "TJ Holowaychuk <tj@vision-media.ca> and contributors",
            "link": "https://github.com/shouldjs/should.js",
            "license": "MIT",
            "class": "window"
        },
        {
            "file": "server/mocha/should.js",
            "line": 126,
            "description": "Expose assert to should\n\nThis allows you to do things like below\nwithout require()ing the assert module.\n\n   should.equal(foo.bar, undefined);",
            "class": "window"
        },
        {
            "file": "server/mocha/should.js",
            "line": 137,
            "description": "Assert _obj_ exists, with optional message.",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "msg",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/should.js",
            "line": 152,
            "description": "Asserts _obj_ does not exist, with optional message.",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "msg",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/should.js",
            "line": 943,
            "description": "Echos the value of a value. Trys to print the value out\nin the best way possible given the different types.",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to print out.",
                    "type": "Object"
                },
                {
                    "name": "opts",
                    "description": "Optional options object that alters the output.",
                    "type": "Object"
                }
            ],
            "class": "window"
        },
        {
            "file": "server/mocha/should.js",
            "line": 1360,
            "description": "Our function should",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Assertion"
            },
            "class": "window"
        },
        {
            "file": "server/mocha/should.js",
            "line": 1369,
            "description": "Initialize a new `Assertion` with the given _obj_.",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "*"
                }
            ],
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/should.js",
            "line": 1381,
            "description": "Way to extend Assertion function. It uses some logic\nto define only positive assertions and itself rule with negative assertion.\n\nAll actions happen in subcontext and this method take care about negation.\nPotentially we can add some more modifiers that does not depends from state of assertion.",
            "class": "window"
        },
        {
            "file": "server/mocha/should.js",
            "line": 1446,
            "description": "Expose should to external world.",
            "class": "window"
        },
        {
            "file": "server/mocha/should.js",
            "line": 1452,
            "description": "Expose api via `Object#should`.",
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/should.js",
            "line": 1507,
            "description": "Negation modifier.",
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/should.js",
            "line": 1518,
            "description": "Any modifier - it affect on execution of sequenced assertion to do not check all, but any of",
            "api": "public",
            "class": "window"
        },
        {
            "file": "server/mocha/should.js",
            "line": 1549,
            "description": "Check if given obj just a primitive type wrapper",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/should.js",
            "line": 1559,
            "description": "Merge object b with object a.\n\n    var a = { foo: 'bar' }\n      , b = { bar: 'baz' };\n\n    utils.merge(a, b);\n    // => { foo: 'bar', bar: 'baz' }",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "api": "private",
            "class": "window"
        },
        {
            "file": "server/mocha/should.js",
            "line": 2188,
            "description": "Echos the value of a value. Trys to print the value out\nin the best way possible given the different types.",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to print out.",
                    "type": "Object"
                },
                {
                    "name": "opts",
                    "description": "Optional options object that alters the output.",
                    "type": "Object"
                }
            ],
            "class": "window"
        },
        {
            "file": "server/mocha/should.js",
            "line": 2628,
            "description": "Inherit the prototype methods from one constructor into another.\n\nThe Function.prototype.inherits from lang.js rewritten as a standalone\nfunction (not on Function.prototype). NOTE: If this file is to be loaded\nduring bootstrapping this function needs to be rewritten using some native\nfunctions as prototype setup using normal JavaScript does not work as\nexpected during bootstrapping (see mirror.js in r114903).",
            "params": [
                {
                    "name": "ctor",
                    "description": "Constructor function which needs to inherit the\n    prototype.",
                    "type": "Function"
                },
                {
                    "name": "superCtor",
                    "description": "Constructor function to inherit prototype from.",
                    "type": "Function"
                }
            ],
            "class": "window"
        },
        {
            "file": "server/polyfills/lib/agent.js",
            "line": 3,
            "description": "Create mappings between the names parsed from useragent (based on\nhttps://github.com/tobie/ua-parser/blob/master/regexes.yaml) to caniuse\nname equivalents.\n\nEach caniuse name can match against many names.\n\nTo add a new mapping add the UA name to the appropriate key.",
            "class": "window"
        },
        {
            "file": "server/polyfills/lib/agent.js",
            "line": 69,
            "description": "jQuery: isNumeric\nhttps://github.com/jquery/jquery/blob/bbdfbb4ee859fe9319b348d88120ddc2c9efbd63/src/core.js#L212",
            "class": "window"
        },
        {
            "file": "server/polyfills/lib/aliases.js",
            "line": 3,
            "description": "Apply a function to each element in the array and concatenate the result\nof the function into a new array.",
            "example": [
                " The difference between map and flatMap\n> [0, 1, 2].map(function(val) {return [val + 1, val + 2]; });\n[ [ 1, 2 ], [ 2, 3 ], [ 3, 4 ] ]\n\n> flatMap([0, 1, 2], function(val) { return [val + 1, val + 2]; });\n[ 1, 2, 2, 3, 3, 4 ]"
            ],
            "class": "window"
        },
        {
            "file": "server/polyfills/lib/aliases.js",
            "line": 17,
            "description": "The AliasResolver provides the logic used for expanding and resolving\npolyfill identifiers using more than one mechanism (if required).\n\nA polyfill identifier is an object with at least a 'name' and 'flags'\nproperty, where the 'name' is the string identifying a polyfill and\n'flags' is an array containing any flags that should be applied with\nthe polyfill (and subsequently to any aliased polyfills).\n\n e.g: { name: \"modernizr:es5\", flags: [\"always\"] }",
            "class": "window"
        },
        {
            "file": "server/polyfills/lib/aliases.js",
            "line": 30,
            "description": "potentially alternate string identifiers (e.g. expanded names the alias refers to)\n\nThe key point is that each is invoked in sequence with the result of\nthe previous function as an argument.",
            "class": "window"
        },
        {
            "file": "server/polyfills/lib/aliases.js",
            "line": 38,
            "description": "Run a name resolver function over each polyfill identifier in an array,\nremove duplicates after the resolution and keep track of aliases and\nflags.",
            "params": [
                {
                    "name": "polyfillIdentifiers",
                    "description": "A list of polyfill identifiers to expand.",
                    "type": "Array"
                },
                {
                    "name": "polyfillNameResolverFunction",
                    "description": "The identifier name resolver function to use in\n                                               the resolution process.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "An expanded list of polyfill identifiers",
                "type": "Array"
            },
            "class": "window"
        },
        {
            "file": "server/polyfills/lib/aliases.js",
            "line": 110,
            "description": "Resolve an array of polyfill identifiers by iteratively invoking the\nresolver functions on each element.",
            "params": [
                {
                    "name": "polyfillIdentifiers",
                    "description": "The polyfill identifier objects\n                                   to resolve. A polyfill identifier is\n                                   an object with a 'name' property as a string\n                                   and a 'flags' property as an array",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "An resolved list of resolved polyfill identifiers.",
                "type": "Array"
            },
            "class": "window"
        },
        {
            "file": "server/polyfills/lib/aliases.js",
            "line": 130,
            "description": "logic.",
            "params": [
                {
                    "name": "A",
                    "description": "function that takes a single string argument\n                  and returns an array of string elements\n                  representing the expanded identifiers/aliases.",
                    "type": "Function"
                }
            ],
            "class": "window"
        },
        {
            "file": "server/polyfills/polyfills/html5shiv/polyfill.js",
            "line": 1,
            "preserve": "HTML5 Shiv 3.7.2 | @afarkas @jdalton @jon_neal @rem | MIT/GPL2 Licensed",
            "class": "window"
        },
        {
            "file": "server/polyfills/polyfills/html5shiv/polyfill.js",
            "line": 6,
            "class": "window"
        },
        {
            "file": "server/polyfills/polyfills/html5shiv/polyfill.js",
            "line": 9,
            "class": "window"
        },
        {
            "file": "server/polyfills/polyfills/html5shiv/polyfill.js",
            "line": 12,
            "class": "window"
        },
        {
            "file": "server/polyfills/polyfills/html5shiv/polyfill.js",
            "line": 15,
            "class": "window"
        },
        {
            "file": "server/polyfills/polyfills/html5shiv/polyfill.js",
            "line": 18,
            "class": "window"
        },
        {
            "file": "server/polyfills/polyfills/html5shiv/polyfill.js",
            "line": 21,
            "class": "window"
        },
        {
            "file": "server/polyfills/polyfills/html5shiv/polyfill.js",
            "line": 24,
            "class": "window"
        },
        {
            "file": "server/polyfills/polyfills/html5shiv/polyfill.js",
            "line": 27,
            "class": "window"
        },
        {
            "file": "server/polyfills/polyfills/html5shiv/polyfill.js",
            "line": 30,
            "class": "window"
        },
        {
            "file": "server/polyfills/polyfills/html5shiv/polyfill.js",
            "line": 60,
            "description": "Creates a style sheet with the given CSS text and adds it to the document.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ownerDocument",
                    "description": "The document.",
                    "type": "Document"
                },
                {
                    "name": "cssText",
                    "description": "The CSS text.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The style element.",
                "type": "StyleSheet"
            },
            "class": "window"
        },
        {
            "file": "server/polyfills/polyfills/html5shiv/polyfill.js",
            "line": 75,
            "description": "Returns the value of `html5.elements` as an array.",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "An array of shived element node names.",
                "type": "Array"
            },
            "class": "window"
        },
        {
            "file": "server/polyfills/polyfills/html5shiv/polyfill.js",
            "line": 85,
            "description": "Extends the built-in list of html5 elements",
            "memberof": "html5",
            "params": [
                {
                    "name": "newElements",
                    "description": "whitespace separated list or array of new element names to shiv",
                    "type": "String|Array"
                },
                {
                    "name": "ownerDocument",
                    "description": "The context document.",
                    "type": "Document"
                }
            ],
            "class": "window"
        },
        {
            "file": "server/polyfills/polyfills/html5shiv/polyfill.js",
            "line": 103,
            "description": "Returns the data associated to the given document",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ownerDocument",
                    "description": "The document.",
                    "type": "Document"
                }
            ],
            "return": {
                "description": "An object of data.",
                "type": "Object"
            },
            "class": "window"
        },
        {
            "file": "server/polyfills/polyfills/html5shiv/polyfill.js",
            "line": 120,
            "description": "returns a shived element for the given nodeName and document",
            "memberof": "html5",
            "params": [
                {
                    "name": "nodeName",
                    "description": "name of the element",
                    "type": "String"
                },
                {
                    "name": "ownerDocument",
                    "description": "The context document.",
                    "type": "Document"
                }
            ],
            "return": {
                "description": "The shived element.",
                "type": "Object"
            },
            "class": "window"
        },
        {
            "file": "server/polyfills/polyfills/html5shiv/polyfill.js",
            "line": 157,
            "description": "returns a shived DocumentFragment for the given document",
            "memberof": "html5",
            "params": [
                {
                    "name": "ownerDocument",
                    "description": "The context document.",
                    "type": "Document"
                }
            ],
            "return": {
                "description": "The shived DocumentFragment.",
                "type": "Object"
            },
            "class": "window"
        },
        {
            "file": "server/polyfills/polyfills/html5shiv/polyfill.js",
            "line": 181,
            "description": "Shivs the `createElement` and `createDocumentFragment` methods of the document.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ownerDocument",
                    "description": "The document.",
                    "type": "Document|DocumentFragment"
                },
                {
                    "name": "data",
                    "description": "of the document.",
                    "type": "Object"
                }
            ],
            "class": "window"
        },
        {
            "file": "server/polyfills/polyfills/html5shiv/polyfill.js",
            "line": 219,
            "description": "Shivs the given document.",
            "memberof": "html5",
            "params": [
                {
                    "name": "ownerDocument",
                    "description": "The document to shiv.",
                    "type": "Document"
                }
            ],
            "return": {
                "description": "The shived document.",
                "type": "Document"
            },
            "class": "window"
        },
        {
            "file": "server/polyfills/polyfills/html5shiv/polyfill.js",
            "line": 249,
            "description": "The `html5` object is exposed so that more elements can be shived and\nexisting shiving can be detected on iframes.",
            "type": "Object",
            "example": [
                "\n\n// options can be changed before the script is included\nhtml5 = { 'elements': 'mark section', 'shivCSS': false, 'shivMethods': false };"
            ],
            "class": "window"
        },
        {
            "file": "server/polyfills/polyfills/html5shiv/polyfill.js",
            "line": 260,
            "description": "An array or space separated string of node names of the elements to shiv.",
            "memberof": "html5",
            "type": "Array|String",
            "class": "window"
        },
        {
            "file": "server/polyfills/polyfills/html5shiv/polyfill.js",
            "line": 267,
            "description": "current version of html5shiv",
            "class": "window"
        },
        {
            "file": "server/polyfills/polyfills/html5shiv/polyfill.js",
            "line": 272,
            "description": "A flag to indicate that the HTML5 style sheet should be inserted.",
            "memberof": "html5",
            "type": "Boolean",
            "class": "window"
        },
        {
            "file": "server/polyfills/polyfills/html5shiv/polyfill.js",
            "line": 279,
            "description": "Is equal to true if a browser supports creating unknown/HTML5 elements",
            "memberof": "html5",
            "type": "boolean",
            "class": "window"
        },
        {
            "file": "server/polyfills/polyfills/html5shiv/polyfill.js",
            "line": 286,
            "description": "A flag to indicate that the document's `createElement` and `createDocumentFragment`\nmethods should be overwritten.",
            "memberof": "html5",
            "type": "Boolean",
            "class": "window"
        },
        {
            "file": "server/polyfills/polyfills/html5shiv/polyfill.js",
            "line": 294,
            "description": "A string to describe the type of `html5` object (\"default\" or \"default print\").",
            "memberof": "html5",
            "type": "String",
            "class": "window"
        },
        {
            "file": "server/polyfills/helpers.js",
            "line": 1,
            "class": "window"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 44,
            "description": "Wrapper for built-in http.js to emulate the browser XMLHttpRequest object.\n\nThis can be used with JS designed for browsers to improve reuse of code and\nallow the use of existing libraries.\n\nUsage: include(\"XMLHttpRequest.js\") and use XMLHttpRequest per W3C specs.",
            "author": "Dan DeFelippi <dan@driverdan.com>",
            "contributor": "David Ellis <d.f.ellis@ieee.org>",
            "license": "MIT",
            "class": "window"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 63,
            "description": "Private variables",
            "class": "window"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 130,
            "description": "Constants",
            "class": "window"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 140,
            "description": "Public vars",
            "class": "window"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 156,
            "description": "Private methods",
            "class": "window"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 164,
            "description": "Check if the specified header is allowed.",
            "params": [
                {
                    "name": "string",
                    "description": "header Header to validate"
                }
            ],
            "return": {
                "description": "boolean False if not allowed, otherwise true"
            },
            "class": "window"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 174,
            "description": "Check if the specified method is allowed.",
            "params": [
                {
                    "name": "string",
                    "description": "method Request method to validate"
                }
            ],
            "return": {
                "description": "boolean False if not allowed, otherwise true"
            },
            "class": "window"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 184,
            "description": "Public methods",
            "class": "window"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 188,
            "description": "Open the connection. Currently supports local server requests.",
            "params": [
                {
                    "name": "string",
                    "description": "method Connection method (eg GET, POST)"
                },
                {
                    "name": "string",
                    "description": "url URL for the connection."
                },
                {
                    "name": "boolean",
                    "description": "async Asynchronous connection. Default is true."
                },
                {
                    "name": "string",
                    "description": "user Username for basic authentication (optional)"
                },
                {
                    "name": "string",
                    "description": "password Password for basic authentication (optional)"
                }
            ],
            "class": "window"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 217,
            "description": "Disables or enables isAllowedHttpHeader() check the request. Enabled by default.\nThis does not conform to the W3C spec.",
            "params": [
                {
                    "name": "boolean",
                    "description": "state Enable or disable header checking."
                }
            ],
            "class": "window"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 227,
            "description": "Sets a header for the request.",
            "params": [
                {
                    "name": "string",
                    "description": "header Header name"
                },
                {
                    "name": "string",
                    "description": "value Header value"
                }
            ],
            "class": "window"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 247,
            "description": "Gets a header from the server response.",
            "params": [
                {
                    "name": "string",
                    "description": "header Name of header to get."
                }
            ],
            "return": {
                "description": "string Text of the header or null if it doesn't exist."
            },
            "class": "window"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 261,
            "description": "Gets all the response headers.",
            "return": {
                "description": "string A string with all response headers separated by CR+LF"
            },
            "class": "window"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 281,
            "description": "Gets a request header",
            "params": [
                {
                    "name": "string",
                    "description": "name Name of header to get"
                }
            ],
            "return": {
                "description": "string Returns the request header or empty string if not set"
            },
            "class": "window"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 296,
            "description": "Sends the request to the server.",
            "params": [
                {
                    "name": "string",
                    "description": "data Optional data to send as request body."
                }
            ],
            "class": "window"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 556,
            "description": "Called when an error is encountered to deal with it.",
            "class": "window"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 567,
            "description": "Aborts a request.",
            "class": "window"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 589,
            "description": "Adds an event listener. Preferred method of binding to events.",
            "class": "window"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 600,
            "description": "Remove an event callback that has already been bound.\nOnly works on the matching funciton, cannot be a copy.",
            "class": "window"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 613,
            "description": "Dispatch any events, including both \"on\" methods and events attached using addEventListener.",
            "class": "window"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 627,
            "description": "Changes readyState and calls onreadystatechange.",
            "params": [
                {
                    "name": "int",
                    "description": "state New state"
                }
            ],
            "class": "window"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 916,
            "description": "Checks whether an item is inside the Array.\nAlias for (array.indexOf(item) > -1)",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "item",
                    "description": "the item to seek",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "whether the item is part of the Array",
                "type": "Boolean"
            },
            "class": "Array",
            "module": "js-ext",
            "submodule": "lib/array.js"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 928,
            "description": "Removes an item from the array",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "item",
                    "description": "the item (or an hash of items) to be removed",
                    "type": "Any|Array"
                },
                {
                    "name": "arrayItem",
                    "description": "whether `item` is an arrayItem that should be treated as a single item to be removed\n       You need to set `arrayItem=true` in those cases. Otherwise, all single items from `item` are removed separately.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "chainable": 1,
            "class": "Array",
            "module": "js-ext",
            "submodule": "lib/array.js"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 952,
            "description": "Replaces an item in the array. If the previous item is not part of the array, the new item is appended.",
            "itemtype": "method",
            "name": "replace",
            "params": [
                {
                    "name": "prevItem",
                    "description": "the item to be replaced",
                    "type": "Any"
                },
                {
                    "name": "newItem",
                    "description": "the item to be added",
                    "type": "Any"
                }
            ],
            "chainable": 1,
            "class": "Array",
            "module": "js-ext",
            "submodule": "lib/array.js"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 967,
            "description": "Inserts an item in the array at the specified position. If index is larger than array.length, the new item(s) will be appended.",
            "itemtype": "method",
            "name": "insertAt",
            "params": [
                {
                    "name": "item",
                    "description": "the item to be replaced, may be an Array of items",
                    "type": "Any|Array"
                },
                {
                    "name": "index",
                    "description": "the position where to add the item(s). When larger than Array.length, the item(s) will be appended.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "Array",
            "module": "js-ext",
            "submodule": "lib/array.js"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 980,
            "description": "Shuffles the items in the Array randomly",
            "itemtype": "method",
            "name": "shuffle",
            "chainable": 1,
            "class": "Array",
            "module": "js-ext",
            "submodule": "lib/array.js"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 1006,
            "description": "Returns a deep copy of the Array.\nOnly handles members of primary types, Dates, Arrays and Objects.",
            "itemtype": "method",
            "name": "deepClone",
            "return": {
                "description": "deep-copy of the original",
                "type": "Array"
            },
            "class": "Array",
            "module": "js-ext",
            "submodule": "lib/array.js"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 1171,
            "description": "Loops through all properties in the object.  Equivalent to Array.forEach.\nThe callback is provided with the value of the property, the name of the property\nand a reference to the whole object itself.\nThe context to run the callback in can be overriden, otherwise it is undefined.",
            "itemtype": "method",
            "name": "each",
            "params": [
                {
                    "name": "fn",
                    "description": "Function to be executed on each item in the object.  It will receive\n                     value {any} value of the property\n                     key {string} name of the property\n                     obj {Object} the whole of the object",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "class": "Object",
            "module": "js-ext",
            "submodule": "lib/object.js"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 1197,
            "description": "Loops through the properties in an object until the callback function returns *truish*.\nThe callback is provided with the value of the property, the name of the property\nand a reference to the whole object itself.\nThe order in which the elements are visited is not predictable.\nThe context to run the callback in can be overriden, otherwise it is undefined.",
            "itemtype": "method",
            "name": "some",
            "params": [
                {
                    "name": "fn",
                    "description": "Function to be executed on each item in the object.  It will receive\n                     value {any} value of the property\n                     key {string} name of the property\n                     obj {Object} the whole of the object",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "true if the loop was interrupted by the callback function returning *truish*.",
                "type": "Boolean"
            },
            "class": "Object",
            "module": "js-ext",
            "submodule": "lib/object.js"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 1225,
            "description": "Loops through the properties in an object until the callback assembling a new object\nwith its properties set to the values returned by the callback function.\nIf the callback function returns `undefined` the property will not be copied to the new object.\nThe resulting object will have the same keys as the original, except for those where the callback\nreturned `undefined` which will have dissapeared.\nThe callback is provided with the value of the property, the name of the property\nand a reference to the whole object itself.\nThe context to run the callback in can be overriden, otherwise it is undefined.",
            "itemtype": "method",
            "name": "map",
            "params": [
                {
                    "name": "fn",
                    "description": "Function to be executed on each item in the object.  It will receive\n                     value {any} value of the property\n                     key {string} name of the property\n                     obj {Object} the whole of the object",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The new object with its properties set to the values returned by the callback function.",
                "type": "Object"
            },
            "class": "Object",
            "module": "js-ext",
            "submodule": "lib/object.js"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 1257,
            "description": "Returns the keys of the object.",
            "itemtype": "method",
            "name": "keys",
            "return": {
                "description": "Keys of the object",
                "type": "Array"
            },
            "class": "Object",
            "module": "js-ext",
            "submodule": "lib/object.js"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 1266,
            "description": "Returns the number of keys of the object",
            "itemtype": "method",
            "name": "size",
            "return": {
                "description": "Number of items",
                "type": "Number"
            },
            "class": "Object",
            "module": "js-ext",
            "submodule": "lib/object.js"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 1275,
            "description": "Loops through the object collection the values of all its properties.\nIt is the counterpart of the [`keys`](#method_keys).",
            "itemtype": "method",
            "name": "values",
            "return": {
                "description": "values of the object",
                "type": "Array"
            },
            "class": "Object",
            "module": "js-ext",
            "submodule": "lib/object.js"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 1295,
            "description": "Returns true if the object has no own members",
            "itemtype": "method",
            "name": "isEmpty",
            "return": {
                "description": "true if the object is empty",
                "type": "Boolean"
            },
            "class": "Object",
            "module": "js-ext",
            "submodule": "lib/object.js"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 1308,
            "description": "Creates a protected property on the object.",
            "itemtype": "method",
            "name": "protectedProp",
            "chainable": 1,
            "class": "Object",
            "module": "js-ext",
            "submodule": "lib/object.js"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 1324,
            "description": "Returns a shallow copy of the object.\nIt does not clone objects within the object, it does a simple, shallow clone.\nFast, mostly useful for plain hash maps.",
            "itemtype": "method",
            "name": "shallowClone",
            "return": {
                "description": "shallow copy of the original",
                "type": "Object"
            },
            "class": "Object",
            "module": "js-ext",
            "submodule": "lib/object.js"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 1345,
            "description": "Compares this object with the reference-object whether they have the same value.\nNot by reference, but their content as simple types.\n\nCompares both JSON.stringify objects",
            "itemtype": "method",
            "name": "sameValue",
            "params": [
                {
                    "name": "refObj",
                    "description": "the object to compare with",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "whether both objects have the same value",
                "type": "Boolean"
            },
            "class": "Object",
            "module": "js-ext",
            "submodule": "lib/object.js"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 1359,
            "description": "Returns a deep copy of the object.\nOnly handles members of primary types, Dates, Arrays and Objects.",
            "itemtype": "method",
            "name": "deepClone",
            "return": {
                "description": "deep-copy of the original",
                "type": "Object"
            },
            "class": "Object",
            "module": "js-ext",
            "submodule": "lib/object.js"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 1381,
            "description": "Transforms the object into an array with  'key/value' objects",
            "example": [
                "\n{country: 'USA', Continent: 'North America'} --> [{key: 'country', value: 'USA'}, {key: 'Continent', value: 'North America'}]"
            ],
            "itemtype": "method",
            "name": "toArray",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "key",
                            "description": "to overrule the default `key`-property-name",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "value",
                            "description": "to overrule the default `value`-property-name",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "the transformed Array-representation of the object",
                "type": "Array"
            },
            "class": "Object",
            "module": "js-ext",
            "submodule": "lib/object.js"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 1406,
            "description": "Merges into this object the properties of the given object.\nIf the second argument is true, the properties on the source object will be overwritten\nby those of the second object of the same name, otherwise, they are preserved.",
            "itemtype": "method",
            "name": "merge",
            "params": [
                {
                    "name": "obj",
                    "description": "Object with the properties to be added to the original object",
                    "type": "Object"
                },
                {
                    "name": "force",
                    "description": "If true, the properties in `obj` will override those of the same name\n       in the original object",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "Object",
            "module": "js-ext",
            "submodule": "lib/object.js"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 1429,
            "description": "Returns true if the item is an object, but no Array, Function, RegExp, Date or Error object",
            "itemtype": "method",
            "name": "isObject",
            "return": {
                "description": "true if the object is empty",
                "type": "Boolean"
            },
            "class": "Object",
            "module": "js-ext",
            "submodule": "lib/object.js"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 1439,
            "description": "Returns a new object resulting of merging the properties of the given objects.\nThe copying is shallow, complex properties will reference the very same object.\nProperties in later objects do **not overwrite** properties of the same name in earlier objects.\nIf any of the objects is missing, it will be skiped.",
            "example": [
                "\n\n var foo = function (config) {\n      config = Object.merge(config, defaultConfig);\n }"
            ],
            "itemtype": "method",
            "name": "merge",
            "static": 1,
            "params": [
                {
                    "name": "obj",
                    "description": "Objects whose properties are to be merged",
                    "type": "Object",
                    "multiple": true
                }
            ],
            "return": {
                "description": "new object with the properties merged in.",
                "type": "Object"
            },
            "class": "Object",
            "module": "js-ext",
            "submodule": "lib/object.js"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 1486,
            "description": "Promise which can be put at the very end of a chain, even after .catch().\nWill invoke the callback function regardless whether the chain resolves or rejects.\n\nThe argument of the callback will be either its fulfilled or rejected argument, but\nit is wisely not to handle it. The results should have been handled in an earlier step\nof the chain: .finally() basicly means you want to execute code after the chain, regardless\nwhether it's resolved or rejected.\n\n**Note:** .finally() <u>does not return a Promise</u>: it should be used as the very last step of a Promisechain.\nIf you need an intermediate method, you should take .thenFulfill().",
            "itemtype": "method",
            "name": "finally",
            "params": [
                {
                    "name": "finallyback",
                    "description": "the callbackfunctio to be invoked.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Promise",
            "module": "js-ext",
            "submodule": "lib/promise.s"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 1507,
            "description": "Will always return a fulfilled Promise.\n\nTypical usage will be by making it part of a Promisechain: it makes the chain go\ninto its fulfilled phase.",
            "example": [
                "\n\npromise1\n.then(promise2)\n.thenFulfill()\n.then(handleFulfilled, handleRejected) // handleFulfilled always gets invoked"
            ],
            "itemtype": "method",
            "name": "thenFulfill",
            "params": [
                {
                    "name": "response",
                    "description": "parameter to pass through which overrules the original Promise-response.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Resolved Promise. `response` will be passed trough as parameter when set.\n        When not set: in case the original Promise resolved, its parameter is passed through.\n        in case of a rejection, no parameter will be passed through.",
                "type": "Promise"
            },
            "class": "Promise",
            "module": "js-ext",
            "submodule": "lib/promise.s"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 1538,
            "description": "Returns a Promise that always fulfills. It is fulfilled when ALL items are resolved (either fulfilled\nor rejected). This is useful for waiting for the resolution of multiple\npromises, such as reading multiple files in Node.js or making multiple XHR\nrequests in the browser. Because -on the contrary of `Promise.all`- **finishAll** waits until\nall single Promises are resolved, you can handle all promises, even if some gets rejected.",
            "itemtype": "method",
            "name": "finishAll",
            "params": [
                {
                    "name": "items",
                    "description": "an array of any kind of items, promises or not. If a value is not a promise,\nits transformed into a resolved promise.",
                    "type": "Any[]"
                }
            ],
            "return": {
                "description": "A promise for an array of all the fulfillment items:\n<ul>\n    <li>Fulfilled: o {Object}\n        <ul>\n            <li>fulfilled {Array} all fulfilled responses, any item that was rejected will have a value of `undefined`</li>\n            <li>rejected {Array} all rejected responses, any item that was fulfilled will have a value of `undefined`</li>\n        </ul>\n    </li>\n    <li>Rejected: this promise **never** rejects</li>\n</ul>",
                "type": "Promise"
            },
            "static": 1,
            "class": "Promise",
            "module": "js-ext",
            "submodule": "lib/promise.s"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 1602,
            "description": "Returns a Promise which chains the function-calls. Like an automated Promise-chain.\nInvokes the functionreferences in a chain. You MUST supply function-references, it doesn't\nmatter wheter these functions return a Promise or not. Any returnvalues are passed through to\nthe next function.\n\n**Cautious:** you need to pass function-references, not invoke them!\nchainFns will invoke them when the time is ready. Regarding to this, there is a difference with\nusing Promise.all() where you should pass invoked Promises.\n\nIf one of the functions returns a Promise, the chain\nwill wait its execution for this function to be resolved.\n\nIf you need specific context or arguments: use Function.bind for these items.\nIf one of the items returns a rejected Promise, by default: the whole chain rejects\nand following functions in the chain will not be invoked. When `finishAll` is set `true`\nthe chain will always continue even with rejected Promises.\n\nReturning functionvalues are passed through the chain adding them as an extra argument\nto the next function in the chain (argument is added on the right)",
            "example": [
                "\n    var a = [], p1, p2, p3;\n    p1 = function(a) {\n        return new Promise(function(resolve, reject) {\n            I.later(function() {\n                console.log('resolving promise p1: '+a);\n                resolve(a);\n            }, 1000);\n        });\n    };\n    p2 = function(b, r) {\n        var value = b+r;\n        console.log('returning p2: '+value);\n        return value;\n    };\n    p3 = function(c, r) {\n        return new Promise(function(resolve, reject) {\n            I.later(function() {\n                var value = b+r;\n                console.log('resolving promise p3: '+value);\n                resolve(value);\n            }, 1000);\n        });\n    };\n    a.push(p1.bind(undefined, 100));\n    a.push(p2.bind(undefined, 200));\n    a.push(p3.bind(undefined, 300));\n    Promise.chainFns(a).then(\n        function(r) {\n            console.log('chain resolved with '+r);\n        },\n        function(err) {\n            console.log('chain-error '+err);\n        }\n    );"
            ],
            "itemtype": "method",
            "name": "chainFns",
            "params": [
                {
                    "name": "funcs",
                    "description": "an array of function-references",
                    "type": "Function[]"
                },
                {
                    "name": "finishAll",
                    "description": "to force the chain to continue, even if one of the functions\n       returns a rejected Promise",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "on success:\no {Object} returnvalue of the laste item in the Promisechain\non failure an Error object\nreason {Error}",
                "type": "Promise"
            },
            "static": 1,
            "class": "Promise",
            "module": "js-ext",
            "submodule": "lib/promise.s"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 1694,
            "description": "Returns a Promise with 4 additional methods:\n\npromise.fulfill\npromise.reject\npromise.callback\npromise.setCallback\n\nWith Promise.manage, you get a Promise which is managable from outside, not inside as Promise A+ work.\nYou can invoke promise.**callback**() which will invoke the original passed-in callbackFn - if any.\npromise.**fulfill**() and promise.**reject**() are meant to resolve the promise from outside, just like deferred can do.",
            "example": [
                "\n    var promise = Promise.manage(\n        function(msg) {\n            alert(msg);\n        }\n    );\n\n    promise.then(\n        function() {\n            // promise is fulfilled, no further actions can be taken\n        }\n    );\n\n    setTimeout(function() {\n        promise.callback('hey, I\\'m still busy');\n    }, 1000);\n\n    setTimeout(function() {\n        promise.fulfill();\n    }, 2000);"
            ],
            "itemtype": "method",
            "name": "manage",
            "params": [
                {
                    "name": "callbackFn",
                    "description": "invoked everytime promiseinstance.callback() is called.\n       You may as weel (re)set this method atny time lare by using promise.setCallback()",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "with three handles: fulfill, reject and callback.",
                "type": "Promise"
            },
            "static": 1,
            "class": "Promise",
            "module": "js-ext",
            "submodule": "lib/promise.s"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 1804,
            "description": "Checks whether the substring is part if this String.\nAlias for (String.indexOf(substring) > -1)",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "substring",
                    "description": "the substring to test for",
                    "type": "String"
                },
                {
                    "name": "caseInsensitive",
                    "description": "whether to ignore case-sensivity",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "whether the substring is found",
                "type": "Boolean"
            },
            "class": "String",
            "module": "js-ext",
            "submodule": "lib/string.js"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 1817,
            "description": "Checks if the string ends with the value specified by `test`",
            "itemtype": "method",
            "name": "endsWith",
            "params": [
                {
                    "name": "test",
                    "description": "the string to test for",
                    "type": "String"
                },
                {
                    "name": "caseInsensitive",
                    "description": "whether to ignore case-sensivity",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "whether the string ends with `test`",
                "type": "Boolean"
            },
            "class": "String",
            "module": "js-ext",
            "submodule": "lib/string.js"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 1829,
            "description": "Checks if the string can be parsed into a number when using `parseInt()`",
            "itemtype": "method",
            "name": "parsable",
            "return": {
                "description": "whether the string is parsable",
                "type": "Boolean"
            },
            "class": "String",
            "module": "js-ext",
            "submodule": "lib/string.js"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 1842,
            "description": "Checks if the string starts with the value specified by `test`",
            "itemtype": "method",
            "name": "startsWith",
            "params": [
                {
                    "name": "test",
                    "description": "the string to test for",
                    "type": "String"
                },
                {
                    "name": "caseInsensitive",
                    "description": "whether to ignore case-sensivity",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "whether the string starts with `test`",
                "type": "Boolean"
            },
            "class": "String",
            "module": "js-ext",
            "submodule": "lib/string.js"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 1854,
            "description": "Performs `{placeholder}` substitution on a string. The object passed\nprovides values to replace the `{placeholder}`s.\n`{placeholder}` token names must match property names of the object.\n\n`{placeholder}` tokens that are undefined on the object map will be removed.",
            "example": [
                "\nvar greeting = '{message} {who}!';\ngreeting.substitute({message: 'Hello'}); // results into 'Hello !'"
            ],
            "itemtype": "method",
            "name": "substitute",
            "params": [
                {
                    "name": "obj",
                    "description": "Object containing replacement values.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the substitute result.",
                "type": "String"
            },
            "class": "String",
            "module": "js-ext",
            "submodule": "lib/string.js"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 1875,
            "description": "Returns a ISO-8601 Date-object build by the String's value.\nIf the String-value doesn't match ISO-8601, `null` will be returned.\n\nISO-8601 Date's are generated by JSON.stringify(), so it's very handy to be able to reconvert them.",
            "example": [
                "\nvar birthday = '2010-02-10T14:45:30.000Z';\nbirthday.toDate(); // --> Wed Feb 10 2010 15:45:30 GMT+0100 (CET)"
            ],
            "itemtype": "method",
            "name": "toDate",
            "return": {
                "description": "the Date represented by the String's value or null when invalid",
                "type": "Date|null"
            },
            "class": "String",
            "module": "js-ext",
            "submodule": "lib/string.js"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 1892,
            "description": "Generated the string without any white-spaces at the start or end.",
            "itemtype": "method",
            "name": "trim",
            "return": {
                "description": "new String without leading and trailing white-spaces",
                "type": "String"
            },
            "class": "String",
            "module": "js-ext",
            "submodule": "lib/string.js"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 1902,
            "description": "Generated the string without any white-spaces at the beginning.",
            "itemtype": "method",
            "name": "trimLeft",
            "return": {
                "description": "new String without leading white-spaces",
                "type": "String"
            },
            "class": "String",
            "module": "js-ext",
            "submodule": "lib/string.js"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 1912,
            "description": "Generated the string without any white-spaces at the end.",
            "itemtype": "method",
            "name": "trimRight",
            "return": {
                "description": "new String without trailing white-spaces",
                "type": "String"
            },
            "class": "String",
            "module": "js-ext",
            "submodule": "lib/string.js"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 1922,
            "description": "Validates if the String's value represents a valid emailaddress.",
            "itemtype": "method",
            "name": "validateEmail",
            "return": {
                "description": "whether the String's value is a valid emailaddress.",
                "type": "Boolean"
            },
            "class": "String",
            "module": "js-ext",
            "submodule": "lib/string.js"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 1932,
            "description": "Validates if the String's value represents a valid floated number.",
            "itemtype": "method",
            "name": "validateFloat",
            "params": [
                {
                    "name": "comma",
                    "description": "whether to use a comma as decimal separator instead of a dot",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "whether the String's value is a valid floated number.",
                "type": "Boolean"
            },
            "class": "String",
            "module": "js-ext",
            "submodule": "lib/string.js"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 1943,
            "description": "Validates if the String's value represents a hexadecimal color.",
            "itemtype": "method",
            "name": "validateHexaColor",
            "params": [
                {
                    "name": "alpha",
                    "description": "whether to accept alpha transparancy",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "whether the String's value is a valid hexadecimal color.",
                "type": "Boolean"
            },
            "class": "String",
            "module": "js-ext",
            "submodule": "lib/string.js"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 1954,
            "description": "Validates if the String's value represents a valid integer number.",
            "itemtype": "method",
            "name": "validateNumber",
            "return": {
                "description": "whether the String's value is a valid integer number.",
                "type": "Boolean"
            },
            "class": "String",
            "module": "js-ext",
            "submodule": "lib/string.js"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 1964,
            "description": "Validates if the String's value represents a valid boolean.",
            "itemtype": "method",
            "name": "validateNumber",
            "return": {
                "description": "whether the String's value is a valid integer number.",
                "type": "Boolean"
            },
            "class": "String",
            "module": "js-ext",
            "submodule": "lib/string.js"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 1980,
            "description": "Validates if the String's value represents a valid URL.",
            "itemtype": "method",
            "name": "validateURL",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "http",
                            "description": "to force matching starting with `http://`",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "https",
                            "description": "to force matching starting with `https://`",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "whether the String's value is a valid URL.",
                "type": "Boolean"
            },
            "class": "String",
            "module": "js-ext",
            "submodule": "lib/string.js"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 2199,
            "description": "Generates an unique id with the signature: \"namespace-follownr\"",
            "example": [
                "\n\n    var generator = require('core-utils-idgenerator');\n\n    console.log(generator()); // --> 1\n    console.log(generator()); // --> 2\n    console.log(generator(1000)); // --> 1000\n    console.log(generator()); // --> 1001\n    console.log(generator('Parcel, 500')); // -->\"Parcel-500\"\n    console.log(generator('Parcel')); // -->\"Parcel-501\""
            ],
            "itemtype": "method",
            "name": "idGenerator",
            "params": [
                {
                    "name": "namespace",
                    "description": "namespace to prepend the generated id.\n       When ignored, the generator just returns a number.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "start",
                    "description": "startvalue for the next generated id. Any further generated id's will preceed this id.\n       If `start` is lower or equal than the last generated id, it will be ignored.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "an unique id. Either a number, or a String (digit prepended with \"namespace-\")",
                "type": "Number|String"
            },
            "class": "Utils",
            "module": "utils"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 2259,
            "description": "Forces a function to be run asynchronously, but as fast as possible. In Node.js\nthis is achieved using `setImmediate` or `process.nextTick`.",
            "itemtype": "method",
            "name": "_asynchronizer",
            "params": [
                {
                    "name": "callbackFn",
                    "description": "The function to call asynchronously",
                    "type": "Function"
                }
            ],
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "Utils",
            "module": "utils"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 2271,
            "description": "Invokes the callbackFn once in the next turn of the JavaScript event loop. If the function\nrequires a specific execution context or arguments, wrap it with Function.bind.\n\nI.async returns an object with a cancel method.  If the cancel method is\ncalled before the callback function, the callback function won't be called.",
            "itemtype": "method",
            "name": "async",
            "params": [
                {
                    "name": "callbackFn",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "invokeAfterFn",
                    "description": "set to false to prevent the _afterSyncFn to be invoked",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "An object with a cancel method.  If the cancel method is\ncalled before the callback function, the callback function won't be called.",
                "type": "Object"
            },
            "class": "Utils",
            "module": "utils"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 2306,
            "description": "Invokes the callbackFn once in the next turn of the JavaScript event loop. If the function\nrequires a specific execution context or arguments, wrap it with Function.bind.\n\nI.async returns an object with a cancel method.  If the cancel method is\ncalled before the callback function, the callback function won't be called.",
            "itemtype": "method",
            "name": "async",
            "params": [
                {
                    "name": "callbackFn",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "invokeAfterFn",
                    "description": "set to false to prevent the _afterSyncFn to be invoked",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "An object with a cancel method.  If the cancel method is\ncalled before the callback function, the callback function won't be called.",
                "type": "Object"
            },
            "class": "Utils",
            "module": "utils"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 2321,
            "description": "Invokes the callbackFn after a timeout (asynchronous). If the function\nrequires a specific execution context or arguments, wrap it with Function.bind.\n\nTo invoke the callback function periodic, set 'periodic' either 'true', or specify a second timeout.\nIf number, then periodic is considered 'true' but with a perdiod defined by 'periodic',\nwhich means: the first timer executes after 'timeout' and next timers after 'period'.\n\nI.later returns an object with a cancel method.  If the cancel() method is\ncalled before the callback function, the callback function won't be called.",
            "itemtype": "method",
            "name": "later",
            "params": [
                {
                    "name": "callbackFn",
                    "description": "the function to execute.",
                    "type": "Function"
                },
                {
                    "name": "timeout",
                    "description": "the number of milliseconds to wait until the callbackFn is executed.\nwhen not set, the callback function is invoked once in the next turn of the JavaScript event loop.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "periodic",
                    "description": "if true, executes continuously at supplied, if number, then periodic is considered 'true' but with a perdiod\ndefined by 'periodic', which means: the first timer executes after 'timeout' and next timers after 'period'.\nThe interval executes until canceled.",
                    "type": "Boolean|Number",
                    "optional": true
                },
                {
                    "name": "invokeAfterFn",
                    "description": "set to false to prevent the _afterSyncFn to be invoked",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "a timer object. Call the cancel() method on this object to stop the timer.",
                "type": "Object"
            },
            "class": "Utils",
            "module": "utils"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 2473,
            "description": "Gets the left-scroll offset of the window.",
            "itemtype": "method",
            "name": "getScrollLeft",
            "return": {
                "description": "left-offset in pixels",
                "type": "Number"
            },
            "since": "0.0.1",
            "class": "Utils",
            "module": "utils"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 2483,
            "description": "Gets the top-scroll offset of the window.",
            "itemtype": "method",
            "name": "getScrollTop",
            "return": {
                "description": "top-offset in pixels",
                "type": "Number"
            },
            "since": "0.0.1",
            "class": "Utils",
            "module": "utils"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 2493,
            "description": "Gets the width of the window.",
            "itemtype": "method",
            "name": "getWidth",
            "return": {
                "description": "width in pixels",
                "type": "Number"
            },
            "since": "0.0.1",
            "class": "Utils",
            "module": "utils"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 2503,
            "description": "Gets the height of the window.",
            "itemtype": "method",
            "name": "getHeight",
            "return": {
                "description": "width in pixels",
                "type": "Number"
            },
            "since": "0.0.1",
            "class": "Utils",
            "module": "utils"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 2867,
            "description": "For all vElements of the ElementArray:\nAppends a HtmlElement or text at the end of HtmlElement's innerHTML.",
            "itemtype": "method",
            "name": "append",
            "params": [
                {
                    "name": "content",
                    "description": "content to append",
                    "type": "HtmlElement|HtmlElementList|String"
                },
                {
                    "name": "escape",
                    "description": "whether to insert `escaped` content, leading it into only text inserted",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "ElementArray",
            "module": "vdom",
            "submodule": "element-array"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 2881,
            "description": "For all vElements of the ElementArray:\nSets the inline-style of the HtmlElement exactly to the specified `value`, overruling previous values.\nMaking the HtmlElement's inline-style look like: style=\"value\".\n\nThis is meant for a quick one-time setup. For individually inline style-properties to be set, you can use `setInlineStyle()`.",
            "itemtype": "method",
            "name": "defineInlineStyle",
            "params": [
                {
                    "name": "value",
                    "description": "the style string to be set",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "ElementArray",
            "module": "vdom",
            "submodule": "element-array"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 2897,
            "description": "For all vElements of the ElementArray:\nChecks whether the plugin is plugged in at ALL the HtmlElements of the NodeList/HTMLCollection.\nChecks whether all its attributes are set.",
            "itemtype": "method",
            "name": "isPlugged",
            "params": [
                {
                    "name": "pluginClass",
                    "description": "The plugin that should be plugged. Needs to be the Class, not an instance!",
                    "type": "NodePlugin"
                }
            ],
            "return": {
                "description": "whether the plugin is plugged in",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "ElementArray",
            "module": "vdom",
            "submodule": "element-array"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 2913,
            "description": "For all vElements of the ElementArray:\nPlugs in the plugin on the HtmlElement, and gives is special behaviour by setting the appropriate attributes.",
            "itemtype": "method",
            "name": "plug",
            "params": [
                {
                    "name": "pluginClass",
                    "description": "The plugin that should be plugged. Needs to be the Class, not an instance!",
                    "type": "NodePlugin"
                },
                {
                    "name": "options",
                    "description": "any options that should be passed through when the class is instantiated.",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "ElementArray",
            "module": "vdom",
            "submodule": "element-array"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 2927,
            "description": "For all vElements of the ElementArray:\nPrepends a HtmlElement or text at the start of HtmlElement's innerHTML.",
            "itemtype": "method",
            "name": "prepend",
            "params": [
                {
                    "name": "content",
                    "description": "content to prepend",
                    "type": "HtmlElement|HtmlElementList|String"
                },
                {
                    "name": "escape",
                    "description": "whether to insert `escaped` content, leading it into only text inserted",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "ElementArray",
            "module": "vdom",
            "submodule": "element-array"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 2941,
            "description": "For all vElements of the ElementArray:\nRemoves the attribute from the HtmlElement.\n\nAlias for removeAttribute().",
            "itemtype": "method",
            "name": "removeAttr",
            "params": [
                {
                    "name": "attributeName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Whether the HtmlElement has the attribute set.",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "ElementArray",
            "module": "vdom",
            "submodule": "element-array"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 2956,
            "description": "For all vElements of the ElementArray:\nRemoves a className from the HtmlElement.",
            "itemtype": "method",
            "name": "removeClass",
            "params": [
                {
                    "name": "className",
                    "description": "the className that should be removed.",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "ElementArray",
            "module": "vdom",
            "submodule": "element-array"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 2969,
            "description": "For all vElements of the ElementArray:\nRemoves data specified by `key`. When no arguments are passed, all node-data (key-value pairs) will be removed.",
            "itemtype": "method",
            "name": "removeData",
            "params": [
                {
                    "name": "key",
                    "description": "name of the key",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "ElementArray",
            "module": "vdom",
            "submodule": "element-array"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 2982,
            "description": "For all vElements of the ElementArray:\nRemoves a css-property (inline) out of the HtmlElement. Use camelCase.",
            "itemtype": "method",
            "name": "removeInlineStyle",
            "params": [
                {
                    "name": "cssAttribute",
                    "description": "the css-property to be removed",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "ElementArray",
            "module": "vdom",
            "submodule": "element-array"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 2995,
            "description": "For all vElements of the ElementArray:\nRemoves the HtmlElement from the DOM.",
            "itemtype": "method",
            "name": "removeNode",
            "since": "0.0.1",
            "class": "ElementArray",
            "module": "vdom",
            "submodule": "element-array"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3009,
            "description": "For all vElements of the ElementArray:\nReplaces the className of the HtmlElement with a new className.\nIf the previous className is not available, the new className is set nevertheless.",
            "itemtype": "method",
            "name": "replaceClass",
            "params": [
                {
                    "name": "prevClassName",
                    "description": "the className to be replaced",
                    "type": "String"
                },
                {
                    "name": "newClassName",
                    "description": "the className to be set",
                    "type": "String"
                },
                {
                    "name": "[force",
                    "description": "]  whether the new className should be set, even is the previous className isn't there",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "ElementArray",
            "module": "vdom",
            "submodule": "element-array"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3025,
            "description": "For all vElements of the ElementArray:\nReplaces the HtmlElement with a new HtmlElement.",
            "itemtype": "method",
            "name": "replaceNode",
            "params": [
                {
                    "name": "newHtmlElement",
                    "description": "the new HtmlElement",
                    "type": "HtmlElement|String"
                },
                {
                    "name": "escape",
                    "description": "whether to insert `escaped` content, leading it into only text inserted",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "since": "0.0.1",
            "class": "ElementArray",
            "module": "vdom",
            "submodule": "element-array"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3045,
            "description": "For all vElements of the ElementArray:\nSets the attribute on the HtmlElement with the specified value.\n\nAlias for setAttribute().",
            "itemtype": "method",
            "name": "setAttr",
            "params": [
                {
                    "name": "attributeName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "the value that belongs to `key`",
                    "type": "Any"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "ElementArray",
            "module": "vdom",
            "submodule": "element-array"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3061,
            "description": "For all vElements of the ElementArray:\nAdds a class to the HtmlElement. If the class already exists it won't be duplicated.",
            "itemtype": "method",
            "name": "setClass",
            "params": [
                {
                    "name": "className",
                    "description": "className to be added",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "ElementArray",
            "module": "vdom",
            "submodule": "element-array"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3074,
            "description": "For all vElements of the ElementArray:\nStores arbitary `data` at the HtmlElement. This has nothing to do with node-attributes whatsoever,\nit is just a way to bind any data to the specific Element so it can be retrieved later on with `getData()`.",
            "itemtype": "method",
            "name": "setData",
            "params": [
                {
                    "name": "key",
                    "description": "name of the key",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "the value that belongs to `key`",
                    "type": "Any"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "ElementArray",
            "module": "vdom",
            "submodule": "element-array"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3089,
            "description": "For all vElements of the ElementArray:\nSets the content of the HtmlElement (innerHTML). Careful: only set content like this if you controll the data and\nare sure what is going inside. Otherwise XSS might occur. If you let the user insert, or insert right from a db,\nyou might be better of using setContent().",
            "itemtype": "method",
            "name": "setHTML",
            "params": [
                {
                    "name": "content",
                    "description": "content to append",
                    "type": "HtmlElement|HtmlElementList|String"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "ElementArray",
            "module": "vdom",
            "submodule": "element-array"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3104,
            "description": "For all vElements of the ElementArray:\nSets a css-property (inline) out of the HtmlElement. Use camelCase.\n\nNote: no need to camelCase cssProperty: both `margin-left` as well as `marginLeft` are fine",
            "itemtype": "method",
            "name": "setStyle",
            "params": [
                {
                    "name": "cssAttribute",
                    "description": "the css-property to be set",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "the css-value",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "ElementArray",
            "module": "vdom",
            "submodule": "element-array"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3120,
            "description": "For all vElements of the ElementArray:\nGets or sets the outerHTML of both the Element as well as the representing dom-node.\nGoes through the vdom, so it's superfast.\n\nUse this property instead of `outerHTML`\n\nSyncs with the DOM.",
            "itemtype": "method",
            "name": "setOuterHTML",
            "params": [
                {
                    "name": "val",
                    "description": "the new value to be set",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "ElementArray",
            "module": "vdom",
            "submodule": "element-array"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3138,
            "description": "For all vElements of the ElementArray:\nSets the content of the HtmlElement. This is a safe way to set the content, because HTML is not parsed.\nIf you do need to set HTML inside the node, use setHTML().",
            "itemtype": "method",
            "name": "setText",
            "params": [
                {
                    "name": "content",
                    "description": "content to append. In case of HTML, it will be escaped.",
                    "type": "HtmlElement|HtmlElementList|String"
                },
                {
                    "name": "escape",
                    "description": "whether to insert `escaped` content, leading it into only text inserted",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "ElementArray",
            "module": "vdom",
            "submodule": "element-array"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3153,
            "description": "For all vElements of the ElementArray:\nToggles the className of the Element.",
            "itemtype": "method",
            "name": "toggleClass",
            "params": [
                {
                    "name": "className",
                    "description": "the className that should be toggled",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "ElementArray",
            "module": "vdom",
            "submodule": "element-array"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3166,
            "description": "For all vElements of the ElementArray:\nUnplugs a NodePlugin from the HtmlElement.",
            "itemtype": "method",
            "name": "unplug",
            "params": [
                {
                    "name": "pluginClass",
                    "description": "The plugin that should be unplugged. Needs to be the Class, not an instance!",
                    "type": "NodePlugin"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "ElementArray",
            "module": "vdom",
            "submodule": "element-array"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3248,
            "description": "Checks whether the plugin is plugged in at the HtmlElement. Checks whether all its attributes are set.",
            "itemtype": "method",
            "name": "isPlugged",
            "params": [
                {
                    "name": "pluginClass",
                    "description": "The plugin that should be plugged. Needs to be the Class, not an instance!",
                    "type": "NodePlugin"
                }
            ],
            "return": {
                "description": "whether the plugin is plugged in",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "Plugins",
            "module": "vdom",
            "submodule": "element-plugin"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3260,
            "description": "Plugs in the plugin on the HtmlElement, and gives is special behaviour by setting the appropriate attributes.",
            "itemtype": "method",
            "name": "plug",
            "params": [
                {
                    "name": "pluginClass",
                    "description": "The plugin that should be plugged. Needs to be the Class, not an instance!",
                    "type": "NodePlugin"
                },
                {
                    "name": "config",
                    "description": "any config that should be passed through when the class is instantiated.",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "Plugins",
            "module": "vdom",
            "submodule": "element-plugin"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3274,
            "description": "Unplugs a NodePlugin from the HtmlElement.",
            "itemtype": "method",
            "name": "unplug",
            "params": [
                {
                    "name": "pluginClass",
                    "description": "The plugin that should be unplugged. Needs to be the Class, not an instance!",
                    "type": "NodePlugin"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "Plugins",
            "module": "vdom",
            "submodule": "element-plugin"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3381,
            "description": "Returns a newly created TreeWalker object.\n\nThe TreeWalker is life presentation of the dom. It gets updated when the dom changes.",
            "itemtype": "method",
            "name": "createTreeWalker",
            "params": [
                {
                    "name": "root",
                    "description": "The root node at which to begin the NodeIterator's traversal.",
                    "type": "Element"
                },
                {
                    "name": "whatToShow",
                    "description": "Filter specification constants from the NodeFilter DOM interface, indicating which nodes to iterate over.\nYou can use or sum one of the next properties:\n<ul>\n  <li>window.NodeFilter.SHOW_ELEMENT</li>\n  <li>window.NodeFilter.SHOW_COMMENT</li>\n  <li>window.NodeFilter.SHOW_TEXT</li>\n</ul>",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "filter",
                    "description": "An object implementing the NodeFilter interface or a function. See https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter",
                    "type": "NodeFilter|function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "TreeWalker"
            },
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3402,
            "description": "Indicating whether an Element is inside the DOM.",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "otherElement",
                    "description": "",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "whether the Element is inside the dom.",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3414,
            "description": "Gets an ElementArray of Elements, specified by the css-selector.",
            "itemtype": "method",
            "name": "getAll",
            "params": [
                {
                    "name": "cssSelector",
                    "description": "css-selector to match",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ElementArray of Elements that match the css-selector",
                "type": "ElementArray"
            },
            "since": "0.0.1",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3426,
            "description": "Gets one Element, specified by the css-selector. To retrieve a single element by id,\nyou need to prepend the id-name with a `#`. When multiple Element's match, the first is returned.",
            "itemtype": "method",
            "name": "getElement",
            "params": [
                {
                    "name": "cssSelector",
                    "description": "css-selector to match",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the Element that was search for",
                "type": "Element|null"
            },
            "since": "0.0.1",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3439,
            "description": "Returns the Element matching the specified id.",
            "itemtype": "method",
            "name": "getElementById",
            "params": [
                {
                    "name": "id",
                    "description": "id of the Element",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Element|null"
            },
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3451,
            "description": "Returns the first Element that matches the CSS-selectors. You can pass one, or multiple CSS-selectors. When passed multiple,\nthey need to be separated by a `comma`.",
            "itemtype": "method",
            "name": "querySelector",
            "params": [
                {
                    "name": "selectors",
                    "description": "CSS-selector(s) that should match",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Element"
            },
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3467,
            "description": "Returns an ElementArray of all Elements that match the CSS-selectors. You can pass one, or multiple CSS-selectors. When passed multiple,\nthey need to be separated by a `comma`.\n\nquerySelectorAll is a snapshot of the dom at the time this method was called. It is not updated when changes of the dom are made afterwards.",
            "itemtype": "method",
            "name": "querySelectorAll",
            "params": [
                {
                    "name": "selectors",
                    "description": "CSS-selector(s) that should match",
                    "type": "String"
                }
            ],
            "return": {
                "description": "non-life Array (snapshot) with Elements",
                "type": "ElementArray"
            },
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3484,
            "description": "Replaces the Element with a new Element.",
            "itemtype": "method",
            "name": "replace",
            "params": [
                {
                    "name": "newHtmlElement",
                    "description": "the new element",
                    "type": "Element|String"
                },
                {
                    "name": "escape",
                    "description": "whether to insert `escaped` content, leading it into only the element having a TextNode as a child.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3497,
            "description": "Tests if an Element would be selected by the specified cssSelector.\nAlias for `matchesSelector()`",
            "itemtype": "method",
            "name": "test",
            "params": [
                {
                    "name": "element",
                    "description": "The Element to test",
                    "type": "Element"
                },
                {
                    "name": "cssSelector",
                    "description": "the css-selector to test against",
                    "type": "String"
                }
            ],
            "return": {
                "description": "whether or not the node matches the selector",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3515,
            "description": "Returns the currently focused element, that is, the element that will get keystroke events if the user types any.",
            "itemtype": "property",
            "name": "activeElement",
            "type": "Element",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3523,
            "description": "Returns an HTMLCollection with Elements of all of the `anchors` in the document that have a `name` specified (a[name]).\nFor reasons of backwards compatibility, the returned set of anchors only contains those anchors created with the `name` attribute.\n\n`anchors` is a life presentation of the dom. The returned HTMLCollection gets updated when the dom changes.",
            "itemtype": "property",
            "name": "anchors",
            "type": "HTMLCollection",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3534,
            "description": "Returns an HTMLCollection with Elements of all of the `applets` in the document.\n\n`applets` is a life presentation of the dom. The returned HTMLCollection gets updated when the dom changes.",
            "itemtype": "property",
            "name": "applets",
            "type": "HTMLCollection",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3544,
            "description": "Returns the `body` or `frameset` Element of the current document, or null if no such element exists.",
            "itemtype": "property",
            "name": "body",
            "type": "Element",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3552,
            "description": "Returns the `script`-Element whose script is currently being processed.",
            "itemtype": "property",
            "name": "currentScript",
            "type": "Element",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3561,
            "description": "Returns the root-element (===`html`-Element) of the current document",
            "itemtype": "property",
            "name": "documentElement",
            "type": "Element",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3569,
            "description": "Returns an HTMLCollection with Elements of all of the `embed`-elements in the document.\n\n`embeds` is a life presentation of the dom. The returned HTMLCollection gets updated when the dom changes.",
            "itemtype": "property",
            "name": "embeds",
            "type": "HTMLCollection",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3579,
            "description": "Returns the firstChild element (===`html`-Element) of the current document",
            "itemtype": "property",
            "name": "firstChild",
            "type": "Element",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3587,
            "description": "Returns an HTMLCollection with Elements of all of the `form`-elements in the document.\n\n`forms` is a life presentation of the dom. The returned HTMLCollection gets updated when the dom changes.",
            "itemtype": "property",
            "name": "forms",
            "type": "HTMLCollection",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3597,
            "description": "Returns an HTMLCollection with Elements of all of the images in the document.\n\n`images` is a life presentation of the dom. The returned HTMLCollection gets updated when the dom changes.",
            "itemtype": "property",
            "name": "images",
            "type": "HTMLCollection",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3607,
            "description": "Returns the lastChild element (===`html`-Element) of the current document",
            "itemtype": "property",
            "name": "lastChild",
            "type": "Element",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3615,
            "description": "Returns an HTMLCollection with Elements of all of the  of all `area`-Elements and `a`-Elements in a document with a value for the href attribute.\n\n`links` is a life presentation of the dom. The returned HTMLCollection gets updated when the dom changes.",
            "itemtype": "property",
            "name": "links",
            "type": "HTMLCollection",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3625,
            "description": "Returns an HTMLCollection with Elements of all of the plugins (`object`- or `embed`-elements) in the document.\n\n`plugins` is a life presentation of the dom. The returned HTMLCollection gets updated when the dom changes.",
            "itemtype": "property",
            "name": "plugins",
            "type": "HTMLCollection",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3635,
            "description": "Returns an HTMLCollection with Elements of all of the script-elements in the document.\n\n`scripts` is a life presentation of the dom. The returned HTMLCollection gets updated when the dom changes.",
            "itemtype": "property",
            "name": "scripts",
            "type": "HTMLCollection",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3645,
            "description": "Returns an HTMLCollection with Elements of all of the style-elements in the document.\n\n`styleSheets` is a life presentation of the dom. The returned HTMLCollection gets updated when the dom changes.",
            "itemtype": "property",
            "name": "styleSheets",
            "type": "HTMLCollection",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3655,
            "description": "Gets or sets the `title` of the document. That is, the `title`-Element within the `head`-Element",
            "itemtype": "property",
            "name": "title",
            "type": "String",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3665,
            "description": "\"online\" event is fired on the <body> of each page when the browser switches between online and offline mode.\nThe event is non-cancellable (you can't prevent the user from coming online, or going offline).",
            "itemtype": "event",
            "name": "online",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3672,
            "description": "\"offline\" event is fired on the <body> of each page when the browser switches between online and offline mode.\nThe event is non-cancellable (you can't prevent the user from coming online, or going offline).",
            "itemtype": "event",
            "name": "offline",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3681,
            "description": "Adopts a node from an external document. The node and its subtree is removed from the document it's in (if any),\nand its ownerDocument is changed to the current document. The node can then be inserted into the current document.",
            "itemtype": "method",
            "name": "adoptNode",
            "params": [
                {
                    "name": "externalNode",
                    "description": "The node from another document to be adopted.",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "is the adopted node that can be used in the current document.\nThe new node's parentNode is null, since it has not yet been inserted into the document tree.",
                "type": "Node"
            },
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3691,
            "description": "Adds a HtmlElement or DocumentFragment to the end of the `html`-element",
            "itemtype": "method",
            "name": "appendChild",
            "params": [
                {
                    "name": "element",
                    "description": "the item to be appended",
                    "type": "Element|DocumentFragment"
                }
            ],
            "return": {
                "description": "the appended child.",
                "type": "Element"
            },
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3699,
            "description": "Creates a new attribute-node, and returns it.",
            "itemtype": "method",
            "name": "createAttribute",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the attribute",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "AttributeNode"
            },
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3707,
            "description": "Creates a new Comment-node, and returns it.",
            "itemtype": "method",
            "name": "createComment",
            "params": [
                {
                    "name": "data",
                    "description": "The data to be added to the Comment.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "CommentNode"
            },
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3715,
            "description": "Creates a new HtmlElement, and returns it.\n\nDon't use qualified names (like \"html:a\") with this method.",
            "itemtype": "method",
            "name": "createElement",
            "params": [
                {
                    "name": "tagName",
                    "description": "is a string that specifies the type of element to be created.\n       The nodeName of the created element is initialized with the value of tagName.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "HtmlElement"
            },
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3726,
            "description": "Returns a new NodeIterator object.\n\nThe NodeIterator is a snapshot of the dom at the time this method was called. It is not updated when changes of the dom are made afterwards.",
            "itemtype": "method",
            "name": "createNodeIterator",
            "params": [
                {
                    "name": "root",
                    "description": "The root node at which to begin the NodeIterator's traversal.",
                    "type": "Element"
                },
                {
                    "name": "whatToShow",
                    "description": "Filter specification constants from the NodeFilter DOM interface, indicating which nodes to iterate over.\nYou can use or sum one of the next properties:\n<ul>\n  <li>window.NodeFilter.SHOW_ELEMENT</li>\n  <li>window.NodeFilter.SHOW_COMMENT</li>\n  <li>window.NodeFilter.SHOW_TEXT</li>\n</ul>",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "filter",
                    "description": "An object implementing the NodeFilter interface or a function. See https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter",
                    "type": "NodeFilter|function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "NodeIterator"
            },
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3744,
            "description": "Returns a new Range object. See https://developer.mozilla.org/en-US/docs/Web/API/Range",
            "itemtype": "method",
            "name": "createRange",
            "return": {
                "description": "",
                "type": "Range"
            },
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3751,
            "description": "Creates a new Text-node, and returns it.",
            "itemtype": "method",
            "name": "createTextNode",
            "params": [
                {
                    "name": "data",
                    "description": "The data to be added to the Text-node.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "TextNode"
            },
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3759,
            "description": "Returns the Element from the document whose `elementFromPoint`-method is being called which is the topmost\ndom-Element which lies under the given point. To get a Element, specify the point via coordinates, in CSS pixels,\nrelative to the upper-left-most point in the window or frame containing the document.",
            "itemtype": "method",
            "name": "elementFromPoint",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate to check, in CSS pixels relative to the upper-left corner of the document",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate to check, in CSS pixels relative to the upper-left corner of the document",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the matching Element",
                "type": "Element"
            },
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3770,
            "description": "Enables the style sheets matching the specified name in the current style sheet set,\nand disables all other style sheets (except those without a title, which are always enabled).",
            "itemtype": "method",
            "name": "enableStyleSheetsForSet",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the style sheets to enable. All style sheets with a title that match this name will be enabled,\n       while all others that have a title will be disabled. Specify an empty string for the name parameter\n       to disable all alternate and preferred style sheets (but not the persistent style sheets; that is, those with no title attribute).",
                    "type": "String"
                }
            ],
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3780,
            "description": "Returns an ElementArray of all Elements that match their classes with the supplied `classNames` argument.\nTo match multiple different classes, separate them with a `comma`.\n\ngetElementsByClassName is life presentation of the dom. The returned ElementArray gets updated when the dom changes.\n\nNOTE: it is highly recomended to use `document.getAll` because that method takes advantage of the vdom.",
            "itemtype": "method",
            "name": "getElementsByClassName",
            "params": [
                {
                    "name": "classNames",
                    "description": "the classes to search for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "life Array with Elements",
                "type": "ElementArray"
            },
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3794,
            "description": "Returns an ElementArray of all Elements that match their `name`-attribute with the supplied `name` argument.\n\ngetElementsByName is life presentation of the dom. The returned ElementArray gets updated when the dom changes.\n\nNOTE: it is highly recomended to use `document.getAll` because that method takes advantage of the vdom.",
            "itemtype": "method",
            "name": "getElementsByName",
            "params": [
                {
                    "name": "name",
                    "description": "the property of name-attribute to search for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "life Array with Elements",
                "type": "ElementArray"
            },
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3806,
            "description": "Returns an ElementArray of all Elements that match their `name`-attribute with the supplied `name` argument.\n\ngetElementsByTagName is life presentation of the dom. The returned ElementArray gets updated when the dom changes.\n\nNOTE: it is highly recomended to use `document.getAll` because that method takes advantage of the vdom.",
            "itemtype": "method",
            "name": "getElementsByTagName",
            "params": [
                {
                    "name": "tagNames",
                    "description": "the tags to search for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "life Array with Elements",
                "type": "ElementArray"
            },
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3818,
            "description": "Returns a selection object representing the range of text selected by the user.\n\nIs also available on the `window`-object.",
            "itemtype": "method",
            "name": "getSelection",
            "return": {
                "description": "A Selection object. When cast to string, either by adding empty quotes \"\" or using .toString, this object is the text selected.",
                "type": "Selection"
            },
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3827,
            "description": "Returns a Boolean value indicating whether the document or any element inside the document has focus.",
            "itemtype": "method",
            "name": "hasFocus",
            "return": {
                "description": "whether the document or any element inside the document has focus.",
                "type": "Boolean"
            },
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3834,
            "description": "Creates a copy of a node from an external document that can be inserted into the current document.",
            "itemtype": "method",
            "name": "importNode",
            "params": [
                {
                    "name": "externalNode",
                    "description": "The node from another document to be adopted.",
                    "type": "Node"
                },
                {
                    "name": "deep",
                    "description": "Whether the descendants of the imported node need to be imported.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The new node that is imported into the document.\nThe new node's parentNode is null, since it has not yet been inserted into the document tree.",
                "type": "Node"
            },
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3844,
            "description": "Inserts `newElement` before `referenceElement`.",
            "itemtype": "method",
            "name": "insertBefore",
            "params": [
                {
                    "name": "newElement",
                    "description": "The newElement to insert",
                    "type": "Element"
                },
                {
                    "name": "referenceElement",
                    "description": "The Element before which newElement is inserted.",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "the Element being inserted (equals newElement)",
                "type": "Element"
            },
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3853,
            "description": "Removes a child node from the DOM.",
            "itemtype": "method",
            "name": "removeChild",
            "params": [
                {
                    "name": "child",
                    "description": "the Element to be removed from the DOM",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "a reference to the removed child node",
                "type": "Element"
            },
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3861,
            "description": "Replaces one child-element of its parent element with a new child-element.",
            "itemtype": "method",
            "name": "replaceChild",
            "params": [
                {
                    "name": "newChild",
                    "description": "the new element to replace oldChild. If it already exists in the DOM, it is first removed.",
                    "type": "Element"
                },
                {
                    "name": "oldChild",
                    "description": "The existing child to be replaced.",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "is the replaced node. This is the same Element as oldChild.",
                "type": "Element"
            },
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3872,
            "description": "Returns the character encoding of the current document.",
            "itemtype": "property",
            "name": "characterSet",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3879,
            "description": "Indicates whether the document is rendered in Quirks mode or Standards mode. Its value is either:\n<ul>\n    <li>`BackCompat` if the document is in quirks mode</li>\n    <li>`CSS1Compat` if the document is in no-quirks (also known as `standards`) mode or limited-quirks (also known as `almost standards`) mode.</li>\n</ul>",
            "itemtype": "property",
            "name": "compatMode",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3890,
            "description": "Returns the MIME type that the document is being rendered as.  This may come from HTTP headers or other sources of MIME information,\nand might be affected by automatic type conversions performed by either the browser or extensions.",
            "itemtype": "property",
            "name": "contentType",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3898,
            "description": "Returns the Document Type Declaration (DTD) associated with current document. The returned object implements the DocumentType interface.\nUse DOMImplementation.createDocumentType() to create a DocumentType.",
            "itemtype": "property",
            "name": "doctype",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3906,
            "description": "Returns string URI of the HTML document. Same as `document.URL`.\n\nNote: HTML documents have a document.URL property which returns the same value. Unlike URL, documentURI is available on all types of documents.",
            "itemtype": "property",
            "name": "documentURI",
            "type": "String",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3916,
            "description": "Controls whether the entire document is editable. Its value should be either \"off\" or \"on\".",
            "itemtype": "property",
            "name": "designMode",
            "type": "String",
            "default": "\"off\"",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3924,
            "description": "Gets the domain portion of the origin of the current document.\n\nSetter will fail, because the same origin policy needs to persist.",
            "itemtype": "property",
            "name": "domain",
            "type": "String",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3934,
            "description": "Returns a DOMImplementation object associated with the current document.",
            "itemtype": "property",
            "name": "implementation",
            "type": "DOMImplementation",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3942,
            "description": "Returns a string containing the date and time on which the current document was last modified.\nIf you want a Date-object, you need to transform lastModified into a Date object: `modifyDate = new Date(document.lastModified);`",
            "itemtype": "property",
            "name": "lastModified",
            "type": "String",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3951,
            "description": "Returns the last enabled style sheet set; this property's value changes whenever the document.selectedStyleSheetSet property is changed.",
            "itemtype": "property",
            "name": "lastStyleSheetSet",
            "type": "String",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3959,
            "description": "returns a Location object, which contains information about the URL of the document and provides methods for changing that URL and loading another URL.\n\nThough Document.location is a read-only Location object, you can also assign a DOMString to it. This means that you can work with document.location\nas if it were a string in most cases: document.location = 'http://www.example.com' is a synonym of document.location.href = 'http://www.example.com'.\n\nTo retrieve just the URL as a string, the read-only document.URL property can also be used.\n\nSee more about the `Location` object: https://developer.mozilla.org/en-US/docs/Web/API/Location",
            "itemtype": "property",
            "name": "location",
            "type": "Location",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3974,
            "description": "Returns the preferred style sheet set as set by the page author. This is determined from the order of style sheet declarations and the Default-Style HTTP header.",
            "itemtype": "property",
            "name": "preferredStyleSheetSet",
            "type": "String",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3981,
            "description": "Returns \"loading\" while the document is loading, \"interactive\" once it is finished parsing but still loading sub-resources,\nand \"complete\" once it has loaded.",
            "itemtype": "property",
            "name": "readyState",
            "type": "String",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3990,
            "description": "Returns the URI of the page that linked to this page.",
            "itemtype": "property",
            "name": "referrer",
            "type": "String",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 3998,
            "description": "Indicates the name of the style sheet set that's currently in use. See more about Stylesheets: https://developer.mozilla.org/en-US/docs/Web/API/Stylesheet\nSetting the value of this property is equivalent to calling document.enableStyleSheetsForSet() with the value of currentStyleSheetSet,\nthen setting the value of lastStyleSheetSet to that value as well.",
            "itemtype": "property",
            "name": "selectedStyleSheetSet",
            "type": "String",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 4007,
            "description": "Returns string URL of the HTML document. Same as `document.documentURI`\n\nNote: HTML documents have a document.URL property which returns the same value. Unlike URL, documentURI is available on all types of documents.",
            "itemtype": "property",
            "name": "URL",
            "type": "String",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 4823,
            "description": "Reference to the vnode-object that represents the Node\n\n(will autogenerate a vnode, should it not exists)",
            "itemtype": "property",
            "name": "vnode",
            "type": "vnode",
            "since": "0.0.1",
            "class": "Node",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 4861,
            "description": "Determines the number of transitionend-events there will occur",
            "itemtype": "method",
            "name": "_getEvtTransEndCount",
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "Node",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 4882,
            "description": "Returns cascaded \"transition\" style of all transition-properties. `Cascaded` means: the actual present style,\nthe way it is visible (calculated through the DOM-tree).\n\nNote1: When \"transition\" is set inline, ONLY inline transtition is active!\nThus, if parentNode has \"transition: width 2s\" and inline has \"transition: height 3s\", then the transition\nwill be \"transition: height 3s\" --> returning \"undefined\" for transitionProperty=width.\nNote2: in case of \"transition: all\" --> these values will be returned for every \"transitionProperty\" (even when querying \"width\")",
            "itemtype": "method",
            "name": "_getTransitionAll",
            "params": [
                {
                    "name": "transitionProperty",
                    "description": "transform property that is queried, f.e. \"width\", or \"all\"",
                    "type": "String"
                },
                {
                    "name": "pseudo",
                    "description": "to query pseudo-element, fe: `:before` or `:first-line`",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "the transition-object, with the properties:\n<ul>\n    <li>duration {Number}</li>\n    <li>timingFunction {String}</li>\n    <li>delay {Number}</li>\n</ul>",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "Node",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 4942,
            "description": "Appends an Element or an Element's string-representation at the end of Element's innerHTML, or before the `refElement`.",
            "itemtype": "method",
            "name": "append",
            "params": [
                {
                    "name": "content",
                    "description": "content to append",
                    "type": "Element|ElementArray|String"
                },
                {
                    "name": "escape",
                    "description": "whether to insert `escaped` content, leading it into only text inserted",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "refElement",
                    "description": "reference Element where the content should be appended",
                    "type": "Element",
                    "optional": true
                }
            ],
            "return": {
                "description": "the created Element (or the last when multiple)",
                "type": "Element"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 4988,
            "description": "Adds a node to the end of the list of childNodes of a specified parent node.",
            "itemtype": "method",
            "name": "appendChild",
            "params": [
                {
                    "name": "content",
                    "description": "content to append",
                    "type": "Element|ElementArray|String"
                },
                {
                    "name": "escape",
                    "description": "whether to insert `escaped` content, leading it into only text inserted",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "the Element that was appended",
                "type": "Element"
            },
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5001,
            "description": "Returns a duplicate of the node. Use cloneNode(true) for a `deep` clone.",
            "itemtype": "method",
            "name": "cloneNode",
            "params": [
                {
                    "name": "deep",
                    "description": "whether to perform a `deep` clone: with all descendants",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "a clone of this Element",
                "type": "Element"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5044,
            "description": "Compares the position of the current node against another node in any other document.\n\nReturnvalues are a composition of the following bitwise values:\n<ul>\n    <li>Node.DOCUMENT_POSITION_DISCONNECTED === 1 (one of the Elements is not part of the dom)</li>\n    <li>Node.DOCUMENT_POSITION_PRECEDING === 2 (this Element comes before otherElement)</li>\n    <li>Node.DOCUMENT_POSITION_FOLLOWING === 4 (this Element comes after otherElement)</li>\n    <li>Node.DOCUMENT_POSITION_CONTAINS === 8 (otherElement trully contains -not equals- this Element)</li>\n    <li>Node.DOCUMENT_POSITION_CONTAINED_BY === 16 (Element trully contains -not equals- otherElement)</li>\n</ul>",
            "itemtype": "method",
            "name": "compareDocumentPosition",
            "params": [
                {
                    "name": "otherElement",
                    "description": "",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "A bitmask, use it this way: if (thisNode.compareDocumentPosition(otherNode) & Node.DOCUMENT_POSITION_FOLLOWING) {// otherNode is following thisNode}",
                "type": "Number"
            },
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5088,
            "description": "Indicating whether this Element contains OR equals otherElement.",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "otherElement",
                    "description": "",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "whether this Element contains OR equals otherElement.",
                "type": "Boolean"
            },
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5102,
            "description": "Returns a newly created TreeWalker object with this Element as root.\n\nThe TreeWalker is life presentation of the dom. It gets updated when the dom changes.",
            "itemtype": "method",
            "name": "createTreeWalker",
            "params": [
                {
                    "name": "root",
                    "description": "The root node at which to begin the NodeIterator's traversal.",
                    "type": "Element"
                },
                {
                    "name": "whatToShow",
                    "description": "Filter specification constants from the NodeFilter DOM interface, indicating which nodes to iterate over.\nYou can use or sum one of the next properties:\n<ul>\n  <li>window.NodeFilter.SHOW_ALL === -1</li>\n  <li>window.NodeFilter.SHOW_ELEMENT === 1</li>\n  <li>window.NodeFilter.SHOW_COMMENT === 128</li>\n  <li>window.NodeFilter.SHOW_TEXT === 4</li>\n</ul>\n\nA treewalker has the next methods:\n<ul>\n  <li>treewalker.firstChild()</li>\n  <li>treewalker.lastChild()</li>\n  <li>treewalker.nextNode()</li>\n  <li>treewalker.nextSibling()</li>\n  <li>treewalker.parentNode()</li>\n  <li>treewalker.previousNode()</li>\n  <li>treewalker.previousSibling()</li>\n</ul>\n\nA treewalker has the next properties:\n<ul>\n  <li>treewalker.currentNode</li>\n  <li>treewalker.filter</li>\n  <li>treewalker.root</li>\n  <li>treewalker.whatToShow</li>\n</ul>",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "filter",
                    "description": "An object implementing the NodeFilter interface or a function. See https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter",
                    "type": "NodeFilter|function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "TreeWalker"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5147,
            "description": "Sets the inline-style of the Element exactly to the specified `value`, overruling previous values.\nMaking the Element's inline-style look like: style=\"value\".\n\nThis is meant for a quick one-time setup. For individually inline style-properties to be set, you can use `setInlineStyle()`.",
            "itemtype": "method",
            "name": "defineInlineStyle",
            "params": [
                {
                    "name": "value",
                    "description": "the style string to be set",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5162,
            "description": "Empties the content of the Element.\nAlias for thisNode.vTextContent = '';",
            "itemtype": "method",
            "name": "empty",
            "chainable": 1,
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5174,
            "description": "Reference to the first of sibbling vNode's, where the related dom-node is an Element(nodeType===1).",
            "itemtype": "method",
            "name": "first",
            "params": [
                {
                    "name": "cssSelector",
                    "description": "to return the first Element that matches the css-selector",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Element"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5186,
            "description": "Reference to the first child-Element, where the related dom-node an Element (nodeType===1).",
            "itemtype": "method",
            "name": "firstOfChildren",
            "params": [
                {
                    "name": "cssSelector",
                    "description": "to return the first Element that matches the css-selector",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Element"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5199,
            "description": "Forces the Element to be inside an ancestor-Element that has the `overfow=\"scroll\" set.",
            "itemtype": "method",
            "name": "forceIntoNodeView",
            "params": [
                {
                    "name": "ancestor",
                    "description": "the Element where it should be forced into its view.\n       Only use this when you know the ancestor and this ancestor has an `overflow=\"scroll\"` property\n       when not set, this method will seek through the doc-tree upwards for the first Element that does match this criteria.",
                    "type": "Element",
                    "optional": true
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5263,
            "description": "Forces the Element to be inside the window-view. Differs from `scrollIntoView()` in a way\nthat `forceIntoView()` doesn't change the position when it's inside the view, whereas\n`scrollIntoView()` sets it on top of the view.",
            "itemtype": "method",
            "name": "forceIntoView",
            "params": [
                {
                    "name": "notransition",
                    "description": "set true if you are sure positioning is without transition.\n       this isn't required, but it speeds up positioning. Only use when no transition is used:\n       when there is a transition, setting this argument `true` would miscalculate the position.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "rectangle",
                    "description": "Set this if you have already calculated the window-rectangle (used for preformance within drag-drop)",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "x",
                            "description": "scrollLeft of window",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "y",
                            "description": "scrollTop of window",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "w",
                            "description": "width of window",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "h",
                            "description": "height of window",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ],
            "chainable": 1,
            "since": "0.0.2",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5324,
            "description": "Gets an ElementArray of Elements that lie within this Element and match the css-selector.",
            "itemtype": "method",
            "name": "getAll",
            "params": [
                {
                    "name": "cssSelector",
                    "description": "css-selector to match",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ElementArray of Elements that match the css-selector",
                "type": "ElementArray"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5336,
            "description": "Gets an attribute of the Element.\n\nAlias for getAttribute().",
            "itemtype": "method",
            "name": "getAttr",
            "params": [
                {
                    "name": "attributeName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "value of the attribute",
                "type": "String|null"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5350,
            "description": "Returns all attributes as defined as an key/value object.",
            "itemtype": "method",
            "name": "getAttrs",
            "params": [
                {
                    "name": "attributeName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "all attributes as on Object",
                "type": "Object"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5362,
            "description": "Gets an attribute of the Element.\n\nSame as getAttr().",
            "itemtype": "method",
            "name": "getAttribute",
            "params": [
                {
                    "name": "attributeName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "value of the attribute",
                "type": "String|null"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5377,
            "description": "Returns a live collection of the Element-childNodes.",
            "itemtype": "method",
            "name": "getChildren",
            "return": {
                "description": "",
                "type": "ElementArray"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5395,
            "description": "Returns a token list of the class attribute of the element.\nSee: https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList",
            "itemtype": "method",
            "name": "getClassList",
            "return": {
                "description": "DOMTokenList"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5413,
            "description": "Returns data set specified by `key`. If not set, `undefined` will be returned.\nThe data is efficiently stored on the vnode.",
            "itemtype": "method",
            "name": "getData",
            "params": [
                {
                    "name": "key",
                    "description": "name of the key",
                    "type": "String"
                }
            ],
            "return": {
                "description": "data set specified by `key`",
                "type": "Any|undefined"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5427,
            "description": "Gets one Element, specified by the css-selector. To retrieve a single element by id,\nyou need to prepend the id-name with a `#`. When multiple Element's match, the first is returned.",
            "itemtype": "method",
            "name": "getElement",
            "params": [
                {
                    "name": "cssSelector",
                    "description": "css-selector to match",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the Element that was search for",
                "type": "Element|null"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5440,
            "description": "Returns the Element matching the specified id, which should should be a descendant of this Element.",
            "itemtype": "method",
            "name": "getElementById",
            "params": [
                {
                    "name": "id",
                    "description": "id of the Element",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Element|null"
            },
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5457,
            "description": "Gets innerHTML of the dom-node.\nGoes through the vdom, so it's superfast.\n\nUse this method instead of `innerHTML`",
            "itemtype": "method",
            "name": "getHTML",
            "return": {
                "description": "",
                "type": "String"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5471,
            "description": "Returns the Elments `id`",
            "itemtype": "method",
            "name": "getId",
            "return": {
                "description": "Elements `id`",
                "type": "String|undefined"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5482,
            "description": "Returns inline style of the specified property. `Inline` means: what is set directly on the Element,\nthis doesn't mean necesairy how it is looked like: when no css is set inline, the Element might still have\nan appearance because of other CSS-rules.\n\nIn most cases, you would be interesting in using `getStyle()` instead.\n\nNote: no need to camelCase cssProperty: both `margin-left` as well as `marginLeft` are fine",
            "itemtype": "method",
            "name": "getInlineStyle",
            "params": [
                {
                    "name": "cssProperty",
                    "description": "the css-property to look for",
                    "type": "String"
                },
                {
                    "name": "pseudo",
                    "description": "to look inside a pseudo-style",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "css-style",
                "type": "String|undefined"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5508,
            "description": "Returns inline transition-css-property. `Inline` means: what is set directly on the Element,\nWhen `transition` is set inline, no `parent` transition-rules apply.",
            "itemtype": "method",
            "name": "getInlineTransition",
            "params": [
                {
                    "name": "transitionProperty",
                    "description": "the css-property to look for",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "pseudo",
                    "description": "to look inside a pseudo-style",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "the transition-object, with the properties:\n<ul>\n    <li>duration {Number}</li>\n    <li>timingFunction {String}</li>\n    <li>delay {Number}</li>\n</ul>",
                "type": "Object"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5533,
            "description": "Gets the outerHTML of the dom-node.\nGoes through the vdom, so it's superfast.\n\nUse this method instead of `outerHTML`",
            "itemtype": "method",
            "name": "getOuterHTML",
            "return": {
                "description": "",
                "type": "String"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5547,
            "description": "Returns the Element's parent Element.",
            "itemtype": "method",
            "name": "getParent",
            "return": {
                "description": "",
                "type": "Element"
            },
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5558,
            "description": "Returns cascaded style of the specified property. `Cascaded` means: the actual present style,\nthe way it is visible (calculated through the DOM-tree).\n\n<ul>\n    <li>Note1: values are absolute: percentages and points are converted to absolute values, sizes are in pixels, colors in rgb/rgba-format.</li>\n    <li>Note2: you cannot query shotcut-properties: use `margin-left` instead of `margin`.</li>\n    <li>Note3: no need to camelCase cssProperty: both `margin-left` as well as `marginLeft` are fine.</li>\n    <li>Note4: you can query `transition`, `transform`, `perspective` and `transform-origin` instead of their vendor-specific properties.</li>\n    <li>Note5: `transition` or `transform` return an Object instead of a String.</li>\n</ul>",
            "itemtype": "method",
            "name": "getCascadeStyle",
            "params": [
                {
                    "name": "cssProperty",
                    "description": "property that is queried",
                    "type": "String"
                },
                {
                    "name": "pseudo",
                    "description": "to query pseudo-element, fe: `:before` or `:first-line`",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "value for the css-property: this is an Object for the properties `transition` or `transform`",
                "type": "String|Object"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5589,
            "description": "Returns cascaded \"transition\" style of the specified trandform-property. `Cascaded` means: the actual present style,\nthe way it is visible (calculated through the DOM-tree).\n\nNote1: When \"transition\" is set inline, ONLY inline transtition is active!\nThus, if parentNode has \"transition: width 2s\" and inline has \"transition: height 3s\", then the transition\nwill be \"transition: height 3s\" --> returning \"undefined\" for transitionProperty=width.\nNote2: in case of \"transition: all\" --> these values will be returned for every \"transitionProperty\" (even when querying \"width\")",
            "itemtype": "method",
            "name": "getTransition",
            "params": [
                {
                    "name": "transitionProperty",
                    "description": "transform property that is queried, f.e. \"width\", or \"all\"",
                    "type": "String"
                },
                {
                    "name": "pseudo",
                    "description": "to query pseudo-element, fe: `:before` or `:first-line`",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "the transition-object, with the properties:\n<ul>\n    <li>duration {Number}</li>\n    <li>timingFunction {String}</li>\n    <li>delay {Number}</li>\n</ul>",
                "type": "Object"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5668,
            "description": "Elements tag-name in uppercase (same as nodeName).",
            "itemtype": "method",
            "name": "getTagName",
            "return": {
                "description": "",
                "type": "String"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5679,
            "description": "Gets the innerContent of the Element as plain text.\nGoes through the vdom, so it's superfast.\n\nUse this method instead of `textContent`",
            "itemtype": "method",
            "name": "getText",
            "return": {
                "description": "String"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5693,
            "description": "Gets the value of the following Elements:\n\n<ul>\n    <li>input</li>\n    <li>textarea</li>\n    <li>select</li>\n    <li>any container that is `contenteditable`</li>\n</ul>",
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "",
                "type": "String"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5717,
            "description": "Whether the Element has the attribute set.\n\nAlias for hasAttribute().",
            "itemtype": "method",
            "name": "hasAttr",
            "params": [
                {
                    "name": "attributeName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Whether the Element has the attribute set.",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5731,
            "description": "Whether the Element has the attribute set.\n\nSame as hasAttr().",
            "itemtype": "method",
            "name": "hasAttribute",
            "params": [
                {
                    "name": "attributeName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Whether the Element has the attribute set.",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5745,
            "description": "Indicating if the current element has any attributes or not.",
            "itemtype": "method",
            "name": "hasAttributes",
            "return": {
                "description": "Whether the current element has any attributes or not.",
                "type": "Boolean"
            },
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5756,
            "description": "Indicating if the Element has any children (childNodes with nodeType of 1).",
            "itemtype": "method",
            "name": "hasChildren",
            "return": {
                "description": "whether the Element has children",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5767,
            "description": "Checks whether the className is present on the Element.",
            "itemtype": "method",
            "name": "hasClass",
            "params": [
                {
                    "name": "className",
                    "description": "the className to check for. May be an Array of classNames, which all needs to be present.",
                    "type": "String|Array"
                }
            ],
            "return": {
                "description": "whether the className (or classNames) is present on the Element",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5779,
            "description": "If the Element has data set specified by `key`. The data could be set with `setData()`.",
            "itemtype": "method",
            "name": "hasData",
            "params": [
                {
                    "name": "key",
                    "description": "name of the key",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5792,
            "description": "Indicates whether Element currently has the focus.",
            "itemtype": "method",
            "name": "hasFocus",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5803,
            "description": "Indicates whether the current focussed Element lies inside this Element (on a descendant Element).",
            "itemtype": "method",
            "name": "hasFocusInside",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5815,
            "description": "Returns whether the inline style of the specified property is present. `Inline` means: what is set directly on the Element.\n\nNote: no need to camelCase cssProperty: both `margin-left` as well as `marginLeft` are fine",
            "itemtype": "method",
            "name": "hasInlineStyle",
            "params": [
                {
                    "name": "cssProperty",
                    "description": "the css-property to look for",
                    "type": "String"
                },
                {
                    "name": "pseudo",
                    "description": "to look inside a pseudo-style",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "whether the inlinestyle was present",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5830,
            "description": "Returns whether the specified inline transform-css-property is present. `Inline` means: what is set directly on the Element.\n\nSee more about tranform-properties: https://developer.mozilla.org/en-US/docs/Web/CSS/transform",
            "itemtype": "method",
            "name": "hasInlineTransition",
            "params": [
                {
                    "name": "transitionProperty",
                    "description": "the css-property to look for",
                    "type": "String"
                },
                {
                    "name": "pseudo",
                    "description": "to look inside a pseudo-style",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "whether the inline transform-css-property was present",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5845,
            "description": "Returns whether the specified transform-property is active.\n\nNote1: When \"transition\" is set inline, ONLY inline transtition is active!\nThus, if parentNode has \"transition: width 2s\" and inline has \"transition: height 3s\",\nthen hasTransition('width') will return false.\nNote2: in case of \"transition: all\" --> hasTransition() will always `true` for every transitionProperty.",
            "itemtype": "method",
            "name": "hasTransition",
            "params": [
                {
                    "name": "transitionProperty",
                    "description": "the css-property to look for",
                    "type": "String"
                },
                {
                    "name": "pseudo",
                    "description": "to look inside a pseudo-style",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "whether the inlinestyle was present",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5863,
            "description": "Hides a node by making it floated and removing it out of the visible screen.\nHides immediately without `fade`, or will fade when fade is specified.",
            "itemtype": "method",
            "name": "hide",
            "params": [
                {
                    "name": "fade",
                    "description": "sec to fade (you may use `0.1`)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "fulfilled when the element is ready hiding, or rejected when showed up again (using node.show) before fully hided.",
                "type": "This|Promise"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5918,
            "description": "Indicates whether the Element currently is part if the DOM.",
            "itemtype": "method",
            "name": "inDOM",
            "return": {
                "description": "whether the Element currently is part if the DOM.",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5929,
            "description": "Checks whether the Element lies within the specified selector (which can be a CSS-selector or a Element)",
            "example": [
                "\nvar divnode = childnode.inside('div.red');",
                "\nvar divnode = childnode.inside(containerNode);"
            ],
            "itemtype": "method",
            "name": "inside",
            "params": [
                {
                    "name": "selector",
                    "description": "the selector, specified by a Element or a css-selector",
                    "type": "Element|String"
                }
            ],
            "return": {
                "description": "the nearest Element that matches the selector, or `false` when not found",
                "type": "Element|false"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5959,
            "description": "Checks whether a point specified with x,y is within the Element's region.",
            "itemtype": "method",
            "name": "insidePos",
            "params": [
                {
                    "name": "x",
                    "description": "x-value for new position (coordinates are page-based)",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-value for new position (coordinates are page-based)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "whether there is a match",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5977,
            "description": "Inserts `domNode` before `refDomNode`.",
            "itemtype": "method",
            "name": "insertBefore",
            "params": [
                {
                    "name": "domNode",
                    "description": "content to insert",
                    "type": "Node|Element|ElementArray|String"
                },
                {
                    "name": "refDomNode",
                    "description": "The Element before which newElement is inserted.",
                    "type": "Element"
                },
                {
                    "name": "escape",
                    "description": "whether to insert `escaped` content, leading it into only text inserted",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "the Element being inserted (equals domNode)",
                "type": "Node"
            },
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 5991,
            "description": "Reference to the last of sibbling vNode's, where the related dom-node is an Element(nodeType===1).",
            "itemtype": "method",
            "name": "last",
            "params": [
                {
                    "name": "cssSelector",
                    "description": "to return the last Element that matches the css-selector",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Element"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 6004,
            "description": "Reference to the last child-Element, where the related dom-node an Element (nodeType===1).",
            "itemtype": "method",
            "name": "lastOfChildren",
            "params": [
                {
                    "name": "cssSelector",
                    "description": "to return the last Element that matches the css-selector",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Element"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 6017,
            "description": "Indicates if the element would be selected by the specified selector string.\nAlias for matchesSelector()",
            "itemtype": "method",
            "name": "matches",
            "params": [
                {
                    "name": "cssSelector",
                    "description": "the css-selector to check for",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 6030,
            "description": "Indicates if the element would be selected by the specified selector string.\nAlias for matches()",
            "itemtype": "method",
            "name": "matchesSelector",
            "params": [
                {
                    "name": "cssSelector",
                    "description": "the css-selector to check for",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 6043,
            "description": "Reference to the next of sibbling Element, where the related dom-node is an Element(nodeType===1).",
            "itemtype": "method",
            "name": "next",
            "params": [
                {
                    "name": "cssSelector",
                    "description": "css-selector to be used as a filter",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Element|null"
            },
            "type": "Element",
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 6078,
            "description": "Prepends a Element or text at the start of Element's innerHTML, or before the `refElement`.",
            "itemtype": "method",
            "name": "prepend",
            "params": [
                {
                    "name": "content",
                    "description": "content to prepend",
                    "type": "Element|Element|ElementArray|String"
                },
                {
                    "name": "escape",
                    "description": "whether to insert `escaped` content, leading it into only text inserted",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "refElement",
                    "description": "reference Element where the content should be prepended",
                    "type": "Element",
                    "optional": true
                }
            ],
            "return": {
                "description": "the created Element (or the last when multiple)",
                "type": "Element"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 6128,
            "description": "Reference to the previous of sibbling Element, where the related dom-node is an Element(nodeType===1).",
            "itemtype": "method",
            "name": "previous",
            "params": [
                {
                    "name": "cssSelector",
                    "description": "css-selector to be used as a filter",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Element|null"
            },
            "type": "Element",
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 6163,
            "description": "Returns the first Element within the Element, that matches the CSS-selectors. You can pass one, or multiple CSS-selectors. When passed multiple,\nthey need to be separated by a `comma`.",
            "itemtype": "method",
            "name": "querySelector",
            "params": [
                {
                    "name": "selectors",
                    "description": "CSS-selector(s) that should match",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Element"
            },
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 6196,
            "description": "Returns an ElementArray of all Elements within the Element, that match the CSS-selectors. You can pass one, or multiple CSS-selectors. When passed multiple,\nthey need to be separated by a `comma`.\n\nquerySelectorAll is a snapshot of the dom at the time this method was called. It is not updated when changes of the dom are made afterwards.",
            "itemtype": "method",
            "name": "querySelectorAll",
            "params": [
                {
                    "name": "selectors",
                    "description": "CSS-selector(s) that should match",
                    "type": "String"
                }
            ],
            "return": {
                "description": "non-life Array (snapshot) with Elements",
                "type": "ElementArray"
            },
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 6231,
            "description": "Checks whether the Element has its rectangle inside the outbound-Element.\nThis is no check of the DOM-tree, but purely based upon coordinates.",
            "itemtype": "method",
            "name": "rectangleInside",
            "params": [
                {
                    "name": "outboundElement",
                    "description": "the Element where this element should lie inside",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "whether the Element lies inside the outboundElement",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 6250,
            "description": "Removes the Element from the DOM.\nAlias for thisNode.parentNode.removeChild(thisNode);",
            "itemtype": "method",
            "name": "remove",
            "return": {
                "description": "the DOM-node that was removed. You could re-insert it at a later time.",
                "type": "Node"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 6266,
            "description": "Removes the attribute from the Element.\n\nAlias for removeAttribute() BUT is chainable instead (removeAttribute is not).",
            "itemtype": "method",
            "name": "removeAttr",
            "params": [
                {
                    "name": "attributeName",
                    "description": "",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 6281,
            "description": "Removes the attribute from the Element.\n\nUse removeAttr() to be able to chain.",
            "itemtype": "method",
            "name": "removeAttr",
            "params": [
                {
                    "name": "attributeName",
                    "description": "",
                    "type": "String"
                }
            ],
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 6295,
            "description": "Removes the Element's child-Node from the DOM.",
            "itemtype": "method",
            "name": "removeChild",
            "params": [
                {
                    "name": "domNode",
                    "description": "the child-Node to remove",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "the DOM-node that was removed. You could re-insert it at a later time.",
                "type": "Node"
            },
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 6309,
            "description": "Removes a className from the Element.",
            "itemtype": "method",
            "name": "removeClass",
            "params": [
                {
                    "name": "className",
                    "description": "the className that should be removed. May be an Array of classNames.",
                    "type": "String|Array"
                },
                {
                    "name": "returnPromise",
                    "description": "whether to return a Promise instead of `this`, which might be useful in case of\n       transition-properties. The promise will fullfil when the transition is ready, or immediately when no transitioned.",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "transitionFix",
                    "description": "set this to `true` if you experience transition-problems due to wrong calculated css (mostly because of the `auto` value)\n       Setting this parameter, will calculate the true css of the transitioned properties and set this temporarely inline, to fix the issue.\n       Don't use it when not needed, it has a slightly performancehit.\n       No need to set when `returnPromise` is set --> returnPromise always handles the transitionFix.",
                    "optional": true
                }
            ],
            "return": {
                "description": "In case `returnPromise` is set, a Promise returns with the next handles:\n       <ul>\n           <li>cancel() {Promise}</li>\n           <li>freeze() {Promise}</li>\n           <li>unfreeze()</li>\n           <li>finish() {Promise}</li>\n       </ul>\n       These handles resolve with the `elapsed-time` as first argument of the callbackFn",
                "type": "Promise|this"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 6338,
            "description": "Removes data specified by `key` that was set by using `setData()`.\nWhen no arguments are passed, all node-data (key-value pairs) will be removed.",
            "itemtype": "method",
            "name": "removeData",
            "params": [
                {
                    "name": "key",
                    "description": "name of the key",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 6365,
            "description": "Removes the Elment's `id`.",
            "itemtype": "method",
            "name": "removeId",
            "chainable": 1,
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 6376,
            "description": "Removes a css-property (inline) out of the Element.\nNo need to use camelCase.",
            "itemtype": "method",
            "name": "removeInlineStyle",
            "params": [
                {
                    "name": "cssProperty",
                    "description": "the css-property to remove",
                    "type": "String"
                },
                {
                    "name": "pseudo",
                    "description": "to look inside a pseudo-style",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "returnPromise",
                    "description": "whether to return a Promise instead of `this`, which might be useful in case of\n       transition-properties. The promise will fullfil when the transition is ready, or immediately when no transitioned.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 6392,
            "description": "Removes multiple css-properties (inline) out of the Element. You need to supply an Array of Objects, with the properties:\n       <ul>\n           <li>property  {String}</li>\n           <li>pseudo  {String}</li>\n       <ul>\nNo need to use camelCase.",
            "itemtype": "method",
            "name": "removeInlineStyles",
            "params": [
                {
                    "name": "cssProperties",
                    "description": "Array of objects, Strings (or 1 Object/String).\n      When String, then speduo is considered as undefined. When `Objects`, they need the properties:\n       <ul>\n           <li>property  {String}</li>\n           <li>pseudo  {String}</li>\n       <ul>",
                    "type": "Array|Object"
                },
                {
                    "name": "returnPromise",
                    "description": "whether to return a Promise instead of `this`, which might be useful in case of\n       transition-properties. The promise will fullfil when the transition is ready, or immediately when no transitioned.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 6553,
            "description": "Removes a subtype `transform`-css-property of (inline) out of the Element.\nThis way you can sefely remove partial `transform`-properties while remaining the\nother inline `transform` css=properties.\n\nSee more about tranform-properties: https://developer.mozilla.org/en-US/docs/Web/CSS/transform",
            "itemtype": "method",
            "name": "removeInlineTransition",
            "params": [
                {
                    "name": "transitionProperty",
                    "description": "the css-transform property to remove",
                    "type": "String"
                },
                {
                    "name": "pseudo",
                    "description": "to look inside a pseudo-style",
                    "type": "String",
                    "optional": true
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 6570,
            "description": "Removes multiple subtype `transform`-css-property of (inline) out of the Element.\nThis way you can sefely remove partial `transform`-properties while remaining the\nother inline `transform` css=properties.\nYou need to supply an Array of Objects, with the properties:\n       <ul>\n           <li>property  {String}</li>\n           <li>pseudo  {String}</li>\n       <ul>\n\nSee more about tranform-properties: https://developer.mozilla.org/en-US/docs/Web/CSS/transform",
            "itemtype": "method",
            "name": "removeInlineTransitions",
            "params": [
                {
                    "name": "transitionProperties",
                    "description": "the css-transform properties to remove",
                    "type": "Array|Object"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 6617,
            "description": "Replaces the Element with a new Element.",
            "itemtype": "method",
            "name": "replace",
            "params": [
                {
                    "name": "content",
                    "description": "content to replace",
                    "type": "Element|Element|ElementArray|String"
                },
                {
                    "name": "escape",
                    "description": "whether to insert `escaped` content, leading it into only text inserted",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "the created Element (or the last when multiple)",
                "type": "Element"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 6638,
            "description": "Replaces the Element's child-Element with a new Element.",
            "itemtype": "method",
            "name": "replaceChild",
            "params": [
                {
                    "name": "newElement",
                    "description": "the new Element",
                    "type": "Element"
                },
                {
                    "name": "oldVChild",
                    "description": "the Element to be replaced",
                    "type": "Element"
                },
                {
                    "name": "escape",
                    "description": "whether to insert `escaped` content, leading it into only text inserted",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "the Element that was removed (equals oldVChild)",
                "type": "Element"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 6653,
            "description": "Replaces the className of the Element with a new className.\nIf the previous className is not available, the new className is set nevertheless.",
            "itemtype": "method",
            "name": "replaceClass",
            "params": [
                {
                    "name": "prevClassName",
                    "description": "the className to be replaced",
                    "type": "String"
                },
                {
                    "name": "newClassName",
                    "description": "the className to be set",
                    "type": "String"
                },
                {
                    "name": "[force",
                    "description": "]  whether the new className should be set, even is the previous className isn't there",
                    "type": "Boolean"
                },
                {
                    "name": "returnPromise",
                    "description": "whether to return a Promise instead of `this`, which might be useful in case of\n       transition-properties. The promise will fullfil when the transition is ready, or immediately when no transitioned.",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "transitionFix",
                    "description": "set this to `true` if you experience transition-problems due to wrong calculated css (mostly because of the `auto` value)\n       Setting this parameter, will calculate the true css of the transitioned properties and set this temporarely inline, to fix the issue.\n       Don't use it when not needed, it has a slightly performancehit.\n       No need to set when `returnPromise` is set --> returnPromise always handles the transitionFix.",
                    "optional": true
                }
            ],
            "return": {
                "description": "In case `returnPromise` is set, a Promise returns with the next handles:\n       <ul>\n           <li>cancel() {Promise}</li>\n           <li>freeze() {Promise}</li>\n           <li>unfreeze()</li>\n           <li>finish() {Promise}</li>\n       </ul>\n       These handles resolve with the `elapsed-time` as first argument of the callbackFn",
                "type": "Promise|this"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 6689,
            "description": "Scrolls the content of the Element into the specified scrollposition.\nOnly available when the Element has overflow.",
            "itemtype": "method",
            "name": "scrollTo",
            "params": [
                {
                    "name": "x",
                    "description": "left-offset in pixels",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "top-offset in pixels",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 6706,
            "description": "Sets the attribute on the Element with the specified value.\n\nAlias for setAttribute(), BUT differs in a way that setAttr is chainable, setAttribute is not.",
            "itemtype": "method",
            "name": "setAttr",
            "params": [
                {
                    "name": "attributeName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "the value that belongs to `key`",
                    "type": "Any"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 6723,
            "description": "Sets the attribute on the Element with the specified value.\n\nAlias for setAttr(), BUT differs in a way that setAttr is chainable, setAttribute is not.",
            "itemtype": "method",
            "name": "setAttribute",
            "params": [
                {
                    "name": "attributeName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "the value for the attributeName",
                    "type": "String"
                }
            ],
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 6740,
            "description": "Sets multiple attributes on the Element with the specified value.\nThe argument should be one ore more Objects with the properties: `name` and `value`",
            "example": [
                "\ninstance.setAttrs([\n                     {name: 'tabIndex', value: '0'},\n                     {name: 'style', value: 'color: #000;'}\n                 ]);"
            ],
            "itemtype": "method",
            "name": "setAttrs",
            "params": [
                {
                    "name": "attributeData",
                    "description": "",
                    "type": "Array|Object"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 6764,
            "description": "Adds a class to the Element. If the class already exists it won't be duplicated.",
            "itemtype": "method",
            "name": "setClass",
            "params": [
                {
                    "name": "className",
                    "description": "className to be added, may be an array of classNames",
                    "type": "String|Array"
                },
                {
                    "name": "returnPromise",
                    "description": "whether to return a Promise instead of `this`, which might be useful in case of\n       transition-properties. The promise will fullfil when the transition is ready, or immediately when no transitioned.",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "transitionFix",
                    "description": "set this to `true` if you experience transition-problems due to wrong calculated css (mostly because of the `auto` value)\n       Setting this parameter, will calculate the true css of the transitioned properties and set this temporarely inline, to fix the issue.\n       Don't use it when not needed, it has a slightly performancehit.\n       No need to set when `returnPromise` is set --> returnPromise always handles the transitionFix.",
                    "optional": true
                }
            ],
            "return": {
                "description": "In case `returnPromise` is set, a Promise returns with the next handles:\n       <ul>\n           <li>cancel() {Promise}</li>\n           <li>freeze() {Promise}</li>\n           <li>unfreeze()</li>\n           <li>finish() {Promise}</li>\n       </ul>\n       These handles resolve with the `elapsed-time` as first argument of the callbackFn",
                "type": "Promise|this"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 6793,
            "description": "Stores arbitary `data` at the Element (actually at vnode). This has nothing to do with node-attributes whatsoever,\nit is just a way to bind any data to the specific Element so it can be retrieved later on with `getData()`.",
            "itemtype": "method",
            "name": "setData",
            "params": [
                {
                    "name": "key",
                    "description": "name of the key",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "the value that belongs to `key`",
                    "type": "Any"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 6817,
            "description": "Sets the innerHTML of both the vnode as well as the representing dom-node.\nGoes through the vdom, so it's superfast.\n\nUse this method instead of `innerHTML`\n\nSyncs with the DOM.",
            "itemtype": "method",
            "name": "setHTML",
            "params": [
                {
                    "name": "val",
                    "description": "the new value to be set",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 6835,
            "description": "Sets the Elments `id`",
            "itemtype": "method",
            "name": "setId",
            "params": [
                {
                    "name": "val",
                    "description": "Elements new `id`",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 6847,
            "description": "Sets a css-property (inline) for the Element.\n\nNote1: Do not use vendor-specific properties, but general (like `transform` instead of `-webkit-transform`)\n       This method will use the appropriate css-property.\nNote2: no need to camelCase cssProperty: both `margin-left` as well as `marginLeft` are fine",
            "itemtype": "method",
            "name": "setInlineStyle",
            "params": [
                {
                    "name": "cssProperty",
                    "description": "the css-property to be set",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "the css-value",
                    "type": "String"
                },
                {
                    "name": "pseudo",
                    "description": "to look inside a pseudo-style",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "returnPromise",
                    "description": "whether to return a Promise instead of `this`, which might be useful in case of\n       transition-properties. The promise will fullfil when the transition is ready, or immediately when no transitioned.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Promise|this"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 6871,
            "description": "Sets multiple css-properties (inline) for the Element at once.\n\nNote1: Do not use vendor-specific properties, but general (like `transform` instead of `-webkit-transform`)\n       This method will use the appropriate css-property.\nNote2: no need to camelCase cssProperty: both `margin-left` as well as `marginLeft` are fine",
            "itemtype": "method",
            "name": "setInlineStyles",
            "params": [
                {
                    "name": "cssProperties",
                    "description": "the css-properties to be set, specified as an Array of Objects, or 1 Object.\n       The objects should have the next properties:\n       <ul>\n           <li>property  {String}</li>\n           <li>value  {String}</li>\n           <li>pseudo  {String} (optional) --> not: not supported yet in browsers</li>\n       </ul>",
                    "type": "Array|Object"
                },
                {
                    "name": "returnPromise",
                    "description": "whether to return a Promise instead of `this`, which might be useful in case of\n       transition-properties. The promise will fullfil when the transition is ready, or immediately when no transitioned.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Promise|this"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 7052,
            "description": "Sets a transform-css-property (inline) for the Element.\n\nSee more about transitions: https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Using_CSS_transitions",
            "itemtype": "method",
            "name": "setStyle",
            "params": [
                {
                    "name": "setInlineTransition",
                    "description": "the css-property to be set, f.e. `translateX`",
                    "type": "String"
                },
                {
                    "name": "duration",
                    "description": "the duration in seconds (may be a broken number, like `0.5`)",
                    "type": "Number"
                },
                {
                    "name": "timingFunction",
                    "description": "See https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "delay",
                    "description": "the delay in seconds (may be a broken number, like `0.5`)",
                    "type": "Number"
                },
                {
                    "name": "pseudo",
                    "description": "to look inside a pseudo-style",
                    "type": "String",
                    "optional": true
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 7071,
            "description": "Sets a transform-css-property (inline) for the Element.\n\nSee more about transitions: https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Using_CSS_transitions",
            "itemtype": "method",
            "name": "setStyle",
            "params": [
                {
                    "name": "transitionProperties",
                    "description": "the css-transition-properties to be set, specified as an Array of Objects.\n       The objects should have the next properties:\n       <ul>\n           <li>property  {String}</li>\n           <li>duration  {Number}</li>\n           <li>timingFunction  {String} (optional)</li>\n           <li>delay  {Number} (optional)</li>\n           <li>pseudo  {String} (optional)</li>\n       </ul>",
                    "type": "Array"
                },
                {
                    "name": "pseudo",
                    "description": "to look inside a pseudo-style",
                    "type": "String",
                    "optional": true
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 7118,
            "description": "Gets or sets the outerHTML of both the Element as well as the representing dom-node.\nGoes through the vdom, so it's superfast.\n\nUse this property instead of `outerHTML`\n\nSyncs with the DOM.",
            "itemtype": "method",
            "name": "setOuterHTML",
            "params": [
                {
                    "name": "val",
                    "description": "the new value to be set",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 7136,
            "description": "Sets the innerContent of the Element as plain text.\nGoes through the vdom, so it's superfast.\n\nUse this method instead of `textContent`\n\nSyncs with the DOM.",
            "itemtype": "method",
            "name": "setText",
            "params": [
                {
                    "name": "val",
                    "description": "the textContent to be set",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 7154,
            "description": "Sets the value of the following Elements:\n\n<ul>\n    <li>input</li>\n    <li>textarea</li>\n    <li>select</li>\n    <li>any container that is `contenteditable`</li>\n</ul>\n\nWill emit a `valuechange`-event when a new value is set and ITSA's `event`-module is active.",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "val",
                    "description": "thenew value to be set",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 7201,
            "itemtype": "event",
            "name": "valuechange",
            "params": [
                {
                    "name": "e.value",
                    "description": "new value",
                    "type": "String"
                },
                {
                    "name": "e.sourceTarget",
                    "description": "Element whare the valuechange occured",
                    "type": "Element"
                }
            ],
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 7210,
            "description": "Set the position of an html element in page coordinates.\nThe element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).\n\nIf the Element has the attribute `xy-constrian` set, then its position cannot exceed any matching container it lies within.",
            "itemtype": "method",
            "name": "setXY",
            "params": [
                {
                    "name": "x",
                    "description": "x-value for new position (coordinates are page-based)",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-value for new position (coordinates are page-based)",
                    "type": "Number"
                },
                {
                    "name": "constrain",
                    "description": "\n<ul>\n    <li><b>'window'</b> to constrain to the visible window</li>\n    <li><b>Element</b> to constrain to a specified Element</li>\n    <li><b>Object</b> to constrain to an object with the properties: {x, y, w, h} where x and y are absolute pixels of the document\n           (like calculated with getX() and getY()).</li>\n    <li><b>String</b> to constrain to a specified css-selector, which should be an ancestor</li>\n</ul>",
                    "type": "'window', Element, Object, String",
                    "optional": true
                },
                {
                    "name": "notransition",
                    "description": "set true if you are sure positioning is without transition.\n       this isn't required, but it speeds up positioning. Only use when no transition is used:\n       when there is a transition, setting this argument `true` would miscalculate the position.\n       The return-value will be `this` in case `notransition`===true, making setXY to be chainable.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise|this"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 7365,
            "description": "Shows a previously hidden node.\nShows immediately without `fade`, or will fade-in when fade is specified.",
            "itemtype": "method",
            "name": "show",
            "params": [
                {
                    "name": "fade",
                    "description": "sec to fade-in (you may use `0.1`)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "fulfilled when the element is ready showing up, or rejected when hidden again (using node.hide) before fully showed.",
                "type": "This|Promise"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 7424,
            "description": "Transitions one ore more properties of the Element.",
            "itemtype": "method",
            "name": "toggleClass",
            "params": [
                {
                    "name": "to",
                    "description": "the css-properties to be set, specified as an Array of Objects.\n       The objects should have the next properties:\n       <ul>\n           <li>property  {String}</li>\n           <li>value  {String}</li>\n           <li>duration  {Number} (optional)</li>\n           <li>timingFunction  {String} (optional)</li>\n           <li>delay  {String} (optional)</li>\n           <li>pseudo  {String} (optional) --> not: not supported yet in browsers</li>\n       </ul>",
                    "type": "Array"
                },
                {
                    "name": "from",
                    "description": "starting the css-properties to be set, specified as an Array of Objects.\n       If disguarded, then the current style is used as startingpoint. You may specify a subset of the `to`-properties.\n       The objects should have the next properties:\n       <ul>\n           <li>property  {String}</li>\n           <li>value  {String}</li>\n           <li>duration  {Number} (optional)</li>\n           <li>timingFunction  {String} (optional)</li>\n           <li>delay  {String} (optional)</li>\n           <li>pseudo  {String} (optional) --> not: not supported yet in browsers</li>\n       </ul>",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "The promise has the handles:\n       <ul>\n           <li>cancel() {Promise}</li>\n           <li>freeze() {Promise}</li>\n           <li>unfreeze()</li>\n           <li>finish() {Promise}</li>\n       </ul>\n       These handles resolve with the `elapsed-time` as first argument of the callbackFn",
                "type": "Promise"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 7636,
            "description": "Toggles the className of the Element.",
            "itemtype": "method",
            "name": "toggleClass",
            "params": [
                {
                    "name": "className",
                    "description": "className that should be toggled, may be an array of classNames",
                    "type": "String|Array"
                },
                {
                    "name": "forceState",
                    "description": "to force toggling into this specific state",
                    "type": "Boolean"
                },
                {
                    "name": "returnPromise",
                    "description": "whether to return a Promise instead of `this`, which might be useful in case of\n       transition-properties. The promise will fullfil when the transition is ready, or immediately when no transitioned.",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "transitionFix",
                    "description": "set this to `true` if you experience transition-problems due to wrong calculated css (mostly because of the `auto` value)\n       Setting this parameter, will calculate the true css of the transitioned properties and set this temporarely inline, to fix the issue.\n       Don't use it when not needed, it has a slightly performancehit.\n       No need to set when `returnPromise` is set --> returnPromise always handles the transitionFix.",
                    "optional": true
                }
            ],
            "return": {
                "description": "In case `returnPromise` is set, a Promise returns with the next handles:\n       <ul>\n           <li>cancel() {Promise}</li>\n           <li>freeze() {Promise}</li>\n           <li>unfreeze()</li>\n           <li>finish() {Promise}</li>\n       </ul>\n       These handles resolve with the `elapsed-time` as first argument of the callbackFn",
                "type": "Promise|this"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 7668,
            "description": "Gets or set the height of the element in pixels. Included are padding and border, not any margins.\nBy setting the argument `overflow` you get the total height, included the invisible overflow.\n\nThe getter is calculating through `offsetHeight`, the setter will set inline css-style for the height.\n\nValues are numbers without unity.",
            "itemtype": "property",
            "name": "height",
            "type": "{Number}",
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 7695,
            "description": "Gets the x-position (in the DOCUMENT) of the element in pixels.\nDOCUMENT-related: regardless of the window's scroll-position.",
            "itemtype": "property",
            "name": "left",
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 7711,
            "description": "Gets the y-position (in the DOCUMENT) of the element in pixels.\nDOCUMENT-related: regardless of the window's scroll-position.",
            "itemtype": "property",
            "name": "top",
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 7727,
            "description": "Gets or set the width of the element in pixels. Included are padding and border, not any margins.\nBy setting the argument `overflow` you get the total width, included the invisible overflow.\n\nThe getter is calculating through `offsetHeight`, the setter will set inline css-style for the width.\n\nValues are numbers without unity.",
            "itemtype": "property",
            "name": "width",
            "type": "{Number}",
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 7833,
            "description": "Returns the specified attribute of the specified element, as an Attr node.",
            "itemtype": "method",
            "name": "getAttributeNode",
            "return": {
                "description": "",
                "type": "AttributeNode"
            },
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 7840,
            "description": "Returns a text rectangle object that encloses a group of text rectangles. The returned value is\na TextRectangle object which is the union of the rectangles returned by getClientRects() for the element,\ni.e., the CSS border-boxes associated with the element.\n\nThe returned value is a TextRectangle object, which contains read-only left, top, right and bottom properties\ndescribing the border-box in pixels. top and left are relative to the top-left of the viewport.",
            "itemtype": "method",
            "name": "getBoundingClientRect",
            "return": {
                "description": "Therectangle object that encloses a group of text rectangles.",
                "type": "AttributeNode"
            },
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 7852,
            "description": "Returns a collection of rectangles that indicate the bounding rectangles for each box in a client.\n\nThe returned value is a collection of ClientRect objects, one for each CSS border box associated with the element.\nEach ClientRect object contains read-only left, top, right and bottom properties describing the border box, in pixels,\nwith the top-left relative to the top-left of the viewport. For tables with captions,\nthe caption is included even though it's outside the border box of the table.",
            "itemtype": "method",
            "name": "getClientRects",
            "return": {
                "description": "",
                "type": "Collection"
            },
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 7864,
            "description": "Returns a new NodeIterator object with this Element as root.\n\nThe NodeIterator is a snapshot of the dom at the time this method was called. It is not updated when changes of the dom are made afterwards.",
            "itemtype": "method",
            "name": "createNodeIterator",
            "params": [
                {
                    "name": "whatToShow",
                    "description": "Filter specification constants from the NodeFilter DOM interface, indicating which nodes to iterate over.\nYou can use or sum one of the next properties:\n<ul>\n  <li>window.NodeFilter.SHOW_ELEMENT</li>\n  <li>window.NodeFilter.SHOW_COMMENT</li>\n  <li>window.NodeFilter.SHOW_TEXT</li>\n</ul>",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "filter",
                    "description": "An object implementing the NodeFilter interface or a function. See https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter",
                    "type": "NodeFilter|function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "NodeIterator"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 7882,
            "description": "Returns an HTMLCollection of all Elements within this Element, that match their classes with the supplied `classNames` argument.\nTo match multiple different classes, separate them with a `comma`.\n\ngetElementsByClassName is life presentation of the dom. The returned HTMLCollection gets updated when the dom changes.\n\nNOTE: it is highly recomended to use `document.getAll` because that method takes advantage of the vdom.",
            "itemtype": "method",
            "name": "getElementsByClassName",
            "params": [
                {
                    "name": "classNames",
                    "description": "the classes to search for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "life Array with Elements",
                "type": "HTMLCollection"
            },
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 7895,
            "description": "Returns an HTMLCollection of all Elements within this Element, that match their `name`-attribute with the supplied `name` argument.\n\ngetElementsByName is life presentation of the dom. The returned HTMLCollection gets updated when the dom changes.\n\nNOTE: it is highly recomended to use `document.getAll` because that method takes advantage of the vdom.",
            "itemtype": "method",
            "name": "getElementsByName",
            "params": [
                {
                    "name": "name",
                    "description": "the property of name-attribute to search for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "life Array with Elements",
                "type": "HTMLCollection"
            },
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 7908,
            "description": "Returns an HTMLCollection of all Elements within this Element, that match their `name`-attribute with the supplied `name` argument.\n\ngetElementsByTagName is life presentation of the dom. The returned HTMLCollection gets updated when the dom changes.\n\nNOTE: it is highly recomended to use `document.getAll` because that method takes advantage of the vdom.",
            "itemtype": "method",
            "name": "getElementsByTagName",
            "params": [
                {
                    "name": "tagNames",
                    "description": "the tags to search for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "life Array with Elements",
                "type": "HTMLCollection"
            },
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 7920,
            "description": "Inserts the Element into the DOM tree at a specified position.",
            "itemtype": "method",
            "name": "insertAdjacentElement",
            "params": [
                {
                    "name": "position",
                    "description": "\n<ul>\n    <li>'beforebegin' Before the element itself</li>\n    <li>'afterbegin' Just inside the element, before its first child</li>\n    <li>'beforeend' Just inside the element, after its last child</li>\n    <li>'afterend' After the element itself</li>\n<ul>",
                    "type": "String"
                },
                {
                    "name": "element",
                    "description": "",
                    "type": "Element"
                }
            ],
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 7934,
            "description": "Parses the specified text as HTML and inserts the resulting nodes into the DOM tree at a specified position.",
            "itemtype": "method",
            "name": "insertAdjacentHTML",
            "params": [
                {
                    "name": "position",
                    "description": "\n<ul>\n    <li>'beforebegin' Before the element itself</li>\n    <li>'afterbegin' Just inside the element, before its first child</li>\n    <li>'beforeend' Just inside the element, after its last child</li>\n    <li>'afterend' After the element itself</li>\n<ul>",
                    "type": "String"
                },
                {
                    "name": "element",
                    "description": "",
                    "type": "Element"
                }
            ],
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 7948,
            "description": "Inserts the text into the DOM tree as a TextNode at a specified position.",
            "itemtype": "method",
            "name": "insertAdjacentText",
            "params": [
                {
                    "name": "position",
                    "description": "\n<ul>\n    <li>'beforebegin' Before the element itself</li>\n    <li>'afterbegin' Just inside the element, before its first child</li>\n    <li>'beforeend' Just inside the element, after its last child</li>\n    <li>'afterend' After the element itself</li>\n<ul>",
                    "type": "String"
                },
                {
                    "name": "element",
                    "description": "",
                    "type": "Element"
                }
            ],
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 7962,
            "description": "Removes the attribute specified by an attributeNode from the Element.",
            "itemtype": "method",
            "name": "removeAttributeNode",
            "params": [
                {
                    "name": "attributeNode",
                    "description": "",
                    "type": "AttributeNode"
                }
            ],
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 7970,
            "description": "Scrolls the element into view.",
            "itemtype": "method",
            "name": "scrollIntoView",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 7976,
            "description": "Sets the attribute on the Element specified by `attributeNode`",
            "itemtype": "method",
            "name": "setAttributeNode",
            "params": [
                {
                    "name": "attributeNode",
                    "description": "",
                    "type": "AttributeNode"
                }
            ],
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 7985,
            "description": "Fired when a static `script` element  finishes executing its script. Does not fire if the element is added dynamically, eg with appendChild().",
            "itemtype": "event",
            "name": "afterscriptexecute",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 7992,
            "description": "Fired when the code in a `script` element declared in an HTML document is about to start executing. Does not fire if the element is added dynamically, eg with appendChild().",
            "itemtype": "event",
            "name": "beforescriptexecute",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8000,
            "description": "sets or returns an accesskey for an element. An accesskey specifies a shortcut key to activate/focus an element.\nNote: The way of accessing the shortcut key is varying in different browsers: http://www.w3schools.com/jsref/prop_html_accesskey.asp",
            "itemtype": "property",
            "name": "accessKey",
            "type": "String",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8009,
            "description": "Returns a live collection of all attribute nodes registered to the specified node.\nIt is a NamedNodeMap, not an Array, so it has no Array methods and the Attr nodes' indexes may differ among browsers.\nTo be more specific, attributes is a key/value pair of strings that represents any information regarding that attribute.\n\nPrefer to use `getAttrs()` which is much quicker, but doesn't return a life-list.",
            "itemtype": "property",
            "name": "attributes",
            "type": "NamedNodeMap",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8020,
            "description": "The absolute base URL of a node.",
            "itemtype": "property",
            "name": "baseURI",
            "type": "String",
            "readonly": "",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8028,
            "description": "Returns the number of children (child Elements)",
            "itemtype": "property",
            "name": "childElementCount",
            "type": "Number",
            "readonly": "",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8036,
            "description": "Returns a live collection of childNodes of the given element, either Element, TextNode or CommentNode",
            "itemtype": "property",
            "name": "childNodes",
            "type": "NodeList",
            "readonly": "",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8044,
            "description": "Returns a live collection of child Element's of the given element.",
            "itemtype": "property",
            "name": "children",
            "type": "NodeList",
            "readonly": "",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8052,
            "description": "Gets and sets the value of the class attribute of the specified element.",
            "itemtype": "property",
            "name": "className",
            "type": "String",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8059,
            "description": "Returns the inner height of an element in pixels, including padding but not the horizontal scrollbar height, border, or margin.",
            "itemtype": "property",
            "name": "clientHeight",
            "type": "Number",
            "readonly": "",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8067,
            "description": "The width of the left border of an element in pixels. It includes the width of the vertical scrollbar if the text direction of the element is right–to–left\nand if there is an overflow causing a left vertical scrollbar to be rendered. clientLeft does not include the left margin or the left padding.",
            "itemtype": "property",
            "name": "clientLeft",
            "type": "Number",
            "readonly": "",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8076,
            "description": "The width of the top border of an element in pixels. It does not include the top margin or padding.",
            "itemtype": "property",
            "name": "clientTop",
            "type": "Number",
            "readonly": "",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8084,
            "description": "Returns the inner width of an element in pixels, including padding but not the vertical scrollbar height, border, or margin.",
            "itemtype": "property",
            "name": "clientWidth",
            "type": "Number",
            "readonly": "",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8092,
            "description": "Reference to the first childNode, where the related dom-node is either an Element, TextNode or CommentNode (nodeType===1, 3 or 8).\n\nBetter work with Elements only:  use `firstElementChild` instead, which returns the first Element-child.",
            "itemtype": "property",
            "name": "firstChild",
            "type": "Node",
            "readonly": "",
            "deprecated": true,
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8103,
            "description": "Reference to the first Element-child, which is an Element (nodeType===1).",
            "itemtype": "property",
            "name": "firstElementChild",
            "type": "Element",
            "readonly": "",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8111,
            "description": "Gets or sets the element's attribute `href`. Only applies for the `a`-element.",
            "itemtype": "property",
            "name": "href",
            "type": "String",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8118,
            "description": "Gets or sets the element's identifier (attribute id).",
            "itemtype": "property",
            "name": "id",
            "type": "String",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8125,
            "description": "Reference to the last childNode, where the related dom-node is either an Element, TextNode or CommentNode (nodeType===1, 3 or 8).\n\nBetter use `lastElementChild` instead, which returns the last Element-child.",
            "itemtype": "property",
            "name": "lastChild",
            "type": "Node",
            "readonly": "",
            "deprecated": true,
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8136,
            "description": "Reference to the last Element-child, where the related dom-node is an Element (nodeType===1).",
            "itemtype": "property",
            "name": "lastElementChild",
            "type": "Element",
            "readonly": "",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8144,
            "description": "Gets or sets the `name` property of a Element; it only applies to the following elements:\n`a`, `applet`, `button`, `form`, `frame`, `iframe`, `img`, `input`, `map`, `meta`, `object`, `param`, `select`, and `textarea`.",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8152,
            "description": "Returns the Element immediately following the specified one in its parent's childNodes list, or null if the specified node is the last node in that list.\nIs an Element (nodeType===1).",
            "itemtype": "property",
            "name": "nextElementSibling",
            "type": "Element",
            "readonly": "",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8161,
            "description": "Returns the Element immediately following the specified one in its parent's childNodes list, or null if the specified node is the last node in that list.\nIs either an Element, TextNode or CommentNode (nodeType===1, 3 or 8).\n\nDo not use this, but use `lastElementChild` instead, which returns the next Element-child.",
            "itemtype": "property",
            "name": "nextElementSibling",
            "type": "Node",
            "deprecated": true,
            "readonly": "",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8173,
            "description": "Elements tag-name",
            "itemtype": "property",
            "name": "nodeName",
            "type": "String",
            "readonly": "",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8181,
            "description": "Elements nodetype: 1==Element, 3==TextNode, 8===CommentNode",
            "itemtype": "property",
            "name": "nodeType",
            "type": "String",
            "readonly": "",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8189,
            "description": "Value/text for non-Element Nodes",
            "itemtype": "property",
            "name": "nodeValue",
            "type": "String",
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8197,
            "description": "The exact width of the Element on the screen.\nIncluded borders and padding (no margin).\n\nReturns a number without unity.\n\nBetter use `width` --> it's an alias, but has a setter as well",
            "itemtype": "property",
            "name": "offsetWidth",
            "type": "Number",
            "readonly": "",
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8211,
            "description": "The exact height of the Element on the screen.\nIncluded borders and padding (no margin).\n\nReturns a number without unity.\n\nBetter use `height` --> it's an alias, but has a setter as well",
            "itemtype": "property",
            "name": "offsetHeight",
            "type": "Number",
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8224,
            "description": "Returns the Element's parent Element.\n\nSame as `parentNode`",
            "itemtype": "property",
            "name": "parentElement",
            "type": "Element",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8233,
            "description": "Returns the Element's parent Element.\n\nSame as `parentElement`",
            "itemtype": "property",
            "name": "parentNode",
            "type": "Element",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8242,
            "description": "Returns the Element immediately preceding the specified one in its parent's childNodes list, or null if the specified node is the last node in that list.\nIs an Element (nodeType===1).",
            "itemtype": "property",
            "name": "previousElementSibling",
            "type": "Element",
            "readonly": "",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8251,
            "description": "Returns the Element immediately preceding the specified one in its parent's childNodes list, or null if the specified node is the last node in that list.\nIs either an Element, TextNode or CommentNode (nodeType===1, 3 or 8).\n\nDo not use this, but use `previousElementSibling` instead, which returns the previous Element-child.",
            "itemtype": "property",
            "name": "previousSibling",
            "deprecated": true,
            "type": "Node",
            "readonly": "",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8264,
            "description": "A measurement of the height of an element's content, including content not visible on the screen due to overflow.\nThe scrollHeight value is equal to the minimum clientHeight the element would require in order to fit all the content in the viewpoint\nwithout using a vertical scrollbar. It includes the element padding but not its margin.\n\nReturns a number without unity.",
            "itemtype": "property",
            "name": "scrollHeight",
            "type": "Number",
            "readonly": "",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8276,
            "description": "Gets or sets the number of pixels that an element's content is scrolled to the left.",
            "itemtype": "property",
            "name": "scrollLeft",
            "type": "Number",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8283,
            "description": "Gets or sets the number of pixels that the content of an element is scrolled upward. An element's scrollTop is a measurement\nof the distance of an element's top to its topmost visible content. When an element content does not generate a vertical scrollbar,\nthen its scrollTop value defaults to 0.",
            "itemtype": "property",
            "name": "scrollTop",
            "type": "Number",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8292,
            "description": "Returns either the width in pixels of the content of an element or the width of the element itself, whichever is greater.\nIf the element is wider than its content area (for example, if there are scroll bars for scrolling through the content),\nthe scrollWidth is larger than the clientWidth.\n\nReturns a number without unity.",
            "itemtype": "property",
            "name": "scrollWidth",
            "type": "Number",
            "readonly": "",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8304,
            "description": "Gets or sets the element's attribute `type`. Only applies for the `script`, `img` and `style`-elements.",
            "itemtype": "property",
            "name": "src",
            "type": "String",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8311,
            "description": "Gets or sets the element's attribute `style`.",
            "itemtype": "property",
            "name": "style",
            "type": "String",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8318,
            "description": "Gets or sets the element's attribute `type`. Only applies for the `input`-element.",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8325,
            "description": "Gets or sets the value of an input or select Element.\n\nNote it is highly preferable to use getValue() and setValue().",
            "itemtype": "property",
            "name": "value",
            "type": "String",
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8436,
            "description": "Transforms html-text into a vnodes-Array.",
            "itemtype": "method",
            "name": "htmlToVNodes",
            "params": [
                {
                    "name": "htmlString",
                    "description": "plain html as string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "array with `vnodes`",
                "type": "Array"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "html-parser"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8702,
            "description": "Transforms a dom-node into a vnode.",
            "itemtype": "method",
            "name": "domNodeToVNode",
            "params": [
                {
                    "name": "domNode",
                    "description": "The dom-node to be transformed",
                    "type": "Node"
                },
                {
                    "name": "parentVNode",
                    "description": "the parent-vnode that belongs to the dom-node",
                    "type": "Vnode",
                    "optional": true
                }
            ],
            "return": {
                "description": "the vnode-representation of the dom-node",
                "type": "Vnode"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "node-parser"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8828,
            "description": "Reference to the VElement of document.body (gets its value as soon as it gets refered to)",
            "itemtype": "property",
            "name": "body",
            "default": "null",
            "type": "VElement",
            "since": "0.0.1",
            "class": "NS-vdom",
            "module": "vdom",
            "submodule": "vdom-ns"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8839,
            "description": "A hash with all node'ids (of all the domnodes that have an id). The value is a reference to an VElement.",
            "itemtype": "property",
            "name": "nodeids",
            "default": "{}",
            "type": "Object",
            "since": "0.0.1",
            "class": "NS-vdom",
            "module": "vdom",
            "submodule": "vdom-ns"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8849,
            "description": "A hash with all encountered non-void Elements",
            "itemtype": "property",
            "name": "nonVoidElements",
            "default": "{}",
            "type": "Object",
            "since": "0.0.1",
            "class": "NS-vdom",
            "module": "vdom",
            "submodule": "vdom-ns"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8859,
            "description": "A hash to identify what tagNames are equal to `SCRIPT` or `STYLE`.",
            "itemtype": "property",
            "name": "SCRIPT_OR_STYLE_TAG",
            "default": "{SCRIPT: true, STYLE: true}",
            "type": "Object",
            "since": "0.0.1",
            "class": "NS-vdom",
            "module": "vdom",
            "submodule": "vdom-ns"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8872,
            "description": "A hash with all nodeTypes that should be captured by the vDOM.",
            "itemtype": "property",
            "name": "VALID_NODE_TYPES",
            "default": "{1: true, 3: true, 8: true}",
            "type": "Object",
            "since": "0.0.1",
            "class": "NS-vdom",
            "module": "vdom",
            "submodule": "vdom-ns"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8886,
            "description": "A hash with all encountered void Elements",
            "itemtype": "property",
            "name": "voidElements",
            "default": "{}",
            "type": "Object",
            "since": "0.0.1",
            "class": "NS-vdom",
            "module": "vdom",
            "submodule": "vdom-ns"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8972,
            "description": "Object to gain quick access to attribute-name end-tokens.",
            "itemtype": "property",
            "name": "END_ATTRIBUTENAME",
            "default": "{\n     '=': true,\n     ']': true\n }",
            "type": "Object",
            "access": "protected",
            "tagname": "",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 8993,
            "description": "Object to gain quick access to different changes of Element nodeType changes.",
            "itemtype": "property",
            "name": "NODESWITCH",
            "default": "{\n     1: {\n         1: 1,\n         3: 2,\n         8: 3\n     },\n     3: {\n         1: 4,\n         3: 5,\n         8: 6\n     },\n     8: {\n         1: 7,\n         3: 8,\n         8: 9\n     }\n }",
            "type": "Object",
            "access": "protected",
            "tagname": "",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 9035,
            "description": "Object to gain quick access to selector start-tokens.",
            "itemtype": "property",
            "name": "SELECTOR_IDENTIFIERS",
            "default": "{\n     '#': 1,\n     '.': 2,\n     '[': 3\n }",
            "type": "Object",
            "access": "protected",
            "tagname": "",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 9064,
            "description": "Object to gain quick access to the selectors that required children",
            "itemtype": "property",
            "name": "PSEUDO_REQUIRED_CHILDREN",
            "default": "{\n    ':first-child': true,\n    ':first-of-type': true,\n    ':last-child': true,\n    ':last-of-type': true,\n    ':nth-child': true,\n    ':nth-last-child': true,\n    ':nth-last-of-type': true,\n    ':nth-of-type': true,\n    ':only-of-type': true,\n    ':only-child': true\n }",
            "type": "Object",
            "access": "protected",
            "tagname": "",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 9099,
            "description": "Searches for the next -or previous- node-sibling (nodeType of 1, 3 or 8).",
            "itemtype": "method",
            "name": "_findNodeSibling",
            "params": [
                {
                    "name": "vnode",
                    "description": "the vnode to inspect",
                    "type": "Object"
                },
                {
                    "name": "next",
                    "description": "whether to search for the next, or previous match.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "the vnode that matches the search",
                "type": "Object|undefined"
            },
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 9120,
            "description": "Searches for the next -or previous- Element-sibling (nodeType of 1).",
            "itemtype": "method",
            "name": "_findElementSibling",
            "params": [
                {
                    "name": "vnode",
                    "description": "the vnode to inspect",
                    "type": "Object"
                },
                {
                    "name": "next",
                    "description": "whether to search for the next, or previous match.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "the vnode that matches the search",
                "type": "Object|undefined"
            },
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 9149,
            "description": "Check whether the vnode matches a \"nth-child\" test, which is used for css pseudoselectors like `nth-child`, `nth-of-type` etc.",
            "itemtype": "method",
            "name": "_matchNthChild",
            "params": [
                {
                    "name": "pseudoArg",
                    "description": "the argument for nth-child",
                    "type": "String"
                },
                {
                    "name": "index",
                    "description": "the index of the inspected vnode",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "whether the vnode matches the nthChild test",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 9196,
            "description": "Check whether the vnode matches the css-selector. the css-selector should be a single selector,\nnot multiple, so it shouldn't contain a `comma`.",
            "itemtype": "method",
            "name": "_matchesOneSelector",
            "params": [
                {
                    "name": "vnode",
                    "description": "the vnode to inspect",
                    "type": "Vnode"
                },
                {
                    "name": "selector",
                    "description": "the selector-item to check the match for",
                    "type": "String"
                },
                {
                    "name": "relatedVNode",
                    "description": "a related vnode where to selectors starting with `>`, `~` or `+` should be compared.\n       If not specified, any of these three starting selector-characters will be ignored (leading to matching this first character).",
                    "type": "Vnode",
                    "optional": true
                }
            ],
            "return": {
                "description": "whether the vnode matches the css-selector",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 9288,
            "description": "Check whether the vnode matches one specific selector-item. Suppose the css-selector: \"#mynode li.red .blue\"\nthen there are 3 selector-items: \"#mynode\",  \"li.red\" and \".blue\"\n\nThis method also can handle the new selectors:\n<ul>\n    <li>[att^=val] –-> the “begins with” selector</li>\n    <li>[att$=val] –-> the “ends with” selector</li>\n    <li>[att*=val] –-> the “contains” selector (might be a substring)</li>\n    <li>[att~=val] –-> the “contains” selector as a separate word, separated by spaces</li>\n    <li>[att|=val] –-> the “contains” selector as a separate word, separated by `|`</li>\n    <li>+ --> (same level)</li>\n    <li>~ --> (same level)</li>\n</ul>",
            "itemtype": "method",
            "name": "_matchesSelectorItem",
            "params": [
                {
                    "name": "vnode",
                    "description": "the vnode to inspect",
                    "type": "Object"
                },
                {
                    "name": "selectorItem",
                    "description": "the selector-item to check the match for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "whether the vnode matches the selector-item",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 9661,
            "description": "Splits the selector into separate subselector-items that should match different elements through the tree.\nSpecial characters '>' and '+' are added as separate items in the hash.",
            "itemtype": "method",
            "name": "_splitSelector",
            "params": [
                {
                    "name": "selector",
                    "description": "the selector-item to check the match for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "splitted selectors",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 9710,
            "description": "Check whether the vnode's domNode is equal, or contains the specified Element.",
            "itemtype": "method",
            "name": "contains",
            "return": {
                "description": "whether the vnode's domNode is equal, or contains the specified Element.",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 9724,
            "description": "Returns the first child-vnode (if any). The child represents an Element (nodeType===1).",
            "itemtype": "method",
            "name": "firstOfVChildren",
            "params": [
                {
                    "name": "cssSelector",
                    "description": "one or more css-selectors",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the first child-vnode or null when not present",
                "type": "Object|null"
            },
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 9747,
            "description": "Checks whether the vnode has any vChildNodes (nodeType of 1, 3 or 8).",
            "itemtype": "method",
            "name": "hasVChildNodes",
            "return": {
                "description": "whether the vnode has any vChildNodes.",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 9758,
            "description": "Checks whether the vnode has any vChildren (vChildNodes with nodeType of 1).",
            "itemtype": "method",
            "name": "hasVChildren",
            "return": {
                "description": "whether the vnode has any vChildren.",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 9769,
            "description": "Checks whether the className is present on the vnode.",
            "itemtype": "method",
            "name": "hasClass",
            "params": [
                {
                    "name": "className",
                    "description": "the className to check for. May be an Array of classNames, which all needs to be present.",
                    "type": "String|Array"
                }
            ],
            "return": {
                "description": "whether the className (or classNames) is present on the vnode",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 9794,
            "description": "Returns the last child-vnode (if any). The child represents an Element (nodeType===1).",
            "itemtype": "method",
            "name": "lastOfVChildren",
            "params": [
                {
                    "name": "cssSelector",
                    "description": "one or more css-selectors",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the last child-vnode or null when not present",
                "type": "Object|null"
            },
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 9817,
            "description": "Checks whether the vnode matches one of the specified selectors. `selectors` can be one, or multiple css-selectors,\nseparated by a `comma`. For example: \"#myid li.red blue\" is one selector, \"div.red, div.blue, div.green\" are three selectors.",
            "itemtype": "method",
            "name": "matchesSelector",
            "params": [
                {
                    "name": "selectors",
                    "description": "one or more css-selectors",
                    "type": "String"
                },
                {
                    "name": "relatedVNode",
                    "description": "a related vnode where to selectors starting with `>`, `~` or `+` should be compared.\n       If not specified, any of these three starting selector-characters will be ignored (leading to matching this first character).",
                    "type": "Vnode",
                    "optional": true
                }
            ],
            "return": {
                "description": "whether the vnode matches one of the selectors",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 9841,
            "description": "Reloads the DOM-attribute into the vnode.",
            "itemtype": "method",
            "name": "matchesSelector",
            "params": [
                {
                    "name": "attributeName",
                    "description": "the name of the attribute to be reloaded.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the domNode that was reloaded.",
                "type": "Node"
            },
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 9909,
            "description": "Syncs the vnode's nodeid (if available) inside `NS-vdom.nodeids`.\n\nDoes NOT sync with the dom. Can be invoked multiple times without issues.",
            "itemtype": "method",
            "name": "storeId",
            "chainable": 1,
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 9927,
            "description": "Adds a vnode to the end of the list of vChildNodes.\n\nSyncs with the DOM.",
            "itemtype": "method",
            "name": "_appendChild",
            "params": [
                {
                    "name": "VNode",
                    "description": "vnode to append",
                    "type": "Vnode"
                }
            ],
            "access": "private",
            "tagname": "",
            "return": {
                "description": "the Node that was appended",
                "type": "Node"
            },
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 9953,
            "description": "Removes the vnode from its parent vChildNodes- and vChildren-list.\n\nDoes NOT sync with the dom.",
            "itemtype": "method",
            "name": "_deleteFromParent",
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 9974,
            "description": "Destroys the vnode and all its vnode-vChildNodes.\nRemoves it from its vParent.vChildNodes list,\nalso removes its definitions inside `NS-vdom.nodeids`.\n\nDoes NOT sync with the dom.",
            "itemtype": "method",
            "name": "_destroy",
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 10018,
            "description": "Inserts `newVNode` before `refVNode`.\n\nSyncs with the DOM.",
            "itemtype": "method",
            "name": "_insertBefore",
            "params": [
                {
                    "name": "newVNode",
                    "description": "vnode to insert",
                    "type": "Vnode"
                },
                {
                    "name": "refVNode",
                    "description": "The vnode before which newVNode should be inserted.",
                    "type": "Vnode"
                }
            ],
            "access": "private",
            "tagname": "",
            "return": {
                "description": "the Node being inserted (equals domNode)",
                "type": "Node"
            },
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 10042,
            "description": "Moves the vnode from its current parent.vChildNodes list towards a new parent vnode at the specified position.\n\nDoes NOT sync with the dom.",
            "itemtype": "method",
            "name": "_moveToParent",
            "params": [
                {
                    "name": "parentVNode",
                    "description": "the parent-vnode",
                    "type": "Vnode"
                },
                {
                    "name": "index",
                    "description": "the position of the child. When not specified, it will be appended.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 10068,
            "description": "Removes empty TextNodes and merges following TextNodes inside the vnode.\n\nSyncs with the dom.",
            "itemtype": "method",
            "name": "_normalize",
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 10104,
            "description": "Makes the vnode `normalizable`. Could be set to `false` when batch-inserting nodes, while `normalizaing` manually at the end.\nAfterwards, you should always reset `normalizable` to true.",
            "itemtype": "method",
            "name": "_normalizable",
            "params": [
                {
                    "name": "value",
                    "description": "whether the vnode should be normalisable.",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 10120,
            "description": "Prevents MutationObserver from making the dom sync with the vnode.\nShould be used when manipulating the dom from within the vnode itself (to preventing looping)",
            "itemtype": "method",
            "name": "_noSync",
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 10140,
            "description": "Removes the attribute of both the vnode as well as its related dom-node.\n\nSyncs with the dom.",
            "itemtype": "method",
            "name": "_removeAttr",
            "params": [
                {
                    "name": "attributeName",
                    "description": "",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 10166,
            "description": "Removes the vnode's child-vnode from its vChildren and the DOM.\n\nSyncs with the DOM.",
            "itemtype": "method",
            "name": "removeChild",
            "params": [
                {
                    "name": "VNode",
                    "description": "the child-vnode to remove",
                    "type": "Vnode"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 10193,
            "description": "Replaces the current vnode at the parent.vChildNode list by `newVNode`\n\nDoes NOT sync with the dom.",
            "itemtype": "method",
            "name": "_replaceAtParent",
            "params": [
                {
                    "name": "newVNode",
                    "description": "the new vnode which should take over the place of the current vnode",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 10217,
            "description": "Sets the attribute of both the vnode as well as its related dom-node.\n\nSyncs with the dom.",
            "itemtype": "method",
            "name": "_setAttr",
            "params": [
                {
                    "name": "attributeName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "the value for the attributeName",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 10273,
            "description": "Redefines the attributes of both the vnode as well as its related dom-node. The new\ndefinition replaces any previous attributes (without touching unmodified attributes).\n\nSyncs the new vnode's attributes with the dom.",
            "itemtype": "method",
            "name": "_setAttrs",
            "params": [
                {
                    "name": "newAttrs",
                    "description": "the new attributes to be set",
                    "type": "Object|Array"
                }
            ],
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 10329,
            "description": "Redefines the childNodes of both the vnode as well as its related dom-node. The new\ndefinition replaces any previous nodes. (without touching unmodified nodes).\n\nSyncs the new vnode's childNodes with the dom.",
            "itemtype": "method",
            "name": "_setChildNodes",
            "params": [
                {
                    "name": "newVChildNodes",
                    "description": "array with vnodes which represent the new childNodes",
                    "type": "Array"
                }
            ],
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 10477,
            "description": "A hash of all the `attributes` of the vnode's representing dom-node.",
            "itemtype": "property",
            "name": "attrs",
            "type": "Object",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 10485,
            "description": "Hash with all the classes of the vnode. Every class represents a key, all values are set `true`.",
            "itemtype": "property",
            "name": "classNames",
            "type": "Object",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 10493,
            "description": "The `id` of the vnode's representing dom-node (if any).",
            "itemtype": "property",
            "name": "id",
            "type": "String",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 10501,
            "description": "Tells whether tag is a void Element. Examples are: `br`, `img` and `input`. Non-void Elements are f.e. `div` and `table`.\nFor TextNodes and CommentNodes, this property is `undefined`.",
            "itemtype": "property",
            "name": "isVoid",
            "type": "Boolean",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 10510,
            "description": "The `nodeType` of the vnode's representing dom-node (1===ElementNode, 3===TextNode, 8===CommentNode).",
            "itemtype": "property",
            "name": "nodeType",
            "type": "Number",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 10518,
            "description": "The `tag` of the vnode's representing dom-node (allways uppercase).",
            "itemtype": "property",
            "name": "tag",
            "type": "String",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 10526,
            "description": "The `content` of the vnode's representing dom-node, in case it is a TextNode or CommentNode.\nEquals dom-node.nodeValue.\n\nIs `undefined` for ElementNodes.",
            "itemtype": "property",
            "name": "text",
            "type": "String",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 10537,
            "description": "Hash with all the childNodes (vnodes). vChildNodes are any kind of vnodes (nodeType===1, 3 or 8)",
            "itemtype": "property",
            "name": "vChildNodes",
            "type": "Array",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 10545,
            "description": "The underlying `dom-node` that the vnode represents.",
            "itemtype": "property",
            "name": "domNode",
            "type": "domNode",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 10553,
            "description": "vnode's parentNode (defined as a vnode itself).",
            "itemtype": "property",
            "name": "vParent",
            "type": "vnode",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 10562,
            "description": "Gets or sets the innerHTML of both the vnode as well as the representing dom-node.\n\nThe setter syncs with the DOM.",
            "itemtype": "property",
            "name": "innerHTML",
            "type": "String",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 10600,
            "description": "Gets or sets the innerHTML of both the vnode as well as the representing dom-node.\n\nThe setter syncs with the DOM.",
            "itemtype": "property",
            "name": "nodeValue",
            "type": "String",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 10624,
            "description": "Gets or sets the outerHTML of both the vnode as well as the representing dom-node.\n\nThe setter syncs with the DOM.",
            "itemtype": "property",
            "name": "outerHTML",
            "type": "String",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 10721,
            "description": "Gets or sets the innerContent of the Node as plain text.\n\nThe setter syncs with the DOM.",
            "itemtype": "property",
            "name": "textContent",
            "type": "String",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 10760,
            "description": "Hash with all the children (vnodes). vChildren are vnodes that have a representing dom-node that is an HtmlElement (nodeType===1)",
            "itemtype": "property",
            "name": "vChildren",
            "type": "Array",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 10785,
            "description": "Reference to the first of sibbling vNode's, where the related dom-node is either an Element, TextNode or CommentNode (nodeType===1, 3 or 8).",
            "itemtype": "property",
            "name": "vFirst",
            "type": "vnode",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 10802,
            "description": "Reference to the first vChildNode, where the related dom-node is either an Element, TextNode or CommentNode (nodeType===1, 3 or 8).",
            "itemtype": "property",
            "name": "vFirstChild",
            "type": "vnode",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 10815,
            "description": "Reference to the first of sibbling vNode's, where the related dom-node is an Element(nodeType===1).",
            "itemtype": "property",
            "name": "vFirstElement",
            "type": "vnode",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 10832,
            "description": "Reference to the first vChild, where the related dom-node an Element (nodeType===1).",
            "itemtype": "property",
            "name": "vFirstElementChild",
            "type": "vnode",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 10845,
            "description": "Reference to the last of sibbling vNode's, where the related dom-node is either an Element, TextNode or CommentNode (nodeType===1, 3 or 8).",
            "itemtype": "property",
            "name": "vLast",
            "type": "vnode",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 10862,
            "description": "Reference to the last vChildNode, where the related dom-node is either an Element, TextNode or CommentNode (nodeType===1, 3 or 8).",
            "itemtype": "property",
            "name": "vLastChild",
            "type": "vnode",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 10876,
            "description": "Reference to the last of sibbling vNode's, where the related dom-node is an Element(nodeType===1).",
            "itemtype": "property",
            "name": "vLastElement",
            "type": "vnode",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 10893,
            "description": "Reference to the last vChild, where the related dom-node an Element (nodeType===1).",
            "itemtype": "property",
            "name": "vLastElementChild",
            "type": "vnode",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 10907,
            "description": "the Parent vnode",
            "itemtype": "property",
            "name": "vParent",
            "type": "vnode",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 10915,
            "description": "Reference to the next of sibbling vNode's, where the related dom-node is either an Element, TextNode or CommentNode (nodeType===1, 3 or 8).",
            "itemtype": "property",
            "name": "vNext",
            "type": "vnode",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 10928,
            "description": "Reference to the next of sibbling vNode's, where the related dom-node is an Element(nodeType===1).",
            "itemtype": "property",
            "name": "vNextElement",
            "type": "vnode",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 10941,
            "description": "Reference to the previous of sibbling vNode's, where the related dom-node is either an Element, TextNode or CommentNode (nodeType===1, 3 or 8).",
            "itemtype": "property",
            "name": "vPrevious",
            "type": "vnode",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 10954,
            "description": "Reference to the previous of sibbling vNode's, where the related dom-node is an Element(nodeType===1).",
            "itemtype": "property",
            "name": "vPreviousElement",
            "type": "vnode",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 11083,
            "description": "+ContentHandler+ErrorHandler\n+LexicalHandler+EntityResolver2\n-DeclHandler-DTDHandler \n\nDefaultHandler:EntityResolver, DTDHandler, ContentHandler, ErrorHandler\nDefaultHandler2:DefaultHandler,LexicalHandler, DeclHandler, EntityResolver2",
            "link": "http://www.saxproject.org/apidoc/org/xml/sax/helpers/DefaultHandler.html",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 11099,
            "see": [
                "org.xml.sax.ContentHandler#startDocument"
            ],
            "link": "http://www.saxproject.org/apidoc/org/xml/sax/ContentHandler.html",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 11194,
            "see": [
                "org.xml.sax.ErrorHandler"
            ],
            "link": "http://www.saxproject.org/apidoc/org/xml/sax/ErrorHandler.html",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 11289,
            "description": "^\\w+\\.prototype\\.([_\\w]+)\\s*=\\s*((?:.*\\{\\s*?[\\r\\n][\\s\\S]*?^})|\\S.*?(?=[;\\r\\n]));?\n^\\w+\\.prototype\\.([_\\w]+)\\s*=\\s*(\\S.*?(?=[;\\r\\n]));?",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 11365,
            "see": [
                "http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-536297177\nThe NodeList interface provides the abstraction of an ordered collection of nodes",
                "without defining or constraining how this collection is implemented. NodeList objects in the DOM are live.\nThe items in the NodeList are accessible via an integral index",
                "starting from 0."
            ],
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 11373,
            "description": "The number of nodes in the list. The range of valid child node indices is 0 to length-1 inclusive.",
            "standard": "level1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 11378,
            "description": "Returns the indexth item in the collection. If index is greater than or equal to the number of nodes in the list, this returns null.",
            "standard": "level1",
            "params": [
                {
                    "name": "index",
                    "description": "unsigned long \n  Index into the collection."
                }
            ],
            "return": {
                "description": "Node\n\tThe node at the indexth position in the NodeList, or null if that is not a valid index."
            },
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 11411,
            "description": "Objects implementing the NamedNodeMap interface are used to represent collections of nodes that can be accessed by name. Note that NamedNodeMap does not inherit from NodeList; NamedNodeMaps are not maintained in any particular order. Objects contained in an object implementing NamedNodeMap may also be accessed by an ordinal index, but this is simply to allow convenient enumeration of the contents of a NamedNodeMap, and does not imply that the DOM specifies an order to these Nodes.\n NamedNodeMap objects in the DOM are live.\n used for attributes or DocumentType entities",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 11522,
            "see": [
                "http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-102161490"
            ],
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 11576,
            "see": [
                "http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-1950641247"
            ],
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 11691,
            "params": [
                {
                    "name": "callback",
                    "description": "return true for continue,false for break"
                }
            ],
            "return": {
                "description": "boolean true: break visit;"
            },
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 11746,
            "description": "attributes;\nchildren;\n\nwriteable properties:\nnodeValue,Attr:value,CharacterData:data\nprefix",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 11770,
            "description": "preformance key(refChild == null)",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 12594,
            "see": [
                "#appendElement(source",
                "elStartEnd",
                "el",
                "selfClosed",
                "entityReplacer",
                "domBuilder",
                "parseStack);"
            ],
            "return": {
                "description": "end of the elementStartPart(end of elementEndPart for selfClosed el)"
            },
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 12755,
            "return": {
                "description": "end of the elementStartPart(end of elementEndPart for selfClosed el)"
            },
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 12929,
            "params": [
                {
                    "name": "source",
                    "description": ""
                }
            ],
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 13018,
            "license": "Copyright (c) 2014 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 14014,
            "description": "If `TYPED_ARRAY_SUPPORT`:\n  === true    Use Uint8Array implementation (fastest)\n  === false   Use Object implementation (most compatible, even IE6)\n\nBrowsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\nOpera 11.6+, iOS 4.2+.\n\nNote:\n\n- Implementation must support adding new properties to `Uint8Array` instances.\n  Firefox 4-29 lacked support, fixed in Firefox 30+.\n  See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n\n - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n\n - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n   incorrect length in some situations.\n\nWe detect these buggy browsers and set `TYPED_ARRAY_SUPPORT` to `false` so they will\nget the Object implementation, which is slower but will work correctly.",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 14049,
            "description": "Class: Buffer\n=============\n\nThe Buffer constructor returns instances of `Uint8Array` that are augmented\nwith function properties for all the node `Buffer` API functions. We use\n`Uint8Array` so that square bracket notation works as expected -- it returns\na single octet.\n\nBy augmenting the instances, we can avoid modifying the `Uint8Array`\nprototype.",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 14962,
            "description": "Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.\nAdded in Node 0.12. Only available in browsers that support ArrayBuffer.",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 14987,
            "description": "Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 16314,
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 16323,
            "description": "The `punycode` object.",
            "name": "punycode",
            "type": "Object",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 16330,
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 16333,
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 16343,
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 16348,
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 16355,
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 16360,
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 16365,
            "description": "A generic error utility function.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "type",
                    "description": "The error type.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Throws a `RangeError` with the applicable error message.",
                "type": "Error"
            },
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 16375,
            "description": "A generic `Array#map` utility function.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "array",
                    "description": "The array to iterate over.",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function that gets called for every array\nitem.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A new array of values returned by the callback function.",
                "type": "Array"
            },
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 16391,
            "description": "A simple `Array#map`-like wrapper to work with domain name strings.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "domain",
                    "description": "The domain name.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function that gets called for every\ncharacter.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A new string of characters returned by the callback\nfunction.",
                "type": "Array"
            },
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 16404,
            "description": "Creates an array containing the numeric code points of each Unicode\ncharacter in the string. While JavaScript uses UCS-2 internally,\nthis function will convert a pair of surrogate halves (each of which\nUCS-2 exposes as separate characters) into a single code point,\nmatching UTF-16.",
            "see": [
                "`punycode.ucs2.encode`",
                "<http://mathiasbynens.be/notes/javascript-encoding>"
            ],
            "memberof": "punycode.ucs2",
            "name": "decode",
            "params": [
                {
                    "name": "string",
                    "description": "The Unicode input string (UCS-2).",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The new array of code points.",
                "type": "Array"
            },
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 16443,
            "description": "Creates a string based on an array of numeric code points.",
            "see": [
                "`punycode.ucs2.decode`"
            ],
            "memberof": "punycode.ucs2",
            "name": "encode",
            "params": [
                {
                    "name": "codePoints",
                    "description": "The array of numeric code points.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The new Unicode string (UCS-2).",
                "type": "String"
            },
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 16464,
            "description": "Converts a basic code point into a digit/integer.",
            "see": [
                "`digitToBasic()`"
            ],
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "codePoint",
                    "description": "The basic numeric code point value.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The numeric value of a basic code point (for use in\nrepresenting integers) in the range `0` to `base - 1`, or `base` if\nthe code point does not represent a value.",
                "type": "Number"
            },
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 16486,
            "description": "Converts a digit/integer into a basic code point.",
            "see": [
                "`basicToDigit()`"
            ],
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "digit",
                    "description": "The numeric value of a basic code point.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The basic code point whose value (when used for\nrepresenting integers) is `digit`, which needs to be in the range\n`0` to `base - 1`. If `flag` is non-zero, the uppercase form is\nused; else, the lowercase form is used. The behavior is undefined\nif `flag` is non-zero and `digit` has no uppercase form.",
                "type": "Number"
            },
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 16503,
            "description": "Bias adaptation function as per section 3.4 of RFC 3492.\nhttp://tools.ietf.org/html/rfc3492#section-3.4",
            "access": "private",
            "tagname": "",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 16518,
            "description": "Converts a Punycode string of ASCII-only symbols to a string of Unicode\nsymbols.",
            "memberof": "punycode",
            "params": [
                {
                    "name": "input",
                    "description": "The Punycode string of ASCII-only symbols.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The resulting string of Unicode symbols.",
                "type": "String"
            },
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 16541,
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 16619,
            "description": "Converts a string of Unicode symbols to a Punycode string of ASCII-only\nsymbols.",
            "memberof": "punycode",
            "params": [
                {
                    "name": "input",
                    "description": "The string of Unicode symbols.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The resulting Punycode string of ASCII-only symbols.",
                "type": "String"
            },
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 16639,
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 16641,
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 16733,
            "description": "Converts a Punycode string representing a domain name to Unicode. Only the\nPunycoded parts of the domain name will be converted, i.e. it doesn't\nmatter if you call it on a string that has already been converted to\nUnicode.",
            "memberof": "punycode",
            "params": [
                {
                    "name": "domain",
                    "description": "The Punycode domain name to convert to Unicode.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The Unicode representation of the given Punycode\nstring.",
                "type": "String"
            },
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 16751,
            "description": "Converts a Unicode string representing a domain name to Punycode. Only the\nnon-ASCII parts of the domain name will be converted, i.e. it doesn't\nmatter if you call it with a domain that's already in ASCII.",
            "memberof": "punycode",
            "params": [
                {
                    "name": "domain",
                    "description": "The domain name to convert, as a Unicode string.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The Punycode representation of the given domain name.",
                "type": "String"
            },
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 16769,
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 16771,
            "description": "A string representing the current Punycode.js version number.",
            "memberof": "punycode",
            "type": "String",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 16777,
            "description": "An object of methods to convert from JavaScript's internal character\nrepresentation (UCS-2) to Unicode code points, and back.",
            "see": [
                "<http://mathiasbynens.be/notes/javascript-encoding>"
            ],
            "memberof": "punycode",
            "type": "Object",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 16794,
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 20001,
            "description": "Echos the value of a value. Trys to print the value out\nin the best way possible given the different types.",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to print out.",
                    "type": "Object"
                },
                {
                    "name": "opts",
                    "description": "Optional options object that alters the output.",
                    "type": "Object"
                }
            ],
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site/dist/itagsbuild.js",
            "line": 20441,
            "description": "Inherit the prototype methods from one constructor into another.\n\nThe Function.prototype.inherits from lang.js rewritten as a standalone\nfunction (not on Function.prototype). NOTE: If this file is to be loaded\nduring bootstrapping this function needs to be rewritten using some native\nfunctions as prototype setup using normal JavaScript does not work as\nexpected during bootstrapping (see mirror.js in r114903).",
            "params": [
                {
                    "name": "ctor",
                    "description": "Constructor function which needs to inherit the\n    prototype.",
                    "type": "Function"
                },
                {
                    "name": "superCtor",
                    "description": "Constructor function to inherit prototype from.",
                    "type": "Function"
                }
            ],
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 44,
            "description": "Wrapper for built-in http.js to emulate the browser XMLHttpRequest object.\n\nThis can be used with JS designed for browsers to improve reuse of code and\nallow the use of existing libraries.\n\nUsage: include(\"XMLHttpRequest.js\") and use XMLHttpRequest per W3C specs.",
            "author": "Dan DeFelippi <dan@driverdan.com>",
            "contributor": "David Ellis <d.f.ellis@ieee.org>",
            "license": "MIT",
            "class": "window",
            "module": "itsa.build"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 63,
            "description": "Private variables",
            "class": "window",
            "module": "itsa.build"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 130,
            "description": "Constants",
            "class": "window",
            "module": "itsa.build"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 140,
            "description": "Public vars",
            "class": "window",
            "module": "itsa.build"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 156,
            "description": "Private methods",
            "class": "window",
            "module": "itsa.build"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 164,
            "description": "Check if the specified header is allowed.",
            "params": [
                {
                    "name": "string",
                    "description": "header Header to validate"
                }
            ],
            "return": {
                "description": "boolean False if not allowed, otherwise true"
            },
            "class": "window",
            "module": "itsa.build"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 174,
            "description": "Check if the specified method is allowed.",
            "params": [
                {
                    "name": "string",
                    "description": "method Request method to validate"
                }
            ],
            "return": {
                "description": "boolean False if not allowed, otherwise true"
            },
            "class": "window",
            "module": "itsa.build"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 184,
            "description": "Public methods",
            "class": "window",
            "module": "itsa.build"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 188,
            "description": "Open the connection. Currently supports local server requests.",
            "params": [
                {
                    "name": "string",
                    "description": "method Connection method (eg GET, POST)"
                },
                {
                    "name": "string",
                    "description": "url URL for the connection."
                },
                {
                    "name": "boolean",
                    "description": "async Asynchronous connection. Default is true."
                },
                {
                    "name": "string",
                    "description": "user Username for basic authentication (optional)"
                },
                {
                    "name": "string",
                    "description": "password Password for basic authentication (optional)"
                }
            ],
            "class": "window",
            "module": "itsa.build"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 217,
            "description": "Disables or enables isAllowedHttpHeader() check the request. Enabled by default.\nThis does not conform to the W3C spec.",
            "params": [
                {
                    "name": "boolean",
                    "description": "state Enable or disable header checking."
                }
            ],
            "class": "window",
            "module": "itsa.build"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 227,
            "description": "Sets a header for the request.",
            "params": [
                {
                    "name": "string",
                    "description": "header Header name"
                },
                {
                    "name": "string",
                    "description": "value Header value"
                }
            ],
            "class": "window",
            "module": "itsa.build"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 247,
            "description": "Gets a header from the server response.",
            "params": [
                {
                    "name": "string",
                    "description": "header Name of header to get."
                }
            ],
            "return": {
                "description": "string Text of the header or null if it doesn't exist."
            },
            "class": "window",
            "module": "itsa.build"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 261,
            "description": "Gets all the response headers.",
            "return": {
                "description": "string A string with all response headers separated by CR+LF"
            },
            "class": "window",
            "module": "itsa.build"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 281,
            "description": "Gets a request header",
            "params": [
                {
                    "name": "string",
                    "description": "name Name of header to get"
                }
            ],
            "return": {
                "description": "string Returns the request header or empty string if not set"
            },
            "class": "window",
            "module": "itsa.build"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 296,
            "description": "Sends the request to the server.",
            "params": [
                {
                    "name": "string",
                    "description": "data Optional data to send as request body."
                }
            ],
            "class": "window",
            "module": "itsa.build"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 556,
            "description": "Called when an error is encountered to deal with it.",
            "class": "window",
            "module": "itsa.build"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 567,
            "description": "Aborts a request.",
            "class": "window",
            "module": "itsa.build"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 589,
            "description": "Adds an event listener. Preferred method of binding to events.",
            "class": "window",
            "module": "itsa.build"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 600,
            "description": "Remove an event callback that has already been bound.\nOnly works on the matching funciton, cannot be a copy.",
            "class": "window",
            "module": "itsa.build"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 613,
            "description": "Dispatch any events, including both \"on\" methods and events attached using addEventListener.",
            "class": "window",
            "module": "itsa.build"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 627,
            "description": "Changes readyState and calls onreadystatechange.",
            "params": [
                {
                    "name": "int",
                    "description": "state New state"
                }
            ],
            "class": "window",
            "module": "itsa.build"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 916,
            "description": "Checks whether an item is inside the Array.\nAlias for (array.indexOf(item) > -1)",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "item",
                    "description": "the item to seek",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "whether the item is part of the Array",
                "type": "Boolean"
            },
            "class": "Array",
            "module": "js-ext",
            "submodule": "lib/array.js"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 928,
            "description": "Removes an item from the array",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "item",
                    "description": "the item (or an hash of items) to be removed",
                    "type": "Any|Array"
                },
                {
                    "name": "arrayItem",
                    "description": "whether `item` is an arrayItem that should be treated as a single item to be removed\n       You need to set `arrayItem=true` in those cases. Otherwise, all single items from `item` are removed separately.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "chainable": 1,
            "class": "Array",
            "module": "js-ext",
            "submodule": "lib/array.js"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 952,
            "description": "Replaces an item in the array. If the previous item is not part of the array, the new item is appended.",
            "itemtype": "method",
            "name": "replace",
            "params": [
                {
                    "name": "prevItem",
                    "description": "the item to be replaced",
                    "type": "Any"
                },
                {
                    "name": "newItem",
                    "description": "the item to be added",
                    "type": "Any"
                }
            ],
            "chainable": 1,
            "class": "Array",
            "module": "js-ext",
            "submodule": "lib/array.js"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 967,
            "description": "Inserts an item in the array at the specified position. If index is larger than array.length, the new item(s) will be appended.",
            "itemtype": "method",
            "name": "insertAt",
            "params": [
                {
                    "name": "item",
                    "description": "the item to be replaced, may be an Array of items",
                    "type": "Any|Array"
                },
                {
                    "name": "index",
                    "description": "the position where to add the item(s). When larger than Array.length, the item(s) will be appended.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "Array",
            "module": "js-ext",
            "submodule": "lib/array.js"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 980,
            "description": "Shuffles the items in the Array randomly",
            "itemtype": "method",
            "name": "shuffle",
            "chainable": 1,
            "class": "Array",
            "module": "js-ext",
            "submodule": "lib/array.js"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 1006,
            "description": "Returns a deep copy of the Array.\nOnly handles members of primary types, Dates, Arrays and Objects.",
            "itemtype": "method",
            "name": "deepClone",
            "return": {
                "description": "deep-copy of the original",
                "type": "Array"
            },
            "class": "Array",
            "module": "js-ext",
            "submodule": "lib/array.js"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 1171,
            "description": "Loops through all properties in the object.  Equivalent to Array.forEach.\nThe callback is provided with the value of the property, the name of the property\nand a reference to the whole object itself.\nThe context to run the callback in can be overriden, otherwise it is undefined.",
            "itemtype": "method",
            "name": "each",
            "params": [
                {
                    "name": "fn",
                    "description": "Function to be executed on each item in the object.  It will receive\n                     value {any} value of the property\n                     key {string} name of the property\n                     obj {Object} the whole of the object",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "class": "Object",
            "module": "js-ext",
            "submodule": "lib/object.js"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 1197,
            "description": "Loops through the properties in an object until the callback function returns *truish*.\nThe callback is provided with the value of the property, the name of the property\nand a reference to the whole object itself.\nThe order in which the elements are visited is not predictable.\nThe context to run the callback in can be overriden, otherwise it is undefined.",
            "itemtype": "method",
            "name": "some",
            "params": [
                {
                    "name": "fn",
                    "description": "Function to be executed on each item in the object.  It will receive\n                     value {any} value of the property\n                     key {string} name of the property\n                     obj {Object} the whole of the object",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "true if the loop was interrupted by the callback function returning *truish*.",
                "type": "Boolean"
            },
            "class": "Object",
            "module": "js-ext",
            "submodule": "lib/object.js"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 1225,
            "description": "Loops through the properties in an object until the callback assembling a new object\nwith its properties set to the values returned by the callback function.\nIf the callback function returns `undefined` the property will not be copied to the new object.\nThe resulting object will have the same keys as the original, except for those where the callback\nreturned `undefined` which will have dissapeared.\nThe callback is provided with the value of the property, the name of the property\nand a reference to the whole object itself.\nThe context to run the callback in can be overriden, otherwise it is undefined.",
            "itemtype": "method",
            "name": "map",
            "params": [
                {
                    "name": "fn",
                    "description": "Function to be executed on each item in the object.  It will receive\n                     value {any} value of the property\n                     key {string} name of the property\n                     obj {Object} the whole of the object",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The new object with its properties set to the values returned by the callback function.",
                "type": "Object"
            },
            "class": "Object",
            "module": "js-ext",
            "submodule": "lib/object.js"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 1257,
            "description": "Returns the keys of the object.",
            "itemtype": "method",
            "name": "keys",
            "return": {
                "description": "Keys of the object",
                "type": "Array"
            },
            "class": "Object",
            "module": "js-ext",
            "submodule": "lib/object.js"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 1266,
            "description": "Returns the number of keys of the object",
            "itemtype": "method",
            "name": "size",
            "return": {
                "description": "Number of items",
                "type": "Number"
            },
            "class": "Object",
            "module": "js-ext",
            "submodule": "lib/object.js"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 1275,
            "description": "Loops through the object collection the values of all its properties.\nIt is the counterpart of the [`keys`](#method_keys).",
            "itemtype": "method",
            "name": "values",
            "return": {
                "description": "values of the object",
                "type": "Array"
            },
            "class": "Object",
            "module": "js-ext",
            "submodule": "lib/object.js"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 1295,
            "description": "Returns true if the object has no own members",
            "itemtype": "method",
            "name": "isEmpty",
            "return": {
                "description": "true if the object is empty",
                "type": "Boolean"
            },
            "class": "Object",
            "module": "js-ext",
            "submodule": "lib/object.js"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 1308,
            "description": "Creates a protected property on the object.",
            "itemtype": "method",
            "name": "protectedProp",
            "chainable": 1,
            "class": "Object",
            "module": "js-ext",
            "submodule": "lib/object.js"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 1324,
            "description": "Returns a shallow copy of the object.\nIt does not clone objects within the object, it does a simple, shallow clone.\nFast, mostly useful for plain hash maps.",
            "itemtype": "method",
            "name": "shallowClone",
            "return": {
                "description": "shallow copy of the original",
                "type": "Object"
            },
            "class": "Object",
            "module": "js-ext",
            "submodule": "lib/object.js"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 1345,
            "description": "Compares this object with the reference-object whether they have the same value.\nNot by reference, but their content as simple types.\n\nCompares both JSON.stringify objects",
            "itemtype": "method",
            "name": "sameValue",
            "params": [
                {
                    "name": "refObj",
                    "description": "the object to compare with",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "whether both objects have the same value",
                "type": "Boolean"
            },
            "class": "Object",
            "module": "js-ext",
            "submodule": "lib/object.js"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 1359,
            "description": "Returns a deep copy of the object.\nOnly handles members of primary types, Dates, Arrays and Objects.",
            "itemtype": "method",
            "name": "deepClone",
            "return": {
                "description": "deep-copy of the original",
                "type": "Object"
            },
            "class": "Object",
            "module": "js-ext",
            "submodule": "lib/object.js"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 1381,
            "description": "Transforms the object into an array with  'key/value' objects",
            "example": [
                "\n{country: 'USA', Continent: 'North America'} --> [{key: 'country', value: 'USA'}, {key: 'Continent', value: 'North America'}]"
            ],
            "itemtype": "method",
            "name": "toArray",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "key",
                            "description": "to overrule the default `key`-property-name",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "value",
                            "description": "to overrule the default `value`-property-name",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "the transformed Array-representation of the object",
                "type": "Array"
            },
            "class": "Object",
            "module": "js-ext",
            "submodule": "lib/object.js"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 1406,
            "description": "Merges into this object the properties of the given object.\nIf the second argument is true, the properties on the source object will be overwritten\nby those of the second object of the same name, otherwise, they are preserved.",
            "itemtype": "method",
            "name": "merge",
            "params": [
                {
                    "name": "obj",
                    "description": "Object with the properties to be added to the original object",
                    "type": "Object"
                },
                {
                    "name": "force",
                    "description": "If true, the properties in `obj` will override those of the same name\n       in the original object",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "Object",
            "module": "js-ext",
            "submodule": "lib/object.js"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 1429,
            "description": "Returns true if the item is an object, but no Array, Function, RegExp, Date or Error object",
            "itemtype": "method",
            "name": "isObject",
            "return": {
                "description": "true if the object is empty",
                "type": "Boolean"
            },
            "class": "Object",
            "module": "js-ext",
            "submodule": "lib/object.js"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 1439,
            "description": "Returns a new object resulting of merging the properties of the given objects.\nThe copying is shallow, complex properties will reference the very same object.\nProperties in later objects do **not overwrite** properties of the same name in earlier objects.\nIf any of the objects is missing, it will be skiped.",
            "example": [
                "\n\n var foo = function (config) {\n      config = Object.merge(config, defaultConfig);\n }"
            ],
            "itemtype": "method",
            "name": "merge",
            "static": 1,
            "params": [
                {
                    "name": "obj",
                    "description": "Objects whose properties are to be merged",
                    "type": "Object",
                    "multiple": true
                }
            ],
            "return": {
                "description": "new object with the properties merged in.",
                "type": "Object"
            },
            "class": "Object",
            "module": "js-ext",
            "submodule": "lib/object.js"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 1486,
            "description": "Promise which can be put at the very end of a chain, even after .catch().\nWill invoke the callback function regardless whether the chain resolves or rejects.\n\nThe argument of the callback will be either its fulfilled or rejected argument, but\nit is wisely not to handle it. The results should have been handled in an earlier step\nof the chain: .finally() basicly means you want to execute code after the chain, regardless\nwhether it's resolved or rejected.\n\n**Note:** .finally() <u>does not return a Promise</u>: it should be used as the very last step of a Promisechain.\nIf you need an intermediate method, you should take .thenFulfill().",
            "itemtype": "method",
            "name": "finally",
            "params": [
                {
                    "name": "finallyback",
                    "description": "the callbackfunctio to be invoked.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Promise",
            "module": "js-ext",
            "submodule": "lib/promise.s"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 1507,
            "description": "Will always return a fulfilled Promise.\n\nTypical usage will be by making it part of a Promisechain: it makes the chain go\ninto its fulfilled phase.",
            "example": [
                "\n\npromise1\n.then(promise2)\n.thenFulfill()\n.then(handleFulfilled, handleRejected) // handleFulfilled always gets invoked"
            ],
            "itemtype": "method",
            "name": "thenFulfill",
            "params": [
                {
                    "name": "response",
                    "description": "parameter to pass through which overrules the original Promise-response.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Resolved Promise. `response` will be passed trough as parameter when set.\n        When not set: in case the original Promise resolved, its parameter is passed through.\n        in case of a rejection, no parameter will be passed through.",
                "type": "Promise"
            },
            "class": "Promise",
            "module": "js-ext",
            "submodule": "lib/promise.s"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 1538,
            "description": "Returns a Promise that always fulfills. It is fulfilled when ALL items are resolved (either fulfilled\nor rejected). This is useful for waiting for the resolution of multiple\npromises, such as reading multiple files in Node.js or making multiple XHR\nrequests in the browser. Because -on the contrary of `Promise.all`- **finishAll** waits until\nall single Promises are resolved, you can handle all promises, even if some gets rejected.",
            "itemtype": "method",
            "name": "finishAll",
            "params": [
                {
                    "name": "items",
                    "description": "an array of any kind of items, promises or not. If a value is not a promise,\nits transformed into a resolved promise.",
                    "type": "Any[]"
                }
            ],
            "return": {
                "description": "A promise for an array of all the fulfillment items:\n<ul>\n    <li>Fulfilled: o {Object}\n        <ul>\n            <li>fulfilled {Array} all fulfilled responses, any item that was rejected will have a value of `undefined`</li>\n            <li>rejected {Array} all rejected responses, any item that was fulfilled will have a value of `undefined`</li>\n        </ul>\n    </li>\n    <li>Rejected: this promise **never** rejects</li>\n</ul>",
                "type": "Promise"
            },
            "static": 1,
            "class": "Promise",
            "module": "js-ext",
            "submodule": "lib/promise.s"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 1602,
            "description": "Returns a Promise which chains the function-calls. Like an automated Promise-chain.\nInvokes the functionreferences in a chain. You MUST supply function-references, it doesn't\nmatter wheter these functions return a Promise or not. Any returnvalues are passed through to\nthe next function.\n\n**Cautious:** you need to pass function-references, not invoke them!\nchainFns will invoke them when the time is ready. Regarding to this, there is a difference with\nusing Promise.all() where you should pass invoked Promises.\n\nIf one of the functions returns a Promise, the chain\nwill wait its execution for this function to be resolved.\n\nIf you need specific context or arguments: use Function.bind for these items.\nIf one of the items returns a rejected Promise, by default: the whole chain rejects\nand following functions in the chain will not be invoked. When `finishAll` is set `true`\nthe chain will always continue even with rejected Promises.\n\nReturning functionvalues are passed through the chain adding them as an extra argument\nto the next function in the chain (argument is added on the right)",
            "example": [
                "\n    var a = [], p1, p2, p3;\n    p1 = function(a) {\n        return new Promise(function(resolve, reject) {\n            I.later(function() {\n                console.log('resolving promise p1: '+a);\n                resolve(a);\n            }, 1000);\n        });\n    };\n    p2 = function(b, r) {\n        var value = b+r;\n        console.log('returning p2: '+value);\n        return value;\n    };\n    p3 = function(c, r) {\n        return new Promise(function(resolve, reject) {\n            I.later(function() {\n                var value = b+r;\n                console.log('resolving promise p3: '+value);\n                resolve(value);\n            }, 1000);\n        });\n    };\n    a.push(p1.bind(undefined, 100));\n    a.push(p2.bind(undefined, 200));\n    a.push(p3.bind(undefined, 300));\n    Promise.chainFns(a).then(\n        function(r) {\n            console.log('chain resolved with '+r);\n        },\n        function(err) {\n            console.log('chain-error '+err);\n        }\n    );"
            ],
            "itemtype": "method",
            "name": "chainFns",
            "params": [
                {
                    "name": "funcs",
                    "description": "an array of function-references",
                    "type": "Function[]"
                },
                {
                    "name": "finishAll",
                    "description": "to force the chain to continue, even if one of the functions\n       returns a rejected Promise",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "on success:\no {Object} returnvalue of the laste item in the Promisechain\non failure an Error object\nreason {Error}",
                "type": "Promise"
            },
            "static": 1,
            "class": "Promise",
            "module": "js-ext",
            "submodule": "lib/promise.s"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 1694,
            "description": "Returns a Promise with 4 additional methods:\n\npromise.fulfill\npromise.reject\npromise.callback\npromise.setCallback\n\nWith Promise.manage, you get a Promise which is managable from outside, not inside as Promise A+ work.\nYou can invoke promise.**callback**() which will invoke the original passed-in callbackFn - if any.\npromise.**fulfill**() and promise.**reject**() are meant to resolve the promise from outside, just like deferred can do.",
            "example": [
                "\n    var promise = Promise.manage(\n        function(msg) {\n            alert(msg);\n        }\n    );\n\n    promise.then(\n        function() {\n            // promise is fulfilled, no further actions can be taken\n        }\n    );\n\n    setTimeout(function() {\n        promise.callback('hey, I\\'m still busy');\n    }, 1000);\n\n    setTimeout(function() {\n        promise.fulfill();\n    }, 2000);"
            ],
            "itemtype": "method",
            "name": "manage",
            "params": [
                {
                    "name": "callbackFn",
                    "description": "invoked everytime promiseinstance.callback() is called.\n       You may as weel (re)set this method atny time lare by using promise.setCallback()",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "with three handles: fulfill, reject and callback.",
                "type": "Promise"
            },
            "static": 1,
            "class": "Promise",
            "module": "js-ext",
            "submodule": "lib/promise.s"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 1804,
            "description": "Checks whether the substring is part if this String.\nAlias for (String.indexOf(substring) > -1)",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "substring",
                    "description": "the substring to test for",
                    "type": "String"
                },
                {
                    "name": "caseInsensitive",
                    "description": "whether to ignore case-sensivity",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "whether the substring is found",
                "type": "Boolean"
            },
            "class": "String",
            "module": "js-ext",
            "submodule": "lib/string.js"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 1817,
            "description": "Checks if the string ends with the value specified by `test`",
            "itemtype": "method",
            "name": "endsWith",
            "params": [
                {
                    "name": "test",
                    "description": "the string to test for",
                    "type": "String"
                },
                {
                    "name": "caseInsensitive",
                    "description": "whether to ignore case-sensivity",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "whether the string ends with `test`",
                "type": "Boolean"
            },
            "class": "String",
            "module": "js-ext",
            "submodule": "lib/string.js"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 1829,
            "description": "Checks if the string can be parsed into a number when using `parseInt()`",
            "itemtype": "method",
            "name": "parsable",
            "return": {
                "description": "whether the string is parsable",
                "type": "Boolean"
            },
            "class": "String",
            "module": "js-ext",
            "submodule": "lib/string.js"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 1842,
            "description": "Checks if the string starts with the value specified by `test`",
            "itemtype": "method",
            "name": "startsWith",
            "params": [
                {
                    "name": "test",
                    "description": "the string to test for",
                    "type": "String"
                },
                {
                    "name": "caseInsensitive",
                    "description": "whether to ignore case-sensivity",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "whether the string starts with `test`",
                "type": "Boolean"
            },
            "class": "String",
            "module": "js-ext",
            "submodule": "lib/string.js"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 1854,
            "description": "Performs `{placeholder}` substitution on a string. The object passed\nprovides values to replace the `{placeholder}`s.\n`{placeholder}` token names must match property names of the object.\n\n`{placeholder}` tokens that are undefined on the object map will be removed.",
            "example": [
                "\nvar greeting = '{message} {who}!';\ngreeting.substitute({message: 'Hello'}); // results into 'Hello !'"
            ],
            "itemtype": "method",
            "name": "substitute",
            "params": [
                {
                    "name": "obj",
                    "description": "Object containing replacement values.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the substitute result.",
                "type": "String"
            },
            "class": "String",
            "module": "js-ext",
            "submodule": "lib/string.js"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 1875,
            "description": "Returns a ISO-8601 Date-object build by the String's value.\nIf the String-value doesn't match ISO-8601, `null` will be returned.\n\nISO-8601 Date's are generated by JSON.stringify(), so it's very handy to be able to reconvert them.",
            "example": [
                "\nvar birthday = '2010-02-10T14:45:30.000Z';\nbirthday.toDate(); // --> Wed Feb 10 2010 15:45:30 GMT+0100 (CET)"
            ],
            "itemtype": "method",
            "name": "toDate",
            "return": {
                "description": "the Date represented by the String's value or null when invalid",
                "type": "Date|null"
            },
            "class": "String",
            "module": "js-ext",
            "submodule": "lib/string.js"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 1892,
            "description": "Generated the string without any white-spaces at the start or end.",
            "itemtype": "method",
            "name": "trim",
            "return": {
                "description": "new String without leading and trailing white-spaces",
                "type": "String"
            },
            "class": "String",
            "module": "js-ext",
            "submodule": "lib/string.js"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 1902,
            "description": "Generated the string without any white-spaces at the beginning.",
            "itemtype": "method",
            "name": "trimLeft",
            "return": {
                "description": "new String without leading white-spaces",
                "type": "String"
            },
            "class": "String",
            "module": "js-ext",
            "submodule": "lib/string.js"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 1912,
            "description": "Generated the string without any white-spaces at the end.",
            "itemtype": "method",
            "name": "trimRight",
            "return": {
                "description": "new String without trailing white-spaces",
                "type": "String"
            },
            "class": "String",
            "module": "js-ext",
            "submodule": "lib/string.js"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 1922,
            "description": "Validates if the String's value represents a valid emailaddress.",
            "itemtype": "method",
            "name": "validateEmail",
            "return": {
                "description": "whether the String's value is a valid emailaddress.",
                "type": "Boolean"
            },
            "class": "String",
            "module": "js-ext",
            "submodule": "lib/string.js"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 1932,
            "description": "Validates if the String's value represents a valid floated number.",
            "itemtype": "method",
            "name": "validateFloat",
            "params": [
                {
                    "name": "comma",
                    "description": "whether to use a comma as decimal separator instead of a dot",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "whether the String's value is a valid floated number.",
                "type": "Boolean"
            },
            "class": "String",
            "module": "js-ext",
            "submodule": "lib/string.js"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 1943,
            "description": "Validates if the String's value represents a hexadecimal color.",
            "itemtype": "method",
            "name": "validateHexaColor",
            "params": [
                {
                    "name": "alpha",
                    "description": "whether to accept alpha transparancy",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "whether the String's value is a valid hexadecimal color.",
                "type": "Boolean"
            },
            "class": "String",
            "module": "js-ext",
            "submodule": "lib/string.js"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 1954,
            "description": "Validates if the String's value represents a valid integer number.",
            "itemtype": "method",
            "name": "validateNumber",
            "return": {
                "description": "whether the String's value is a valid integer number.",
                "type": "Boolean"
            },
            "class": "String",
            "module": "js-ext",
            "submodule": "lib/string.js"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 1964,
            "description": "Validates if the String's value represents a valid boolean.",
            "itemtype": "method",
            "name": "validateNumber",
            "return": {
                "description": "whether the String's value is a valid integer number.",
                "type": "Boolean"
            },
            "class": "String",
            "module": "js-ext",
            "submodule": "lib/string.js"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 1980,
            "description": "Validates if the String's value represents a valid URL.",
            "itemtype": "method",
            "name": "validateURL",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "http",
                            "description": "to force matching starting with `http://`",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "https",
                            "description": "to force matching starting with `https://`",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "whether the String's value is a valid URL.",
                "type": "Boolean"
            },
            "class": "String",
            "module": "js-ext",
            "submodule": "lib/string.js"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 2199,
            "description": "Generates an unique id with the signature: \"namespace-follownr\"",
            "example": [
                "\n\n    var generator = require('core-utils-idgenerator');\n\n    console.log(generator()); // --> 1\n    console.log(generator()); // --> 2\n    console.log(generator(1000)); // --> 1000\n    console.log(generator()); // --> 1001\n    console.log(generator('Parcel, 500')); // -->\"Parcel-500\"\n    console.log(generator('Parcel')); // -->\"Parcel-501\""
            ],
            "itemtype": "method",
            "name": "idGenerator",
            "params": [
                {
                    "name": "namespace",
                    "description": "namespace to prepend the generated id.\n       When ignored, the generator just returns a number.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "start",
                    "description": "startvalue for the next generated id. Any further generated id's will preceed this id.\n       If `start` is lower or equal than the last generated id, it will be ignored.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "an unique id. Either a number, or a String (digit prepended with \"namespace-\")",
                "type": "Number|String"
            },
            "class": "Utils",
            "module": "utils"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 2259,
            "description": "Forces a function to be run asynchronously, but as fast as possible. In Node.js\nthis is achieved using `setImmediate` or `process.nextTick`.",
            "itemtype": "method",
            "name": "_asynchronizer",
            "params": [
                {
                    "name": "callbackFn",
                    "description": "The function to call asynchronously",
                    "type": "Function"
                }
            ],
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "Utils",
            "module": "utils"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 2271,
            "description": "Invokes the callbackFn once in the next turn of the JavaScript event loop. If the function\nrequires a specific execution context or arguments, wrap it with Function.bind.\n\nI.async returns an object with a cancel method.  If the cancel method is\ncalled before the callback function, the callback function won't be called.",
            "itemtype": "method",
            "name": "async",
            "params": [
                {
                    "name": "callbackFn",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "invokeAfterFn",
                    "description": "set to false to prevent the _afterSyncFn to be invoked",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "An object with a cancel method.  If the cancel method is\ncalled before the callback function, the callback function won't be called.",
                "type": "Object"
            },
            "class": "Utils",
            "module": "utils"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 2306,
            "description": "Invokes the callbackFn once in the next turn of the JavaScript event loop. If the function\nrequires a specific execution context or arguments, wrap it with Function.bind.\n\nI.async returns an object with a cancel method.  If the cancel method is\ncalled before the callback function, the callback function won't be called.",
            "itemtype": "method",
            "name": "async",
            "params": [
                {
                    "name": "callbackFn",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "invokeAfterFn",
                    "description": "set to false to prevent the _afterSyncFn to be invoked",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "An object with a cancel method.  If the cancel method is\ncalled before the callback function, the callback function won't be called.",
                "type": "Object"
            },
            "class": "Utils",
            "module": "utils"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 2321,
            "description": "Invokes the callbackFn after a timeout (asynchronous). If the function\nrequires a specific execution context or arguments, wrap it with Function.bind.\n\nTo invoke the callback function periodic, set 'periodic' either 'true', or specify a second timeout.\nIf number, then periodic is considered 'true' but with a perdiod defined by 'periodic',\nwhich means: the first timer executes after 'timeout' and next timers after 'period'.\n\nI.later returns an object with a cancel method.  If the cancel() method is\ncalled before the callback function, the callback function won't be called.",
            "itemtype": "method",
            "name": "later",
            "params": [
                {
                    "name": "callbackFn",
                    "description": "the function to execute.",
                    "type": "Function"
                },
                {
                    "name": "timeout",
                    "description": "the number of milliseconds to wait until the callbackFn is executed.\nwhen not set, the callback function is invoked once in the next turn of the JavaScript event loop.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "periodic",
                    "description": "if true, executes continuously at supplied, if number, then periodic is considered 'true' but with a perdiod\ndefined by 'periodic', which means: the first timer executes after 'timeout' and next timers after 'period'.\nThe interval executes until canceled.",
                    "type": "Boolean|Number",
                    "optional": true
                },
                {
                    "name": "invokeAfterFn",
                    "description": "set to false to prevent the _afterSyncFn to be invoked",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "a timer object. Call the cancel() method on this object to stop the timer.",
                "type": "Object"
            },
            "class": "Utils",
            "module": "utils"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 2473,
            "description": "Gets the left-scroll offset of the window.",
            "itemtype": "method",
            "name": "getScrollLeft",
            "return": {
                "description": "left-offset in pixels",
                "type": "Number"
            },
            "since": "0.0.1",
            "class": "Utils",
            "module": "utils"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 2483,
            "description": "Gets the top-scroll offset of the window.",
            "itemtype": "method",
            "name": "getScrollTop",
            "return": {
                "description": "top-offset in pixels",
                "type": "Number"
            },
            "since": "0.0.1",
            "class": "Utils",
            "module": "utils"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 2493,
            "description": "Gets the width of the window.",
            "itemtype": "method",
            "name": "getWidth",
            "return": {
                "description": "width in pixels",
                "type": "Number"
            },
            "since": "0.0.1",
            "class": "Utils",
            "module": "utils"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 2503,
            "description": "Gets the height of the window.",
            "itemtype": "method",
            "name": "getHeight",
            "return": {
                "description": "width in pixels",
                "type": "Number"
            },
            "since": "0.0.1",
            "class": "Utils",
            "module": "utils"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 2867,
            "description": "For all vElements of the ElementArray:\nAppends a HtmlElement or text at the end of HtmlElement's innerHTML.",
            "itemtype": "method",
            "name": "append",
            "params": [
                {
                    "name": "content",
                    "description": "content to append",
                    "type": "HtmlElement|HtmlElementList|String"
                },
                {
                    "name": "escape",
                    "description": "whether to insert `escaped` content, leading it into only text inserted",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "ElementArray",
            "module": "vdom",
            "submodule": "element-array"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 2881,
            "description": "For all vElements of the ElementArray:\nSets the inline-style of the HtmlElement exactly to the specified `value`, overruling previous values.\nMaking the HtmlElement's inline-style look like: style=\"value\".\n\nThis is meant for a quick one-time setup. For individually inline style-properties to be set, you can use `setInlineStyle()`.",
            "itemtype": "method",
            "name": "defineInlineStyle",
            "params": [
                {
                    "name": "value",
                    "description": "the style string to be set",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "ElementArray",
            "module": "vdom",
            "submodule": "element-array"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 2897,
            "description": "For all vElements of the ElementArray:\nChecks whether the plugin is plugged in at ALL the HtmlElements of the NodeList/HTMLCollection.\nChecks whether all its attributes are set.",
            "itemtype": "method",
            "name": "isPlugged",
            "params": [
                {
                    "name": "pluginClass",
                    "description": "The plugin that should be plugged. Needs to be the Class, not an instance!",
                    "type": "NodePlugin"
                }
            ],
            "return": {
                "description": "whether the plugin is plugged in",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "ElementArray",
            "module": "vdom",
            "submodule": "element-array"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 2913,
            "description": "For all vElements of the ElementArray:\nPlugs in the plugin on the HtmlElement, and gives is special behaviour by setting the appropriate attributes.",
            "itemtype": "method",
            "name": "plug",
            "params": [
                {
                    "name": "pluginClass",
                    "description": "The plugin that should be plugged. Needs to be the Class, not an instance!",
                    "type": "NodePlugin"
                },
                {
                    "name": "options",
                    "description": "any options that should be passed through when the class is instantiated.",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "ElementArray",
            "module": "vdom",
            "submodule": "element-array"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 2927,
            "description": "For all vElements of the ElementArray:\nPrepends a HtmlElement or text at the start of HtmlElement's innerHTML.",
            "itemtype": "method",
            "name": "prepend",
            "params": [
                {
                    "name": "content",
                    "description": "content to prepend",
                    "type": "HtmlElement|HtmlElementList|String"
                },
                {
                    "name": "escape",
                    "description": "whether to insert `escaped` content, leading it into only text inserted",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "ElementArray",
            "module": "vdom",
            "submodule": "element-array"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 2941,
            "description": "For all vElements of the ElementArray:\nRemoves the attribute from the HtmlElement.\n\nAlias for removeAttribute().",
            "itemtype": "method",
            "name": "removeAttr",
            "params": [
                {
                    "name": "attributeName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Whether the HtmlElement has the attribute set.",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "ElementArray",
            "module": "vdom",
            "submodule": "element-array"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 2956,
            "description": "For all vElements of the ElementArray:\nRemoves a className from the HtmlElement.",
            "itemtype": "method",
            "name": "removeClass",
            "params": [
                {
                    "name": "className",
                    "description": "the className that should be removed.",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "ElementArray",
            "module": "vdom",
            "submodule": "element-array"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 2969,
            "description": "For all vElements of the ElementArray:\nRemoves data specified by `key`. When no arguments are passed, all node-data (key-value pairs) will be removed.",
            "itemtype": "method",
            "name": "removeData",
            "params": [
                {
                    "name": "key",
                    "description": "name of the key",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "ElementArray",
            "module": "vdom",
            "submodule": "element-array"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 2982,
            "description": "For all vElements of the ElementArray:\nRemoves a css-property (inline) out of the HtmlElement. Use camelCase.",
            "itemtype": "method",
            "name": "removeInlineStyle",
            "params": [
                {
                    "name": "cssAttribute",
                    "description": "the css-property to be removed",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "ElementArray",
            "module": "vdom",
            "submodule": "element-array"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 2995,
            "description": "For all vElements of the ElementArray:\nRemoves the HtmlElement from the DOM.",
            "itemtype": "method",
            "name": "removeNode",
            "since": "0.0.1",
            "class": "ElementArray",
            "module": "vdom",
            "submodule": "element-array"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3009,
            "description": "For all vElements of the ElementArray:\nReplaces the className of the HtmlElement with a new className.\nIf the previous className is not available, the new className is set nevertheless.",
            "itemtype": "method",
            "name": "replaceClass",
            "params": [
                {
                    "name": "prevClassName",
                    "description": "the className to be replaced",
                    "type": "String"
                },
                {
                    "name": "newClassName",
                    "description": "the className to be set",
                    "type": "String"
                },
                {
                    "name": "[force",
                    "description": "]  whether the new className should be set, even is the previous className isn't there",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "ElementArray",
            "module": "vdom",
            "submodule": "element-array"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3025,
            "description": "For all vElements of the ElementArray:\nReplaces the HtmlElement with a new HtmlElement.",
            "itemtype": "method",
            "name": "replaceNode",
            "params": [
                {
                    "name": "newHtmlElement",
                    "description": "the new HtmlElement",
                    "type": "HtmlElement|String"
                },
                {
                    "name": "escape",
                    "description": "whether to insert `escaped` content, leading it into only text inserted",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "since": "0.0.1",
            "class": "ElementArray",
            "module": "vdom",
            "submodule": "element-array"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3045,
            "description": "For all vElements of the ElementArray:\nSets the attribute on the HtmlElement with the specified value.\n\nAlias for setAttribute().",
            "itemtype": "method",
            "name": "setAttr",
            "params": [
                {
                    "name": "attributeName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "the value that belongs to `key`",
                    "type": "Any"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "ElementArray",
            "module": "vdom",
            "submodule": "element-array"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3061,
            "description": "For all vElements of the ElementArray:\nAdds a class to the HtmlElement. If the class already exists it won't be duplicated.",
            "itemtype": "method",
            "name": "setClass",
            "params": [
                {
                    "name": "className",
                    "description": "className to be added",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "ElementArray",
            "module": "vdom",
            "submodule": "element-array"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3074,
            "description": "For all vElements of the ElementArray:\nStores arbitary `data` at the HtmlElement. This has nothing to do with node-attributes whatsoever,\nit is just a way to bind any data to the specific Element so it can be retrieved later on with `getData()`.",
            "itemtype": "method",
            "name": "setData",
            "params": [
                {
                    "name": "key",
                    "description": "name of the key",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "the value that belongs to `key`",
                    "type": "Any"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "ElementArray",
            "module": "vdom",
            "submodule": "element-array"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3089,
            "description": "For all vElements of the ElementArray:\nSets the content of the HtmlElement (innerHTML). Careful: only set content like this if you controll the data and\nare sure what is going inside. Otherwise XSS might occur. If you let the user insert, or insert right from a db,\nyou might be better of using setContent().",
            "itemtype": "method",
            "name": "setHTML",
            "params": [
                {
                    "name": "content",
                    "description": "content to append",
                    "type": "HtmlElement|HtmlElementList|String"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "ElementArray",
            "module": "vdom",
            "submodule": "element-array"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3104,
            "description": "For all vElements of the ElementArray:\nSets a css-property (inline) out of the HtmlElement. Use camelCase.\n\nNote: no need to camelCase cssProperty: both `margin-left` as well as `marginLeft` are fine",
            "itemtype": "method",
            "name": "setStyle",
            "params": [
                {
                    "name": "cssAttribute",
                    "description": "the css-property to be set",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "the css-value",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "ElementArray",
            "module": "vdom",
            "submodule": "element-array"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3120,
            "description": "For all vElements of the ElementArray:\nGets or sets the outerHTML of both the Element as well as the representing dom-node.\nGoes through the vdom, so it's superfast.\n\nUse this property instead of `outerHTML`\n\nSyncs with the DOM.",
            "itemtype": "method",
            "name": "setOuterHTML",
            "params": [
                {
                    "name": "val",
                    "description": "the new value to be set",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "ElementArray",
            "module": "vdom",
            "submodule": "element-array"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3138,
            "description": "For all vElements of the ElementArray:\nSets the content of the HtmlElement. This is a safe way to set the content, because HTML is not parsed.\nIf you do need to set HTML inside the node, use setHTML().",
            "itemtype": "method",
            "name": "setText",
            "params": [
                {
                    "name": "content",
                    "description": "content to append. In case of HTML, it will be escaped.",
                    "type": "HtmlElement|HtmlElementList|String"
                },
                {
                    "name": "escape",
                    "description": "whether to insert `escaped` content, leading it into only text inserted",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "ElementArray",
            "module": "vdom",
            "submodule": "element-array"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3153,
            "description": "For all vElements of the ElementArray:\nToggles the className of the Element.",
            "itemtype": "method",
            "name": "toggleClass",
            "params": [
                {
                    "name": "className",
                    "description": "the className that should be toggled",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "ElementArray",
            "module": "vdom",
            "submodule": "element-array"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3166,
            "description": "For all vElements of the ElementArray:\nUnplugs a NodePlugin from the HtmlElement.",
            "itemtype": "method",
            "name": "unplug",
            "params": [
                {
                    "name": "pluginClass",
                    "description": "The plugin that should be unplugged. Needs to be the Class, not an instance!",
                    "type": "NodePlugin"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "ElementArray",
            "module": "vdom",
            "submodule": "element-array"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3248,
            "description": "Checks whether the plugin is plugged in at the HtmlElement. Checks whether all its attributes are set.",
            "itemtype": "method",
            "name": "isPlugged",
            "params": [
                {
                    "name": "pluginClass",
                    "description": "The plugin that should be plugged. Needs to be the Class, not an instance!",
                    "type": "NodePlugin"
                }
            ],
            "return": {
                "description": "whether the plugin is plugged in",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "Plugins",
            "module": "vdom",
            "submodule": "element-plugin"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3260,
            "description": "Plugs in the plugin on the HtmlElement, and gives is special behaviour by setting the appropriate attributes.",
            "itemtype": "method",
            "name": "plug",
            "params": [
                {
                    "name": "pluginClass",
                    "description": "The plugin that should be plugged. Needs to be the Class, not an instance!",
                    "type": "NodePlugin"
                },
                {
                    "name": "config",
                    "description": "any config that should be passed through when the class is instantiated.",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "Plugins",
            "module": "vdom",
            "submodule": "element-plugin"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3274,
            "description": "Unplugs a NodePlugin from the HtmlElement.",
            "itemtype": "method",
            "name": "unplug",
            "params": [
                {
                    "name": "pluginClass",
                    "description": "The plugin that should be unplugged. Needs to be the Class, not an instance!",
                    "type": "NodePlugin"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "Plugins",
            "module": "vdom",
            "submodule": "element-plugin"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3381,
            "description": "Returns a newly created TreeWalker object.\n\nThe TreeWalker is life presentation of the dom. It gets updated when the dom changes.",
            "itemtype": "method",
            "name": "createTreeWalker",
            "params": [
                {
                    "name": "root",
                    "description": "The root node at which to begin the NodeIterator's traversal.",
                    "type": "Element"
                },
                {
                    "name": "whatToShow",
                    "description": "Filter specification constants from the NodeFilter DOM interface, indicating which nodes to iterate over.\nYou can use or sum one of the next properties:\n<ul>\n  <li>window.NodeFilter.SHOW_ELEMENT</li>\n  <li>window.NodeFilter.SHOW_COMMENT</li>\n  <li>window.NodeFilter.SHOW_TEXT</li>\n</ul>",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "filter",
                    "description": "An object implementing the NodeFilter interface or a function. See https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter",
                    "type": "NodeFilter|function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "TreeWalker"
            },
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3402,
            "description": "Indicating whether an Element is inside the DOM.",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "otherElement",
                    "description": "",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "whether the Element is inside the dom.",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3414,
            "description": "Gets an ElementArray of Elements, specified by the css-selector.",
            "itemtype": "method",
            "name": "getAll",
            "params": [
                {
                    "name": "cssSelector",
                    "description": "css-selector to match",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ElementArray of Elements that match the css-selector",
                "type": "ElementArray"
            },
            "since": "0.0.1",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3426,
            "description": "Gets one Element, specified by the css-selector. To retrieve a single element by id,\nyou need to prepend the id-name with a `#`. When multiple Element's match, the first is returned.",
            "itemtype": "method",
            "name": "getElement",
            "params": [
                {
                    "name": "cssSelector",
                    "description": "css-selector to match",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the Element that was search for",
                "type": "Element|null"
            },
            "since": "0.0.1",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3439,
            "description": "Returns the Element matching the specified id.",
            "itemtype": "method",
            "name": "getElementById",
            "params": [
                {
                    "name": "id",
                    "description": "id of the Element",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Element|null"
            },
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3451,
            "description": "Returns the first Element that matches the CSS-selectors. You can pass one, or multiple CSS-selectors. When passed multiple,\nthey need to be separated by a `comma`.",
            "itemtype": "method",
            "name": "querySelector",
            "params": [
                {
                    "name": "selectors",
                    "description": "CSS-selector(s) that should match",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Element"
            },
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3467,
            "description": "Returns an ElementArray of all Elements that match the CSS-selectors. You can pass one, or multiple CSS-selectors. When passed multiple,\nthey need to be separated by a `comma`.\n\nquerySelectorAll is a snapshot of the dom at the time this method was called. It is not updated when changes of the dom are made afterwards.",
            "itemtype": "method",
            "name": "querySelectorAll",
            "params": [
                {
                    "name": "selectors",
                    "description": "CSS-selector(s) that should match",
                    "type": "String"
                }
            ],
            "return": {
                "description": "non-life Array (snapshot) with Elements",
                "type": "ElementArray"
            },
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3484,
            "description": "Replaces the Element with a new Element.",
            "itemtype": "method",
            "name": "replace",
            "params": [
                {
                    "name": "newHtmlElement",
                    "description": "the new element",
                    "type": "Element|String"
                },
                {
                    "name": "escape",
                    "description": "whether to insert `escaped` content, leading it into only the element having a TextNode as a child.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3497,
            "description": "Tests if an Element would be selected by the specified cssSelector.\nAlias for `matchesSelector()`",
            "itemtype": "method",
            "name": "test",
            "params": [
                {
                    "name": "element",
                    "description": "The Element to test",
                    "type": "Element"
                },
                {
                    "name": "cssSelector",
                    "description": "the css-selector to test against",
                    "type": "String"
                }
            ],
            "return": {
                "description": "whether or not the node matches the selector",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3515,
            "description": "Returns the currently focused element, that is, the element that will get keystroke events if the user types any.",
            "itemtype": "property",
            "name": "activeElement",
            "type": "Element",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3523,
            "description": "Returns an HTMLCollection with Elements of all of the `anchors` in the document that have a `name` specified (a[name]).\nFor reasons of backwards compatibility, the returned set of anchors only contains those anchors created with the `name` attribute.\n\n`anchors` is a life presentation of the dom. The returned HTMLCollection gets updated when the dom changes.",
            "itemtype": "property",
            "name": "anchors",
            "type": "HTMLCollection",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3534,
            "description": "Returns an HTMLCollection with Elements of all of the `applets` in the document.\n\n`applets` is a life presentation of the dom. The returned HTMLCollection gets updated when the dom changes.",
            "itemtype": "property",
            "name": "applets",
            "type": "HTMLCollection",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3544,
            "description": "Returns the `body` or `frameset` Element of the current document, or null if no such element exists.",
            "itemtype": "property",
            "name": "body",
            "type": "Element",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3552,
            "description": "Returns the `script`-Element whose script is currently being processed.",
            "itemtype": "property",
            "name": "currentScript",
            "type": "Element",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3561,
            "description": "Returns the root-element (===`html`-Element) of the current document",
            "itemtype": "property",
            "name": "documentElement",
            "type": "Element",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3569,
            "description": "Returns an HTMLCollection with Elements of all of the `embed`-elements in the document.\n\n`embeds` is a life presentation of the dom. The returned HTMLCollection gets updated when the dom changes.",
            "itemtype": "property",
            "name": "embeds",
            "type": "HTMLCollection",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3579,
            "description": "Returns the firstChild element (===`html`-Element) of the current document",
            "itemtype": "property",
            "name": "firstChild",
            "type": "Element",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3587,
            "description": "Returns an HTMLCollection with Elements of all of the `form`-elements in the document.\n\n`forms` is a life presentation of the dom. The returned HTMLCollection gets updated when the dom changes.",
            "itemtype": "property",
            "name": "forms",
            "type": "HTMLCollection",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3597,
            "description": "Returns an HTMLCollection with Elements of all of the images in the document.\n\n`images` is a life presentation of the dom. The returned HTMLCollection gets updated when the dom changes.",
            "itemtype": "property",
            "name": "images",
            "type": "HTMLCollection",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3607,
            "description": "Returns the lastChild element (===`html`-Element) of the current document",
            "itemtype": "property",
            "name": "lastChild",
            "type": "Element",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3615,
            "description": "Returns an HTMLCollection with Elements of all of the  of all `area`-Elements and `a`-Elements in a document with a value for the href attribute.\n\n`links` is a life presentation of the dom. The returned HTMLCollection gets updated when the dom changes.",
            "itemtype": "property",
            "name": "links",
            "type": "HTMLCollection",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3625,
            "description": "Returns an HTMLCollection with Elements of all of the plugins (`object`- or `embed`-elements) in the document.\n\n`plugins` is a life presentation of the dom. The returned HTMLCollection gets updated when the dom changes.",
            "itemtype": "property",
            "name": "plugins",
            "type": "HTMLCollection",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3635,
            "description": "Returns an HTMLCollection with Elements of all of the script-elements in the document.\n\n`scripts` is a life presentation of the dom. The returned HTMLCollection gets updated when the dom changes.",
            "itemtype": "property",
            "name": "scripts",
            "type": "HTMLCollection",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3645,
            "description": "Returns an HTMLCollection with Elements of all of the style-elements in the document.\n\n`styleSheets` is a life presentation of the dom. The returned HTMLCollection gets updated when the dom changes.",
            "itemtype": "property",
            "name": "styleSheets",
            "type": "HTMLCollection",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3655,
            "description": "Gets or sets the `title` of the document. That is, the `title`-Element within the `head`-Element",
            "itemtype": "property",
            "name": "title",
            "type": "String",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3665,
            "description": "\"online\" event is fired on the <body> of each page when the browser switches between online and offline mode.\nThe event is non-cancellable (you can't prevent the user from coming online, or going offline).",
            "itemtype": "event",
            "name": "online",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3672,
            "description": "\"offline\" event is fired on the <body> of each page when the browser switches between online and offline mode.\nThe event is non-cancellable (you can't prevent the user from coming online, or going offline).",
            "itemtype": "event",
            "name": "offline",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3681,
            "description": "Adopts a node from an external document. The node and its subtree is removed from the document it's in (if any),\nand its ownerDocument is changed to the current document. The node can then be inserted into the current document.",
            "itemtype": "method",
            "name": "adoptNode",
            "params": [
                {
                    "name": "externalNode",
                    "description": "The node from another document to be adopted.",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "is the adopted node that can be used in the current document.\nThe new node's parentNode is null, since it has not yet been inserted into the document tree.",
                "type": "Node"
            },
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3691,
            "description": "Adds a HtmlElement or DocumentFragment to the end of the `html`-element",
            "itemtype": "method",
            "name": "appendChild",
            "params": [
                {
                    "name": "element",
                    "description": "the item to be appended",
                    "type": "Element|DocumentFragment"
                }
            ],
            "return": {
                "description": "the appended child.",
                "type": "Element"
            },
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3699,
            "description": "Creates a new attribute-node, and returns it.",
            "itemtype": "method",
            "name": "createAttribute",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the attribute",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "AttributeNode"
            },
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3707,
            "description": "Creates a new Comment-node, and returns it.",
            "itemtype": "method",
            "name": "createComment",
            "params": [
                {
                    "name": "data",
                    "description": "The data to be added to the Comment.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "CommentNode"
            },
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3715,
            "description": "Creates a new HtmlElement, and returns it.\n\nDon't use qualified names (like \"html:a\") with this method.",
            "itemtype": "method",
            "name": "createElement",
            "params": [
                {
                    "name": "tagName",
                    "description": "is a string that specifies the type of element to be created.\n       The nodeName of the created element is initialized with the value of tagName.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "HtmlElement"
            },
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3726,
            "description": "Returns a new NodeIterator object.\n\nThe NodeIterator is a snapshot of the dom at the time this method was called. It is not updated when changes of the dom are made afterwards.",
            "itemtype": "method",
            "name": "createNodeIterator",
            "params": [
                {
                    "name": "root",
                    "description": "The root node at which to begin the NodeIterator's traversal.",
                    "type": "Element"
                },
                {
                    "name": "whatToShow",
                    "description": "Filter specification constants from the NodeFilter DOM interface, indicating which nodes to iterate over.\nYou can use or sum one of the next properties:\n<ul>\n  <li>window.NodeFilter.SHOW_ELEMENT</li>\n  <li>window.NodeFilter.SHOW_COMMENT</li>\n  <li>window.NodeFilter.SHOW_TEXT</li>\n</ul>",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "filter",
                    "description": "An object implementing the NodeFilter interface or a function. See https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter",
                    "type": "NodeFilter|function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "NodeIterator"
            },
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3744,
            "description": "Returns a new Range object. See https://developer.mozilla.org/en-US/docs/Web/API/Range",
            "itemtype": "method",
            "name": "createRange",
            "return": {
                "description": "",
                "type": "Range"
            },
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3751,
            "description": "Creates a new Text-node, and returns it.",
            "itemtype": "method",
            "name": "createTextNode",
            "params": [
                {
                    "name": "data",
                    "description": "The data to be added to the Text-node.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "TextNode"
            },
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3759,
            "description": "Returns the Element from the document whose `elementFromPoint`-method is being called which is the topmost\ndom-Element which lies under the given point. To get a Element, specify the point via coordinates, in CSS pixels,\nrelative to the upper-left-most point in the window or frame containing the document.",
            "itemtype": "method",
            "name": "elementFromPoint",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate to check, in CSS pixels relative to the upper-left corner of the document",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate to check, in CSS pixels relative to the upper-left corner of the document",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the matching Element",
                "type": "Element"
            },
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3770,
            "description": "Enables the style sheets matching the specified name in the current style sheet set,\nand disables all other style sheets (except those without a title, which are always enabled).",
            "itemtype": "method",
            "name": "enableStyleSheetsForSet",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the style sheets to enable. All style sheets with a title that match this name will be enabled,\n       while all others that have a title will be disabled. Specify an empty string for the name parameter\n       to disable all alternate and preferred style sheets (but not the persistent style sheets; that is, those with no title attribute).",
                    "type": "String"
                }
            ],
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3780,
            "description": "Returns an ElementArray of all Elements that match their classes with the supplied `classNames` argument.\nTo match multiple different classes, separate them with a `comma`.\n\ngetElementsByClassName is life presentation of the dom. The returned ElementArray gets updated when the dom changes.\n\nNOTE: it is highly recomended to use `document.getAll` because that method takes advantage of the vdom.",
            "itemtype": "method",
            "name": "getElementsByClassName",
            "params": [
                {
                    "name": "classNames",
                    "description": "the classes to search for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "life Array with Elements",
                "type": "ElementArray"
            },
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3794,
            "description": "Returns an ElementArray of all Elements that match their `name`-attribute with the supplied `name` argument.\n\ngetElementsByName is life presentation of the dom. The returned ElementArray gets updated when the dom changes.\n\nNOTE: it is highly recomended to use `document.getAll` because that method takes advantage of the vdom.",
            "itemtype": "method",
            "name": "getElementsByName",
            "params": [
                {
                    "name": "name",
                    "description": "the property of name-attribute to search for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "life Array with Elements",
                "type": "ElementArray"
            },
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3806,
            "description": "Returns an ElementArray of all Elements that match their `name`-attribute with the supplied `name` argument.\n\ngetElementsByTagName is life presentation of the dom. The returned ElementArray gets updated when the dom changes.\n\nNOTE: it is highly recomended to use `document.getAll` because that method takes advantage of the vdom.",
            "itemtype": "method",
            "name": "getElementsByTagName",
            "params": [
                {
                    "name": "tagNames",
                    "description": "the tags to search for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "life Array with Elements",
                "type": "ElementArray"
            },
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3818,
            "description": "Returns a selection object representing the range of text selected by the user.\n\nIs also available on the `window`-object.",
            "itemtype": "method",
            "name": "getSelection",
            "return": {
                "description": "A Selection object. When cast to string, either by adding empty quotes \"\" or using .toString, this object is the text selected.",
                "type": "Selection"
            },
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3827,
            "description": "Returns a Boolean value indicating whether the document or any element inside the document has focus.",
            "itemtype": "method",
            "name": "hasFocus",
            "return": {
                "description": "whether the document or any element inside the document has focus.",
                "type": "Boolean"
            },
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3834,
            "description": "Creates a copy of a node from an external document that can be inserted into the current document.",
            "itemtype": "method",
            "name": "importNode",
            "params": [
                {
                    "name": "externalNode",
                    "description": "The node from another document to be adopted.",
                    "type": "Node"
                },
                {
                    "name": "deep",
                    "description": "Whether the descendants of the imported node need to be imported.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The new node that is imported into the document.\nThe new node's parentNode is null, since it has not yet been inserted into the document tree.",
                "type": "Node"
            },
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3844,
            "description": "Inserts `newElement` before `referenceElement`.",
            "itemtype": "method",
            "name": "insertBefore",
            "params": [
                {
                    "name": "newElement",
                    "description": "The newElement to insert",
                    "type": "Element"
                },
                {
                    "name": "referenceElement",
                    "description": "The Element before which newElement is inserted.",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "the Element being inserted (equals newElement)",
                "type": "Element"
            },
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3853,
            "description": "Removes a child node from the DOM.",
            "itemtype": "method",
            "name": "removeChild",
            "params": [
                {
                    "name": "child",
                    "description": "the Element to be removed from the DOM",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "a reference to the removed child node",
                "type": "Element"
            },
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3861,
            "description": "Replaces one child-element of its parent element with a new child-element.",
            "itemtype": "method",
            "name": "replaceChild",
            "params": [
                {
                    "name": "newChild",
                    "description": "the new element to replace oldChild. If it already exists in the DOM, it is first removed.",
                    "type": "Element"
                },
                {
                    "name": "oldChild",
                    "description": "The existing child to be replaced.",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "is the replaced node. This is the same Element as oldChild.",
                "type": "Element"
            },
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3872,
            "description": "Returns the character encoding of the current document.",
            "itemtype": "property",
            "name": "characterSet",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3879,
            "description": "Indicates whether the document is rendered in Quirks mode or Standards mode. Its value is either:\n<ul>\n    <li>`BackCompat` if the document is in quirks mode</li>\n    <li>`CSS1Compat` if the document is in no-quirks (also known as `standards`) mode or limited-quirks (also known as `almost standards`) mode.</li>\n</ul>",
            "itemtype": "property",
            "name": "compatMode",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3890,
            "description": "Returns the MIME type that the document is being rendered as.  This may come from HTTP headers or other sources of MIME information,\nand might be affected by automatic type conversions performed by either the browser or extensions.",
            "itemtype": "property",
            "name": "contentType",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3898,
            "description": "Returns the Document Type Declaration (DTD) associated with current document. The returned object implements the DocumentType interface.\nUse DOMImplementation.createDocumentType() to create a DocumentType.",
            "itemtype": "property",
            "name": "doctype",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3906,
            "description": "Returns string URI of the HTML document. Same as `document.URL`.\n\nNote: HTML documents have a document.URL property which returns the same value. Unlike URL, documentURI is available on all types of documents.",
            "itemtype": "property",
            "name": "documentURI",
            "type": "String",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3916,
            "description": "Controls whether the entire document is editable. Its value should be either \"off\" or \"on\".",
            "itemtype": "property",
            "name": "designMode",
            "type": "String",
            "default": "\"off\"",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3924,
            "description": "Gets the domain portion of the origin of the current document.\n\nSetter will fail, because the same origin policy needs to persist.",
            "itemtype": "property",
            "name": "domain",
            "type": "String",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3934,
            "description": "Returns a DOMImplementation object associated with the current document.",
            "itemtype": "property",
            "name": "implementation",
            "type": "DOMImplementation",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3942,
            "description": "Returns a string containing the date and time on which the current document was last modified.\nIf you want a Date-object, you need to transform lastModified into a Date object: `modifyDate = new Date(document.lastModified);`",
            "itemtype": "property",
            "name": "lastModified",
            "type": "String",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3951,
            "description": "Returns the last enabled style sheet set; this property's value changes whenever the document.selectedStyleSheetSet property is changed.",
            "itemtype": "property",
            "name": "lastStyleSheetSet",
            "type": "String",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3959,
            "description": "returns a Location object, which contains information about the URL of the document and provides methods for changing that URL and loading another URL.\n\nThough Document.location is a read-only Location object, you can also assign a DOMString to it. This means that you can work with document.location\nas if it were a string in most cases: document.location = 'http://www.example.com' is a synonym of document.location.href = 'http://www.example.com'.\n\nTo retrieve just the URL as a string, the read-only document.URL property can also be used.\n\nSee more about the `Location` object: https://developer.mozilla.org/en-US/docs/Web/API/Location",
            "itemtype": "property",
            "name": "location",
            "type": "Location",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3974,
            "description": "Returns the preferred style sheet set as set by the page author. This is determined from the order of style sheet declarations and the Default-Style HTTP header.",
            "itemtype": "property",
            "name": "preferredStyleSheetSet",
            "type": "String",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3981,
            "description": "Returns \"loading\" while the document is loading, \"interactive\" once it is finished parsing but still loading sub-resources,\nand \"complete\" once it has loaded.",
            "itemtype": "property",
            "name": "readyState",
            "type": "String",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3990,
            "description": "Returns the URI of the page that linked to this page.",
            "itemtype": "property",
            "name": "referrer",
            "type": "String",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 3998,
            "description": "Indicates the name of the style sheet set that's currently in use. See more about Stylesheets: https://developer.mozilla.org/en-US/docs/Web/API/Stylesheet\nSetting the value of this property is equivalent to calling document.enableStyleSheetsForSet() with the value of currentStyleSheetSet,\nthen setting the value of lastStyleSheetSet to that value as well.",
            "itemtype": "property",
            "name": "selectedStyleSheetSet",
            "type": "String",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 4007,
            "description": "Returns string URL of the HTML document. Same as `document.documentURI`\n\nNote: HTML documents have a document.URL property which returns the same value. Unlike URL, documentURI is available on all types of documents.",
            "itemtype": "property",
            "name": "URL",
            "type": "String",
            "readonly": "",
            "class": "document",
            "module": "vdom",
            "submodule": "extend-document"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 4823,
            "description": "Reference to the vnode-object that represents the Node\n\n(will autogenerate a vnode, should it not exists)",
            "itemtype": "property",
            "name": "vnode",
            "type": "vnode",
            "since": "0.0.1",
            "class": "Node",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 4861,
            "description": "Determines the number of transitionend-events there will occur",
            "itemtype": "method",
            "name": "_getEvtTransEndCount",
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "Node",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 4882,
            "description": "Returns cascaded \"transition\" style of all transition-properties. `Cascaded` means: the actual present style,\nthe way it is visible (calculated through the DOM-tree).\n\nNote1: When \"transition\" is set inline, ONLY inline transtition is active!\nThus, if parentNode has \"transition: width 2s\" and inline has \"transition: height 3s\", then the transition\nwill be \"transition: height 3s\" --> returning \"undefined\" for transitionProperty=width.\nNote2: in case of \"transition: all\" --> these values will be returned for every \"transitionProperty\" (even when querying \"width\")",
            "itemtype": "method",
            "name": "_getTransitionAll",
            "params": [
                {
                    "name": "transitionProperty",
                    "description": "transform property that is queried, f.e. \"width\", or \"all\"",
                    "type": "String"
                },
                {
                    "name": "pseudo",
                    "description": "to query pseudo-element, fe: `:before` or `:first-line`",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "the transition-object, with the properties:\n<ul>\n    <li>duration {Number}</li>\n    <li>timingFunction {String}</li>\n    <li>delay {Number}</li>\n</ul>",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "Node",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 4942,
            "description": "Appends an Element or an Element's string-representation at the end of Element's innerHTML, or before the `refElement`.",
            "itemtype": "method",
            "name": "append",
            "params": [
                {
                    "name": "content",
                    "description": "content to append",
                    "type": "Element|ElementArray|String"
                },
                {
                    "name": "escape",
                    "description": "whether to insert `escaped` content, leading it into only text inserted",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "refElement",
                    "description": "reference Element where the content should be appended",
                    "type": "Element",
                    "optional": true
                }
            ],
            "return": {
                "description": "the created Element (or the last when multiple)",
                "type": "Element"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 4988,
            "description": "Adds a node to the end of the list of childNodes of a specified parent node.",
            "itemtype": "method",
            "name": "appendChild",
            "params": [
                {
                    "name": "content",
                    "description": "content to append",
                    "type": "Element|ElementArray|String"
                },
                {
                    "name": "escape",
                    "description": "whether to insert `escaped` content, leading it into only text inserted",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "the Element that was appended",
                "type": "Element"
            },
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5001,
            "description": "Returns a duplicate of the node. Use cloneNode(true) for a `deep` clone.",
            "itemtype": "method",
            "name": "cloneNode",
            "params": [
                {
                    "name": "deep",
                    "description": "whether to perform a `deep` clone: with all descendants",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "a clone of this Element",
                "type": "Element"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5044,
            "description": "Compares the position of the current node against another node in any other document.\n\nReturnvalues are a composition of the following bitwise values:\n<ul>\n    <li>Node.DOCUMENT_POSITION_DISCONNECTED === 1 (one of the Elements is not part of the dom)</li>\n    <li>Node.DOCUMENT_POSITION_PRECEDING === 2 (this Element comes before otherElement)</li>\n    <li>Node.DOCUMENT_POSITION_FOLLOWING === 4 (this Element comes after otherElement)</li>\n    <li>Node.DOCUMENT_POSITION_CONTAINS === 8 (otherElement trully contains -not equals- this Element)</li>\n    <li>Node.DOCUMENT_POSITION_CONTAINED_BY === 16 (Element trully contains -not equals- otherElement)</li>\n</ul>",
            "itemtype": "method",
            "name": "compareDocumentPosition",
            "params": [
                {
                    "name": "otherElement",
                    "description": "",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "A bitmask, use it this way: if (thisNode.compareDocumentPosition(otherNode) & Node.DOCUMENT_POSITION_FOLLOWING) {// otherNode is following thisNode}",
                "type": "Number"
            },
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5088,
            "description": "Indicating whether this Element contains OR equals otherElement.",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "otherElement",
                    "description": "",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "whether this Element contains OR equals otherElement.",
                "type": "Boolean"
            },
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5102,
            "description": "Returns a newly created TreeWalker object with this Element as root.\n\nThe TreeWalker is life presentation of the dom. It gets updated when the dom changes.",
            "itemtype": "method",
            "name": "createTreeWalker",
            "params": [
                {
                    "name": "root",
                    "description": "The root node at which to begin the NodeIterator's traversal.",
                    "type": "Element"
                },
                {
                    "name": "whatToShow",
                    "description": "Filter specification constants from the NodeFilter DOM interface, indicating which nodes to iterate over.\nYou can use or sum one of the next properties:\n<ul>\n  <li>window.NodeFilter.SHOW_ALL === -1</li>\n  <li>window.NodeFilter.SHOW_ELEMENT === 1</li>\n  <li>window.NodeFilter.SHOW_COMMENT === 128</li>\n  <li>window.NodeFilter.SHOW_TEXT === 4</li>\n</ul>\n\nA treewalker has the next methods:\n<ul>\n  <li>treewalker.firstChild()</li>\n  <li>treewalker.lastChild()</li>\n  <li>treewalker.nextNode()</li>\n  <li>treewalker.nextSibling()</li>\n  <li>treewalker.parentNode()</li>\n  <li>treewalker.previousNode()</li>\n  <li>treewalker.previousSibling()</li>\n</ul>\n\nA treewalker has the next properties:\n<ul>\n  <li>treewalker.currentNode</li>\n  <li>treewalker.filter</li>\n  <li>treewalker.root</li>\n  <li>treewalker.whatToShow</li>\n</ul>",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "filter",
                    "description": "An object implementing the NodeFilter interface or a function. See https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter",
                    "type": "NodeFilter|function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "TreeWalker"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5147,
            "description": "Sets the inline-style of the Element exactly to the specified `value`, overruling previous values.\nMaking the Element's inline-style look like: style=\"value\".\n\nThis is meant for a quick one-time setup. For individually inline style-properties to be set, you can use `setInlineStyle()`.",
            "itemtype": "method",
            "name": "defineInlineStyle",
            "params": [
                {
                    "name": "value",
                    "description": "the style string to be set",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5162,
            "description": "Empties the content of the Element.\nAlias for thisNode.vTextContent = '';",
            "itemtype": "method",
            "name": "empty",
            "chainable": 1,
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5174,
            "description": "Reference to the first of sibbling vNode's, where the related dom-node is an Element(nodeType===1).",
            "itemtype": "method",
            "name": "first",
            "params": [
                {
                    "name": "cssSelector",
                    "description": "to return the first Element that matches the css-selector",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Element"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5186,
            "description": "Reference to the first child-Element, where the related dom-node an Element (nodeType===1).",
            "itemtype": "method",
            "name": "firstOfChildren",
            "params": [
                {
                    "name": "cssSelector",
                    "description": "to return the first Element that matches the css-selector",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Element"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5199,
            "description": "Forces the Element to be inside an ancestor-Element that has the `overfow=\"scroll\" set.",
            "itemtype": "method",
            "name": "forceIntoNodeView",
            "params": [
                {
                    "name": "ancestor",
                    "description": "the Element where it should be forced into its view.\n       Only use this when you know the ancestor and this ancestor has an `overflow=\"scroll\"` property\n       when not set, this method will seek through the doc-tree upwards for the first Element that does match this criteria.",
                    "type": "Element",
                    "optional": true
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5263,
            "description": "Forces the Element to be inside the window-view. Differs from `scrollIntoView()` in a way\nthat `forceIntoView()` doesn't change the position when it's inside the view, whereas\n`scrollIntoView()` sets it on top of the view.",
            "itemtype": "method",
            "name": "forceIntoView",
            "params": [
                {
                    "name": "notransition",
                    "description": "set true if you are sure positioning is without transition.\n       this isn't required, but it speeds up positioning. Only use when no transition is used:\n       when there is a transition, setting this argument `true` would miscalculate the position.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "rectangle",
                    "description": "Set this if you have already calculated the window-rectangle (used for preformance within drag-drop)",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "x",
                            "description": "scrollLeft of window",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "y",
                            "description": "scrollTop of window",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "w",
                            "description": "width of window",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "h",
                            "description": "height of window",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ],
            "chainable": 1,
            "since": "0.0.2",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5324,
            "description": "Gets an ElementArray of Elements that lie within this Element and match the css-selector.",
            "itemtype": "method",
            "name": "getAll",
            "params": [
                {
                    "name": "cssSelector",
                    "description": "css-selector to match",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ElementArray of Elements that match the css-selector",
                "type": "ElementArray"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5336,
            "description": "Gets an attribute of the Element.\n\nAlias for getAttribute().",
            "itemtype": "method",
            "name": "getAttr",
            "params": [
                {
                    "name": "attributeName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "value of the attribute",
                "type": "String|null"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5350,
            "description": "Returns all attributes as defined as an key/value object.",
            "itemtype": "method",
            "name": "getAttrs",
            "params": [
                {
                    "name": "attributeName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "all attributes as on Object",
                "type": "Object"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5362,
            "description": "Gets an attribute of the Element.\n\nSame as getAttr().",
            "itemtype": "method",
            "name": "getAttribute",
            "params": [
                {
                    "name": "attributeName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "value of the attribute",
                "type": "String|null"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5377,
            "description": "Returns a live collection of the Element-childNodes.",
            "itemtype": "method",
            "name": "getChildren",
            "return": {
                "description": "",
                "type": "ElementArray"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5395,
            "description": "Returns a token list of the class attribute of the element.\nSee: https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList",
            "itemtype": "method",
            "name": "getClassList",
            "return": {
                "description": "DOMTokenList"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5413,
            "description": "Returns data set specified by `key`. If not set, `undefined` will be returned.\nThe data is efficiently stored on the vnode.",
            "itemtype": "method",
            "name": "getData",
            "params": [
                {
                    "name": "key",
                    "description": "name of the key",
                    "type": "String"
                }
            ],
            "return": {
                "description": "data set specified by `key`",
                "type": "Any|undefined"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5427,
            "description": "Gets one Element, specified by the css-selector. To retrieve a single element by id,\nyou need to prepend the id-name with a `#`. When multiple Element's match, the first is returned.",
            "itemtype": "method",
            "name": "getElement",
            "params": [
                {
                    "name": "cssSelector",
                    "description": "css-selector to match",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the Element that was search for",
                "type": "Element|null"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5440,
            "description": "Returns the Element matching the specified id, which should should be a descendant of this Element.",
            "itemtype": "method",
            "name": "getElementById",
            "params": [
                {
                    "name": "id",
                    "description": "id of the Element",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Element|null"
            },
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5457,
            "description": "Gets innerHTML of the dom-node.\nGoes through the vdom, so it's superfast.\n\nUse this method instead of `innerHTML`",
            "itemtype": "method",
            "name": "getHTML",
            "return": {
                "description": "",
                "type": "String"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5471,
            "description": "Returns the Elments `id`",
            "itemtype": "method",
            "name": "getId",
            "return": {
                "description": "Elements `id`",
                "type": "String|undefined"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5482,
            "description": "Returns inline style of the specified property. `Inline` means: what is set directly on the Element,\nthis doesn't mean necesairy how it is looked like: when no css is set inline, the Element might still have\nan appearance because of other CSS-rules.\n\nIn most cases, you would be interesting in using `getStyle()` instead.\n\nNote: no need to camelCase cssProperty: both `margin-left` as well as `marginLeft` are fine",
            "itemtype": "method",
            "name": "getInlineStyle",
            "params": [
                {
                    "name": "cssProperty",
                    "description": "the css-property to look for",
                    "type": "String"
                },
                {
                    "name": "pseudo",
                    "description": "to look inside a pseudo-style",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "css-style",
                "type": "String|undefined"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5508,
            "description": "Returns inline transition-css-property. `Inline` means: what is set directly on the Element,\nWhen `transition` is set inline, no `parent` transition-rules apply.",
            "itemtype": "method",
            "name": "getInlineTransition",
            "params": [
                {
                    "name": "transitionProperty",
                    "description": "the css-property to look for",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "pseudo",
                    "description": "to look inside a pseudo-style",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "the transition-object, with the properties:\n<ul>\n    <li>duration {Number}</li>\n    <li>timingFunction {String}</li>\n    <li>delay {Number}</li>\n</ul>",
                "type": "Object"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5533,
            "description": "Gets the outerHTML of the dom-node.\nGoes through the vdom, so it's superfast.\n\nUse this method instead of `outerHTML`",
            "itemtype": "method",
            "name": "getOuterHTML",
            "return": {
                "description": "",
                "type": "String"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5547,
            "description": "Returns the Element's parent Element.",
            "itemtype": "method",
            "name": "getParent",
            "return": {
                "description": "",
                "type": "Element"
            },
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5558,
            "description": "Returns cascaded style of the specified property. `Cascaded` means: the actual present style,\nthe way it is visible (calculated through the DOM-tree).\n\n<ul>\n    <li>Note1: values are absolute: percentages and points are converted to absolute values, sizes are in pixels, colors in rgb/rgba-format.</li>\n    <li>Note2: you cannot query shotcut-properties: use `margin-left` instead of `margin`.</li>\n    <li>Note3: no need to camelCase cssProperty: both `margin-left` as well as `marginLeft` are fine.</li>\n    <li>Note4: you can query `transition`, `transform`, `perspective` and `transform-origin` instead of their vendor-specific properties.</li>\n    <li>Note5: `transition` or `transform` return an Object instead of a String.</li>\n</ul>",
            "itemtype": "method",
            "name": "getCascadeStyle",
            "params": [
                {
                    "name": "cssProperty",
                    "description": "property that is queried",
                    "type": "String"
                },
                {
                    "name": "pseudo",
                    "description": "to query pseudo-element, fe: `:before` or `:first-line`",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "value for the css-property: this is an Object for the properties `transition` or `transform`",
                "type": "String|Object"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5589,
            "description": "Returns cascaded \"transition\" style of the specified trandform-property. `Cascaded` means: the actual present style,\nthe way it is visible (calculated through the DOM-tree).\n\nNote1: When \"transition\" is set inline, ONLY inline transtition is active!\nThus, if parentNode has \"transition: width 2s\" and inline has \"transition: height 3s\", then the transition\nwill be \"transition: height 3s\" --> returning \"undefined\" for transitionProperty=width.\nNote2: in case of \"transition: all\" --> these values will be returned for every \"transitionProperty\" (even when querying \"width\")",
            "itemtype": "method",
            "name": "getTransition",
            "params": [
                {
                    "name": "transitionProperty",
                    "description": "transform property that is queried, f.e. \"width\", or \"all\"",
                    "type": "String"
                },
                {
                    "name": "pseudo",
                    "description": "to query pseudo-element, fe: `:before` or `:first-line`",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "the transition-object, with the properties:\n<ul>\n    <li>duration {Number}</li>\n    <li>timingFunction {String}</li>\n    <li>delay {Number}</li>\n</ul>",
                "type": "Object"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5668,
            "description": "Elements tag-name in uppercase (same as nodeName).",
            "itemtype": "method",
            "name": "getTagName",
            "return": {
                "description": "",
                "type": "String"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5679,
            "description": "Gets the innerContent of the Element as plain text.\nGoes through the vdom, so it's superfast.\n\nUse this method instead of `textContent`",
            "itemtype": "method",
            "name": "getText",
            "return": {
                "description": "String"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5693,
            "description": "Gets the value of the following Elements:\n\n<ul>\n    <li>input</li>\n    <li>textarea</li>\n    <li>select</li>\n    <li>any container that is `contenteditable`</li>\n</ul>",
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "",
                "type": "String"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5717,
            "description": "Whether the Element has the attribute set.\n\nAlias for hasAttribute().",
            "itemtype": "method",
            "name": "hasAttr",
            "params": [
                {
                    "name": "attributeName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Whether the Element has the attribute set.",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5731,
            "description": "Whether the Element has the attribute set.\n\nSame as hasAttr().",
            "itemtype": "method",
            "name": "hasAttribute",
            "params": [
                {
                    "name": "attributeName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Whether the Element has the attribute set.",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5745,
            "description": "Indicating if the current element has any attributes or not.",
            "itemtype": "method",
            "name": "hasAttributes",
            "return": {
                "description": "Whether the current element has any attributes or not.",
                "type": "Boolean"
            },
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5756,
            "description": "Indicating if the Element has any children (childNodes with nodeType of 1).",
            "itemtype": "method",
            "name": "hasChildren",
            "return": {
                "description": "whether the Element has children",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5767,
            "description": "Checks whether the className is present on the Element.",
            "itemtype": "method",
            "name": "hasClass",
            "params": [
                {
                    "name": "className",
                    "description": "the className to check for. May be an Array of classNames, which all needs to be present.",
                    "type": "String|Array"
                }
            ],
            "return": {
                "description": "whether the className (or classNames) is present on the Element",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5779,
            "description": "If the Element has data set specified by `key`. The data could be set with `setData()`.",
            "itemtype": "method",
            "name": "hasData",
            "params": [
                {
                    "name": "key",
                    "description": "name of the key",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5792,
            "description": "Indicates whether Element currently has the focus.",
            "itemtype": "method",
            "name": "hasFocus",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5803,
            "description": "Indicates whether the current focussed Element lies inside this Element (on a descendant Element).",
            "itemtype": "method",
            "name": "hasFocusInside",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5815,
            "description": "Returns whether the inline style of the specified property is present. `Inline` means: what is set directly on the Element.\n\nNote: no need to camelCase cssProperty: both `margin-left` as well as `marginLeft` are fine",
            "itemtype": "method",
            "name": "hasInlineStyle",
            "params": [
                {
                    "name": "cssProperty",
                    "description": "the css-property to look for",
                    "type": "String"
                },
                {
                    "name": "pseudo",
                    "description": "to look inside a pseudo-style",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "whether the inlinestyle was present",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5830,
            "description": "Returns whether the specified inline transform-css-property is present. `Inline` means: what is set directly on the Element.\n\nSee more about tranform-properties: https://developer.mozilla.org/en-US/docs/Web/CSS/transform",
            "itemtype": "method",
            "name": "hasInlineTransition",
            "params": [
                {
                    "name": "transitionProperty",
                    "description": "the css-property to look for",
                    "type": "String"
                },
                {
                    "name": "pseudo",
                    "description": "to look inside a pseudo-style",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "whether the inline transform-css-property was present",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5845,
            "description": "Returns whether the specified transform-property is active.\n\nNote1: When \"transition\" is set inline, ONLY inline transtition is active!\nThus, if parentNode has \"transition: width 2s\" and inline has \"transition: height 3s\",\nthen hasTransition('width') will return false.\nNote2: in case of \"transition: all\" --> hasTransition() will always `true` for every transitionProperty.",
            "itemtype": "method",
            "name": "hasTransition",
            "params": [
                {
                    "name": "transitionProperty",
                    "description": "the css-property to look for",
                    "type": "String"
                },
                {
                    "name": "pseudo",
                    "description": "to look inside a pseudo-style",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "whether the inlinestyle was present",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5863,
            "description": "Hides a node by making it floated and removing it out of the visible screen.\nHides immediately without `fade`, or will fade when fade is specified.",
            "itemtype": "method",
            "name": "hide",
            "params": [
                {
                    "name": "fade",
                    "description": "sec to fade (you may use `0.1`)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "fulfilled when the element is ready hiding, or rejected when showed up again (using node.show) before fully hided.",
                "type": "This|Promise"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5918,
            "description": "Indicates whether the Element currently is part if the DOM.",
            "itemtype": "method",
            "name": "inDOM",
            "return": {
                "description": "whether the Element currently is part if the DOM.",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5929,
            "description": "Checks whether the Element lies within the specified selector (which can be a CSS-selector or a Element)",
            "example": [
                "\nvar divnode = childnode.inside('div.red');",
                "\nvar divnode = childnode.inside(containerNode);"
            ],
            "itemtype": "method",
            "name": "inside",
            "params": [
                {
                    "name": "selector",
                    "description": "the selector, specified by a Element or a css-selector",
                    "type": "Element|String"
                }
            ],
            "return": {
                "description": "the nearest Element that matches the selector, or `false` when not found",
                "type": "Element|false"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5959,
            "description": "Checks whether a point specified with x,y is within the Element's region.",
            "itemtype": "method",
            "name": "insidePos",
            "params": [
                {
                    "name": "x",
                    "description": "x-value for new position (coordinates are page-based)",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-value for new position (coordinates are page-based)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "whether there is a match",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5977,
            "description": "Inserts `domNode` before `refDomNode`.",
            "itemtype": "method",
            "name": "insertBefore",
            "params": [
                {
                    "name": "domNode",
                    "description": "content to insert",
                    "type": "Node|Element|ElementArray|String"
                },
                {
                    "name": "refDomNode",
                    "description": "The Element before which newElement is inserted.",
                    "type": "Element"
                },
                {
                    "name": "escape",
                    "description": "whether to insert `escaped` content, leading it into only text inserted",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "the Element being inserted (equals domNode)",
                "type": "Node"
            },
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 5991,
            "description": "Reference to the last of sibbling vNode's, where the related dom-node is an Element(nodeType===1).",
            "itemtype": "method",
            "name": "last",
            "params": [
                {
                    "name": "cssSelector",
                    "description": "to return the last Element that matches the css-selector",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Element"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 6004,
            "description": "Reference to the last child-Element, where the related dom-node an Element (nodeType===1).",
            "itemtype": "method",
            "name": "lastOfChildren",
            "params": [
                {
                    "name": "cssSelector",
                    "description": "to return the last Element that matches the css-selector",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Element"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 6017,
            "description": "Indicates if the element would be selected by the specified selector string.\nAlias for matchesSelector()",
            "itemtype": "method",
            "name": "matches",
            "params": [
                {
                    "name": "cssSelector",
                    "description": "the css-selector to check for",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 6030,
            "description": "Indicates if the element would be selected by the specified selector string.\nAlias for matches()",
            "itemtype": "method",
            "name": "matchesSelector",
            "params": [
                {
                    "name": "cssSelector",
                    "description": "the css-selector to check for",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 6043,
            "description": "Reference to the next of sibbling Element, where the related dom-node is an Element(nodeType===1).",
            "itemtype": "method",
            "name": "next",
            "params": [
                {
                    "name": "cssSelector",
                    "description": "css-selector to be used as a filter",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Element|null"
            },
            "type": "Element",
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 6078,
            "description": "Prepends a Element or text at the start of Element's innerHTML, or before the `refElement`.",
            "itemtype": "method",
            "name": "prepend",
            "params": [
                {
                    "name": "content",
                    "description": "content to prepend",
                    "type": "Element|Element|ElementArray|String"
                },
                {
                    "name": "escape",
                    "description": "whether to insert `escaped` content, leading it into only text inserted",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "refElement",
                    "description": "reference Element where the content should be prepended",
                    "type": "Element",
                    "optional": true
                }
            ],
            "return": {
                "description": "the created Element (or the last when multiple)",
                "type": "Element"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 6128,
            "description": "Reference to the previous of sibbling Element, where the related dom-node is an Element(nodeType===1).",
            "itemtype": "method",
            "name": "previous",
            "params": [
                {
                    "name": "cssSelector",
                    "description": "css-selector to be used as a filter",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Element|null"
            },
            "type": "Element",
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 6163,
            "description": "Returns the first Element within the Element, that matches the CSS-selectors. You can pass one, or multiple CSS-selectors. When passed multiple,\nthey need to be separated by a `comma`.",
            "itemtype": "method",
            "name": "querySelector",
            "params": [
                {
                    "name": "selectors",
                    "description": "CSS-selector(s) that should match",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Element"
            },
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 6196,
            "description": "Returns an ElementArray of all Elements within the Element, that match the CSS-selectors. You can pass one, or multiple CSS-selectors. When passed multiple,\nthey need to be separated by a `comma`.\n\nquerySelectorAll is a snapshot of the dom at the time this method was called. It is not updated when changes of the dom are made afterwards.",
            "itemtype": "method",
            "name": "querySelectorAll",
            "params": [
                {
                    "name": "selectors",
                    "description": "CSS-selector(s) that should match",
                    "type": "String"
                }
            ],
            "return": {
                "description": "non-life Array (snapshot) with Elements",
                "type": "ElementArray"
            },
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 6231,
            "description": "Checks whether the Element has its rectangle inside the outbound-Element.\nThis is no check of the DOM-tree, but purely based upon coordinates.",
            "itemtype": "method",
            "name": "rectangleInside",
            "params": [
                {
                    "name": "outboundElement",
                    "description": "the Element where this element should lie inside",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "whether the Element lies inside the outboundElement",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 6250,
            "description": "Removes the Element from the DOM.\nAlias for thisNode.parentNode.removeChild(thisNode);",
            "itemtype": "method",
            "name": "remove",
            "return": {
                "description": "the DOM-node that was removed. You could re-insert it at a later time.",
                "type": "Node"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 6266,
            "description": "Removes the attribute from the Element.\n\nAlias for removeAttribute() BUT is chainable instead (removeAttribute is not).",
            "itemtype": "method",
            "name": "removeAttr",
            "params": [
                {
                    "name": "attributeName",
                    "description": "",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 6281,
            "description": "Removes the attribute from the Element.\n\nUse removeAttr() to be able to chain.",
            "itemtype": "method",
            "name": "removeAttr",
            "params": [
                {
                    "name": "attributeName",
                    "description": "",
                    "type": "String"
                }
            ],
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 6295,
            "description": "Removes the Element's child-Node from the DOM.",
            "itemtype": "method",
            "name": "removeChild",
            "params": [
                {
                    "name": "domNode",
                    "description": "the child-Node to remove",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "the DOM-node that was removed. You could re-insert it at a later time.",
                "type": "Node"
            },
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 6309,
            "description": "Removes a className from the Element.",
            "itemtype": "method",
            "name": "removeClass",
            "params": [
                {
                    "name": "className",
                    "description": "the className that should be removed. May be an Array of classNames.",
                    "type": "String|Array"
                },
                {
                    "name": "returnPromise",
                    "description": "whether to return a Promise instead of `this`, which might be useful in case of\n       transition-properties. The promise will fullfil when the transition is ready, or immediately when no transitioned.",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "transitionFix",
                    "description": "set this to `true` if you experience transition-problems due to wrong calculated css (mostly because of the `auto` value)\n       Setting this parameter, will calculate the true css of the transitioned properties and set this temporarely inline, to fix the issue.\n       Don't use it when not needed, it has a slightly performancehit.\n       No need to set when `returnPromise` is set --> returnPromise always handles the transitionFix.",
                    "optional": true
                }
            ],
            "return": {
                "description": "In case `returnPromise` is set, a Promise returns with the next handles:\n       <ul>\n           <li>cancel() {Promise}</li>\n           <li>freeze() {Promise}</li>\n           <li>unfreeze()</li>\n           <li>finish() {Promise}</li>\n       </ul>\n       These handles resolve with the `elapsed-time` as first argument of the callbackFn",
                "type": "Promise|this"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 6338,
            "description": "Removes data specified by `key` that was set by using `setData()`.\nWhen no arguments are passed, all node-data (key-value pairs) will be removed.",
            "itemtype": "method",
            "name": "removeData",
            "params": [
                {
                    "name": "key",
                    "description": "name of the key",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 6365,
            "description": "Removes the Elment's `id`.",
            "itemtype": "method",
            "name": "removeId",
            "chainable": 1,
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 6376,
            "description": "Removes a css-property (inline) out of the Element.\nNo need to use camelCase.",
            "itemtype": "method",
            "name": "removeInlineStyle",
            "params": [
                {
                    "name": "cssProperty",
                    "description": "the css-property to remove",
                    "type": "String"
                },
                {
                    "name": "pseudo",
                    "description": "to look inside a pseudo-style",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "returnPromise",
                    "description": "whether to return a Promise instead of `this`, which might be useful in case of\n       transition-properties. The promise will fullfil when the transition is ready, or immediately when no transitioned.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 6392,
            "description": "Removes multiple css-properties (inline) out of the Element. You need to supply an Array of Objects, with the properties:\n       <ul>\n           <li>property  {String}</li>\n           <li>pseudo  {String}</li>\n       <ul>\nNo need to use camelCase.",
            "itemtype": "method",
            "name": "removeInlineStyles",
            "params": [
                {
                    "name": "cssProperties",
                    "description": "Array of objects, Strings (or 1 Object/String).\n      When String, then speduo is considered as undefined. When `Objects`, they need the properties:\n       <ul>\n           <li>property  {String}</li>\n           <li>pseudo  {String}</li>\n       <ul>",
                    "type": "Array|Object"
                },
                {
                    "name": "returnPromise",
                    "description": "whether to return a Promise instead of `this`, which might be useful in case of\n       transition-properties. The promise will fullfil when the transition is ready, or immediately when no transitioned.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 6553,
            "description": "Removes a subtype `transform`-css-property of (inline) out of the Element.\nThis way you can sefely remove partial `transform`-properties while remaining the\nother inline `transform` css=properties.\n\nSee more about tranform-properties: https://developer.mozilla.org/en-US/docs/Web/CSS/transform",
            "itemtype": "method",
            "name": "removeInlineTransition",
            "params": [
                {
                    "name": "transitionProperty",
                    "description": "the css-transform property to remove",
                    "type": "String"
                },
                {
                    "name": "pseudo",
                    "description": "to look inside a pseudo-style",
                    "type": "String",
                    "optional": true
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 6570,
            "description": "Removes multiple subtype `transform`-css-property of (inline) out of the Element.\nThis way you can sefely remove partial `transform`-properties while remaining the\nother inline `transform` css=properties.\nYou need to supply an Array of Objects, with the properties:\n       <ul>\n           <li>property  {String}</li>\n           <li>pseudo  {String}</li>\n       <ul>\n\nSee more about tranform-properties: https://developer.mozilla.org/en-US/docs/Web/CSS/transform",
            "itemtype": "method",
            "name": "removeInlineTransitions",
            "params": [
                {
                    "name": "transitionProperties",
                    "description": "the css-transform properties to remove",
                    "type": "Array|Object"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 6617,
            "description": "Replaces the Element with a new Element.",
            "itemtype": "method",
            "name": "replace",
            "params": [
                {
                    "name": "content",
                    "description": "content to replace",
                    "type": "Element|Element|ElementArray|String"
                },
                {
                    "name": "escape",
                    "description": "whether to insert `escaped` content, leading it into only text inserted",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "the created Element (or the last when multiple)",
                "type": "Element"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 6638,
            "description": "Replaces the Element's child-Element with a new Element.",
            "itemtype": "method",
            "name": "replaceChild",
            "params": [
                {
                    "name": "newElement",
                    "description": "the new Element",
                    "type": "Element"
                },
                {
                    "name": "oldVChild",
                    "description": "the Element to be replaced",
                    "type": "Element"
                },
                {
                    "name": "escape",
                    "description": "whether to insert `escaped` content, leading it into only text inserted",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "the Element that was removed (equals oldVChild)",
                "type": "Element"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 6653,
            "description": "Replaces the className of the Element with a new className.\nIf the previous className is not available, the new className is set nevertheless.",
            "itemtype": "method",
            "name": "replaceClass",
            "params": [
                {
                    "name": "prevClassName",
                    "description": "the className to be replaced",
                    "type": "String"
                },
                {
                    "name": "newClassName",
                    "description": "the className to be set",
                    "type": "String"
                },
                {
                    "name": "[force",
                    "description": "]  whether the new className should be set, even is the previous className isn't there",
                    "type": "Boolean"
                },
                {
                    "name": "returnPromise",
                    "description": "whether to return a Promise instead of `this`, which might be useful in case of\n       transition-properties. The promise will fullfil when the transition is ready, or immediately when no transitioned.",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "transitionFix",
                    "description": "set this to `true` if you experience transition-problems due to wrong calculated css (mostly because of the `auto` value)\n       Setting this parameter, will calculate the true css of the transitioned properties and set this temporarely inline, to fix the issue.\n       Don't use it when not needed, it has a slightly performancehit.\n       No need to set when `returnPromise` is set --> returnPromise always handles the transitionFix.",
                    "optional": true
                }
            ],
            "return": {
                "description": "In case `returnPromise` is set, a Promise returns with the next handles:\n       <ul>\n           <li>cancel() {Promise}</li>\n           <li>freeze() {Promise}</li>\n           <li>unfreeze()</li>\n           <li>finish() {Promise}</li>\n       </ul>\n       These handles resolve with the `elapsed-time` as first argument of the callbackFn",
                "type": "Promise|this"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 6689,
            "description": "Scrolls the content of the Element into the specified scrollposition.\nOnly available when the Element has overflow.",
            "itemtype": "method",
            "name": "scrollTo",
            "params": [
                {
                    "name": "x",
                    "description": "left-offset in pixels",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "top-offset in pixels",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 6706,
            "description": "Sets the attribute on the Element with the specified value.\n\nAlias for setAttribute(), BUT differs in a way that setAttr is chainable, setAttribute is not.",
            "itemtype": "method",
            "name": "setAttr",
            "params": [
                {
                    "name": "attributeName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "the value that belongs to `key`",
                    "type": "Any"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 6723,
            "description": "Sets the attribute on the Element with the specified value.\n\nAlias for setAttr(), BUT differs in a way that setAttr is chainable, setAttribute is not.",
            "itemtype": "method",
            "name": "setAttribute",
            "params": [
                {
                    "name": "attributeName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "the value for the attributeName",
                    "type": "String"
                }
            ],
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 6740,
            "description": "Sets multiple attributes on the Element with the specified value.\nThe argument should be one ore more Objects with the properties: `name` and `value`",
            "example": [
                "\ninstance.setAttrs([\n                     {name: 'tabIndex', value: '0'},\n                     {name: 'style', value: 'color: #000;'}\n                 ]);"
            ],
            "itemtype": "method",
            "name": "setAttrs",
            "params": [
                {
                    "name": "attributeData",
                    "description": "",
                    "type": "Array|Object"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 6764,
            "description": "Adds a class to the Element. If the class already exists it won't be duplicated.",
            "itemtype": "method",
            "name": "setClass",
            "params": [
                {
                    "name": "className",
                    "description": "className to be added, may be an array of classNames",
                    "type": "String|Array"
                },
                {
                    "name": "returnPromise",
                    "description": "whether to return a Promise instead of `this`, which might be useful in case of\n       transition-properties. The promise will fullfil when the transition is ready, or immediately when no transitioned.",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "transitionFix",
                    "description": "set this to `true` if you experience transition-problems due to wrong calculated css (mostly because of the `auto` value)\n       Setting this parameter, will calculate the true css of the transitioned properties and set this temporarely inline, to fix the issue.\n       Don't use it when not needed, it has a slightly performancehit.\n       No need to set when `returnPromise` is set --> returnPromise always handles the transitionFix.",
                    "optional": true
                }
            ],
            "return": {
                "description": "In case `returnPromise` is set, a Promise returns with the next handles:\n       <ul>\n           <li>cancel() {Promise}</li>\n           <li>freeze() {Promise}</li>\n           <li>unfreeze()</li>\n           <li>finish() {Promise}</li>\n       </ul>\n       These handles resolve with the `elapsed-time` as first argument of the callbackFn",
                "type": "Promise|this"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 6793,
            "description": "Stores arbitary `data` at the Element (actually at vnode). This has nothing to do with node-attributes whatsoever,\nit is just a way to bind any data to the specific Element so it can be retrieved later on with `getData()`.",
            "itemtype": "method",
            "name": "setData",
            "params": [
                {
                    "name": "key",
                    "description": "name of the key",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "the value that belongs to `key`",
                    "type": "Any"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 6817,
            "description": "Sets the innerHTML of both the vnode as well as the representing dom-node.\nGoes through the vdom, so it's superfast.\n\nUse this method instead of `innerHTML`\n\nSyncs with the DOM.",
            "itemtype": "method",
            "name": "setHTML",
            "params": [
                {
                    "name": "val",
                    "description": "the new value to be set",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 6835,
            "description": "Sets the Elments `id`",
            "itemtype": "method",
            "name": "setId",
            "params": [
                {
                    "name": "val",
                    "description": "Elements new `id`",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 6847,
            "description": "Sets a css-property (inline) for the Element.\n\nNote1: Do not use vendor-specific properties, but general (like `transform` instead of `-webkit-transform`)\n       This method will use the appropriate css-property.\nNote2: no need to camelCase cssProperty: both `margin-left` as well as `marginLeft` are fine",
            "itemtype": "method",
            "name": "setInlineStyle",
            "params": [
                {
                    "name": "cssProperty",
                    "description": "the css-property to be set",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "the css-value",
                    "type": "String"
                },
                {
                    "name": "pseudo",
                    "description": "to look inside a pseudo-style",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "returnPromise",
                    "description": "whether to return a Promise instead of `this`, which might be useful in case of\n       transition-properties. The promise will fullfil when the transition is ready, or immediately when no transitioned.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Promise|this"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 6871,
            "description": "Sets multiple css-properties (inline) for the Element at once.\n\nNote1: Do not use vendor-specific properties, but general (like `transform` instead of `-webkit-transform`)\n       This method will use the appropriate css-property.\nNote2: no need to camelCase cssProperty: both `margin-left` as well as `marginLeft` are fine",
            "itemtype": "method",
            "name": "setInlineStyles",
            "params": [
                {
                    "name": "cssProperties",
                    "description": "the css-properties to be set, specified as an Array of Objects, or 1 Object.\n       The objects should have the next properties:\n       <ul>\n           <li>property  {String}</li>\n           <li>value  {String}</li>\n           <li>pseudo  {String} (optional) --> not: not supported yet in browsers</li>\n       </ul>",
                    "type": "Array|Object"
                },
                {
                    "name": "returnPromise",
                    "description": "whether to return a Promise instead of `this`, which might be useful in case of\n       transition-properties. The promise will fullfil when the transition is ready, or immediately when no transitioned.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Promise|this"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 7052,
            "description": "Sets a transform-css-property (inline) for the Element.\n\nSee more about transitions: https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Using_CSS_transitions",
            "itemtype": "method",
            "name": "setStyle",
            "params": [
                {
                    "name": "setInlineTransition",
                    "description": "the css-property to be set, f.e. `translateX`",
                    "type": "String"
                },
                {
                    "name": "duration",
                    "description": "the duration in seconds (may be a broken number, like `0.5`)",
                    "type": "Number"
                },
                {
                    "name": "timingFunction",
                    "description": "See https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "delay",
                    "description": "the delay in seconds (may be a broken number, like `0.5`)",
                    "type": "Number"
                },
                {
                    "name": "pseudo",
                    "description": "to look inside a pseudo-style",
                    "type": "String",
                    "optional": true
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 7071,
            "description": "Sets a transform-css-property (inline) for the Element.\n\nSee more about transitions: https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Using_CSS_transitions",
            "itemtype": "method",
            "name": "setStyle",
            "params": [
                {
                    "name": "transitionProperties",
                    "description": "the css-transition-properties to be set, specified as an Array of Objects.\n       The objects should have the next properties:\n       <ul>\n           <li>property  {String}</li>\n           <li>duration  {Number}</li>\n           <li>timingFunction  {String} (optional)</li>\n           <li>delay  {Number} (optional)</li>\n           <li>pseudo  {String} (optional)</li>\n       </ul>",
                    "type": "Array"
                },
                {
                    "name": "pseudo",
                    "description": "to look inside a pseudo-style",
                    "type": "String",
                    "optional": true
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 7118,
            "description": "Gets or sets the outerHTML of both the Element as well as the representing dom-node.\nGoes through the vdom, so it's superfast.\n\nUse this property instead of `outerHTML`\n\nSyncs with the DOM.",
            "itemtype": "method",
            "name": "setOuterHTML",
            "params": [
                {
                    "name": "val",
                    "description": "the new value to be set",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 7136,
            "description": "Sets the innerContent of the Element as plain text.\nGoes through the vdom, so it's superfast.\n\nUse this method instead of `textContent`\n\nSyncs with the DOM.",
            "itemtype": "method",
            "name": "setText",
            "params": [
                {
                    "name": "val",
                    "description": "the textContent to be set",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 7154,
            "description": "Sets the value of the following Elements:\n\n<ul>\n    <li>input</li>\n    <li>textarea</li>\n    <li>select</li>\n    <li>any container that is `contenteditable`</li>\n</ul>\n\nWill emit a `valuechange`-event when a new value is set and ITSA's `event`-module is active.",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "val",
                    "description": "thenew value to be set",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 7201,
            "itemtype": "event",
            "name": "valuechange",
            "params": [
                {
                    "name": "e.value",
                    "description": "new value",
                    "type": "String"
                },
                {
                    "name": "e.sourceTarget",
                    "description": "Element whare the valuechange occured",
                    "type": "Element"
                }
            ],
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 7210,
            "description": "Set the position of an html element in page coordinates.\nThe element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).\n\nIf the Element has the attribute `xy-constrian` set, then its position cannot exceed any matching container it lies within.",
            "itemtype": "method",
            "name": "setXY",
            "params": [
                {
                    "name": "x",
                    "description": "x-value for new position (coordinates are page-based)",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-value for new position (coordinates are page-based)",
                    "type": "Number"
                },
                {
                    "name": "constrain",
                    "description": "\n<ul>\n    <li><b>'window'</b> to constrain to the visible window</li>\n    <li><b>Element</b> to constrain to a specified Element</li>\n    <li><b>Object</b> to constrain to an object with the properties: {x, y, w, h} where x and y are absolute pixels of the document\n           (like calculated with getX() and getY()).</li>\n    <li><b>String</b> to constrain to a specified css-selector, which should be an ancestor</li>\n</ul>",
                    "type": "'window', Element, Object, String",
                    "optional": true
                },
                {
                    "name": "notransition",
                    "description": "set true if you are sure positioning is without transition.\n       this isn't required, but it speeds up positioning. Only use when no transition is used:\n       when there is a transition, setting this argument `true` would miscalculate the position.\n       The return-value will be `this` in case `notransition`===true, making setXY to be chainable.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise|this"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 7365,
            "description": "Shows a previously hidden node.\nShows immediately without `fade`, or will fade-in when fade is specified.",
            "itemtype": "method",
            "name": "show",
            "params": [
                {
                    "name": "fade",
                    "description": "sec to fade-in (you may use `0.1`)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "fulfilled when the element is ready showing up, or rejected when hidden again (using node.hide) before fully showed.",
                "type": "This|Promise"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 7424,
            "description": "Transitions one ore more properties of the Element.",
            "itemtype": "method",
            "name": "toggleClass",
            "params": [
                {
                    "name": "to",
                    "description": "the css-properties to be set, specified as an Array of Objects.\n       The objects should have the next properties:\n       <ul>\n           <li>property  {String}</li>\n           <li>value  {String}</li>\n           <li>duration  {Number} (optional)</li>\n           <li>timingFunction  {String} (optional)</li>\n           <li>delay  {String} (optional)</li>\n           <li>pseudo  {String} (optional) --> not: not supported yet in browsers</li>\n       </ul>",
                    "type": "Array"
                },
                {
                    "name": "from",
                    "description": "starting the css-properties to be set, specified as an Array of Objects.\n       If disguarded, then the current style is used as startingpoint. You may specify a subset of the `to`-properties.\n       The objects should have the next properties:\n       <ul>\n           <li>property  {String}</li>\n           <li>value  {String}</li>\n           <li>duration  {Number} (optional)</li>\n           <li>timingFunction  {String} (optional)</li>\n           <li>delay  {String} (optional)</li>\n           <li>pseudo  {String} (optional) --> not: not supported yet in browsers</li>\n       </ul>",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "The promise has the handles:\n       <ul>\n           <li>cancel() {Promise}</li>\n           <li>freeze() {Promise}</li>\n           <li>unfreeze()</li>\n           <li>finish() {Promise}</li>\n       </ul>\n       These handles resolve with the `elapsed-time` as first argument of the callbackFn",
                "type": "Promise"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 7636,
            "description": "Toggles the className of the Element.",
            "itemtype": "method",
            "name": "toggleClass",
            "params": [
                {
                    "name": "className",
                    "description": "className that should be toggled, may be an array of classNames",
                    "type": "String|Array"
                },
                {
                    "name": "forceState",
                    "description": "to force toggling into this specific state",
                    "type": "Boolean"
                },
                {
                    "name": "returnPromise",
                    "description": "whether to return a Promise instead of `this`, which might be useful in case of\n       transition-properties. The promise will fullfil when the transition is ready, or immediately when no transitioned.",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "transitionFix",
                    "description": "set this to `true` if you experience transition-problems due to wrong calculated css (mostly because of the `auto` value)\n       Setting this parameter, will calculate the true css of the transitioned properties and set this temporarely inline, to fix the issue.\n       Don't use it when not needed, it has a slightly performancehit.\n       No need to set when `returnPromise` is set --> returnPromise always handles the transitionFix.",
                    "optional": true
                }
            ],
            "return": {
                "description": "In case `returnPromise` is set, a Promise returns with the next handles:\n       <ul>\n           <li>cancel() {Promise}</li>\n           <li>freeze() {Promise}</li>\n           <li>unfreeze()</li>\n           <li>finish() {Promise}</li>\n       </ul>\n       These handles resolve with the `elapsed-time` as first argument of the callbackFn",
                "type": "Promise|this"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 7668,
            "description": "Gets or set the height of the element in pixels. Included are padding and border, not any margins.\nBy setting the argument `overflow` you get the total height, included the invisible overflow.\n\nThe getter is calculating through `offsetHeight`, the setter will set inline css-style for the height.\n\nValues are numbers without unity.",
            "itemtype": "property",
            "name": "height",
            "type": "{Number}",
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 7695,
            "description": "Gets the x-position (in the DOCUMENT) of the element in pixels.\nDOCUMENT-related: regardless of the window's scroll-position.",
            "itemtype": "property",
            "name": "left",
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 7711,
            "description": "Gets the y-position (in the DOCUMENT) of the element in pixels.\nDOCUMENT-related: regardless of the window's scroll-position.",
            "itemtype": "property",
            "name": "top",
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 7727,
            "description": "Gets or set the width of the element in pixels. Included are padding and border, not any margins.\nBy setting the argument `overflow` you get the total width, included the invisible overflow.\n\nThe getter is calculating through `offsetHeight`, the setter will set inline css-style for the width.\n\nValues are numbers without unity.",
            "itemtype": "property",
            "name": "width",
            "type": "{Number}",
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 7833,
            "description": "Returns the specified attribute of the specified element, as an Attr node.",
            "itemtype": "method",
            "name": "getAttributeNode",
            "return": {
                "description": "",
                "type": "AttributeNode"
            },
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 7840,
            "description": "Returns a text rectangle object that encloses a group of text rectangles. The returned value is\na TextRectangle object which is the union of the rectangles returned by getClientRects() for the element,\ni.e., the CSS border-boxes associated with the element.\n\nThe returned value is a TextRectangle object, which contains read-only left, top, right and bottom properties\ndescribing the border-box in pixels. top and left are relative to the top-left of the viewport.",
            "itemtype": "method",
            "name": "getBoundingClientRect",
            "return": {
                "description": "Therectangle object that encloses a group of text rectangles.",
                "type": "AttributeNode"
            },
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 7852,
            "description": "Returns a collection of rectangles that indicate the bounding rectangles for each box in a client.\n\nThe returned value is a collection of ClientRect objects, one for each CSS border box associated with the element.\nEach ClientRect object contains read-only left, top, right and bottom properties describing the border box, in pixels,\nwith the top-left relative to the top-left of the viewport. For tables with captions,\nthe caption is included even though it's outside the border box of the table.",
            "itemtype": "method",
            "name": "getClientRects",
            "return": {
                "description": "",
                "type": "Collection"
            },
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 7864,
            "description": "Returns a new NodeIterator object with this Element as root.\n\nThe NodeIterator is a snapshot of the dom at the time this method was called. It is not updated when changes of the dom are made afterwards.",
            "itemtype": "method",
            "name": "createNodeIterator",
            "params": [
                {
                    "name": "whatToShow",
                    "description": "Filter specification constants from the NodeFilter DOM interface, indicating which nodes to iterate over.\nYou can use or sum one of the next properties:\n<ul>\n  <li>window.NodeFilter.SHOW_ELEMENT</li>\n  <li>window.NodeFilter.SHOW_COMMENT</li>\n  <li>window.NodeFilter.SHOW_TEXT</li>\n</ul>",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "filter",
                    "description": "An object implementing the NodeFilter interface or a function. See https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter",
                    "type": "NodeFilter|function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "NodeIterator"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 7882,
            "description": "Returns an HTMLCollection of all Elements within this Element, that match their classes with the supplied `classNames` argument.\nTo match multiple different classes, separate them with a `comma`.\n\ngetElementsByClassName is life presentation of the dom. The returned HTMLCollection gets updated when the dom changes.\n\nNOTE: it is highly recomended to use `document.getAll` because that method takes advantage of the vdom.",
            "itemtype": "method",
            "name": "getElementsByClassName",
            "params": [
                {
                    "name": "classNames",
                    "description": "the classes to search for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "life Array with Elements",
                "type": "HTMLCollection"
            },
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 7895,
            "description": "Returns an HTMLCollection of all Elements within this Element, that match their `name`-attribute with the supplied `name` argument.\n\ngetElementsByName is life presentation of the dom. The returned HTMLCollection gets updated when the dom changes.\n\nNOTE: it is highly recomended to use `document.getAll` because that method takes advantage of the vdom.",
            "itemtype": "method",
            "name": "getElementsByName",
            "params": [
                {
                    "name": "name",
                    "description": "the property of name-attribute to search for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "life Array with Elements",
                "type": "HTMLCollection"
            },
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 7908,
            "description": "Returns an HTMLCollection of all Elements within this Element, that match their `name`-attribute with the supplied `name` argument.\n\ngetElementsByTagName is life presentation of the dom. The returned HTMLCollection gets updated when the dom changes.\n\nNOTE: it is highly recomended to use `document.getAll` because that method takes advantage of the vdom.",
            "itemtype": "method",
            "name": "getElementsByTagName",
            "params": [
                {
                    "name": "tagNames",
                    "description": "the tags to search for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "life Array with Elements",
                "type": "HTMLCollection"
            },
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 7920,
            "description": "Inserts the Element into the DOM tree at a specified position.",
            "itemtype": "method",
            "name": "insertAdjacentElement",
            "params": [
                {
                    "name": "position",
                    "description": "\n<ul>\n    <li>'beforebegin' Before the element itself</li>\n    <li>'afterbegin' Just inside the element, before its first child</li>\n    <li>'beforeend' Just inside the element, after its last child</li>\n    <li>'afterend' After the element itself</li>\n<ul>",
                    "type": "String"
                },
                {
                    "name": "element",
                    "description": "",
                    "type": "Element"
                }
            ],
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 7934,
            "description": "Parses the specified text as HTML and inserts the resulting nodes into the DOM tree at a specified position.",
            "itemtype": "method",
            "name": "insertAdjacentHTML",
            "params": [
                {
                    "name": "position",
                    "description": "\n<ul>\n    <li>'beforebegin' Before the element itself</li>\n    <li>'afterbegin' Just inside the element, before its first child</li>\n    <li>'beforeend' Just inside the element, after its last child</li>\n    <li>'afterend' After the element itself</li>\n<ul>",
                    "type": "String"
                },
                {
                    "name": "element",
                    "description": "",
                    "type": "Element"
                }
            ],
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 7948,
            "description": "Inserts the text into the DOM tree as a TextNode at a specified position.",
            "itemtype": "method",
            "name": "insertAdjacentText",
            "params": [
                {
                    "name": "position",
                    "description": "\n<ul>\n    <li>'beforebegin' Before the element itself</li>\n    <li>'afterbegin' Just inside the element, before its first child</li>\n    <li>'beforeend' Just inside the element, after its last child</li>\n    <li>'afterend' After the element itself</li>\n<ul>",
                    "type": "String"
                },
                {
                    "name": "element",
                    "description": "",
                    "type": "Element"
                }
            ],
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 7962,
            "description": "Removes the attribute specified by an attributeNode from the Element.",
            "itemtype": "method",
            "name": "removeAttributeNode",
            "params": [
                {
                    "name": "attributeNode",
                    "description": "",
                    "type": "AttributeNode"
                }
            ],
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 7970,
            "description": "Scrolls the element into view.",
            "itemtype": "method",
            "name": "scrollIntoView",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 7976,
            "description": "Sets the attribute on the Element specified by `attributeNode`",
            "itemtype": "method",
            "name": "setAttributeNode",
            "params": [
                {
                    "name": "attributeNode",
                    "description": "",
                    "type": "AttributeNode"
                }
            ],
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 7985,
            "description": "Fired when a static `script` element  finishes executing its script. Does not fire if the element is added dynamically, eg with appendChild().",
            "itemtype": "event",
            "name": "afterscriptexecute",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 7992,
            "description": "Fired when the code in a `script` element declared in an HTML document is about to start executing. Does not fire if the element is added dynamically, eg with appendChild().",
            "itemtype": "event",
            "name": "beforescriptexecute",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8000,
            "description": "sets or returns an accesskey for an element. An accesskey specifies a shortcut key to activate/focus an element.\nNote: The way of accessing the shortcut key is varying in different browsers: http://www.w3schools.com/jsref/prop_html_accesskey.asp",
            "itemtype": "property",
            "name": "accessKey",
            "type": "String",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8009,
            "description": "Returns a live collection of all attribute nodes registered to the specified node.\nIt is a NamedNodeMap, not an Array, so it has no Array methods and the Attr nodes' indexes may differ among browsers.\nTo be more specific, attributes is a key/value pair of strings that represents any information regarding that attribute.\n\nPrefer to use `getAttrs()` which is much quicker, but doesn't return a life-list.",
            "itemtype": "property",
            "name": "attributes",
            "type": "NamedNodeMap",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8020,
            "description": "The absolute base URL of a node.",
            "itemtype": "property",
            "name": "baseURI",
            "type": "String",
            "readonly": "",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8028,
            "description": "Returns the number of children (child Elements)",
            "itemtype": "property",
            "name": "childElementCount",
            "type": "Number",
            "readonly": "",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8036,
            "description": "Returns a live collection of childNodes of the given element, either Element, TextNode or CommentNode",
            "itemtype": "property",
            "name": "childNodes",
            "type": "NodeList",
            "readonly": "",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8044,
            "description": "Returns a live collection of child Element's of the given element.",
            "itemtype": "property",
            "name": "children",
            "type": "NodeList",
            "readonly": "",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8052,
            "description": "Gets and sets the value of the class attribute of the specified element.",
            "itemtype": "property",
            "name": "className",
            "type": "String",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8059,
            "description": "Returns the inner height of an element in pixels, including padding but not the horizontal scrollbar height, border, or margin.",
            "itemtype": "property",
            "name": "clientHeight",
            "type": "Number",
            "readonly": "",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8067,
            "description": "The width of the left border of an element in pixels. It includes the width of the vertical scrollbar if the text direction of the element is right–to–left\nand if there is an overflow causing a left vertical scrollbar to be rendered. clientLeft does not include the left margin or the left padding.",
            "itemtype": "property",
            "name": "clientLeft",
            "type": "Number",
            "readonly": "",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8076,
            "description": "The width of the top border of an element in pixels. It does not include the top margin or padding.",
            "itemtype": "property",
            "name": "clientTop",
            "type": "Number",
            "readonly": "",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8084,
            "description": "Returns the inner width of an element in pixels, including padding but not the vertical scrollbar height, border, or margin.",
            "itemtype": "property",
            "name": "clientWidth",
            "type": "Number",
            "readonly": "",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8092,
            "description": "Reference to the first childNode, where the related dom-node is either an Element, TextNode or CommentNode (nodeType===1, 3 or 8).\n\nBetter work with Elements only:  use `firstElementChild` instead, which returns the first Element-child.",
            "itemtype": "property",
            "name": "firstChild",
            "type": "Node",
            "readonly": "",
            "deprecated": true,
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8103,
            "description": "Reference to the first Element-child, which is an Element (nodeType===1).",
            "itemtype": "property",
            "name": "firstElementChild",
            "type": "Element",
            "readonly": "",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8111,
            "description": "Gets or sets the element's attribute `href`. Only applies for the `a`-element.",
            "itemtype": "property",
            "name": "href",
            "type": "String",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8118,
            "description": "Gets or sets the element's identifier (attribute id).",
            "itemtype": "property",
            "name": "id",
            "type": "String",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8125,
            "description": "Reference to the last childNode, where the related dom-node is either an Element, TextNode or CommentNode (nodeType===1, 3 or 8).\n\nBetter use `lastElementChild` instead, which returns the last Element-child.",
            "itemtype": "property",
            "name": "lastChild",
            "type": "Node",
            "readonly": "",
            "deprecated": true,
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8136,
            "description": "Reference to the last Element-child, where the related dom-node is an Element (nodeType===1).",
            "itemtype": "property",
            "name": "lastElementChild",
            "type": "Element",
            "readonly": "",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8144,
            "description": "Gets or sets the `name` property of a Element; it only applies to the following elements:\n`a`, `applet`, `button`, `form`, `frame`, `iframe`, `img`, `input`, `map`, `meta`, `object`, `param`, `select`, and `textarea`.",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8152,
            "description": "Returns the Element immediately following the specified one in its parent's childNodes list, or null if the specified node is the last node in that list.\nIs an Element (nodeType===1).",
            "itemtype": "property",
            "name": "nextElementSibling",
            "type": "Element",
            "readonly": "",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8161,
            "description": "Returns the Element immediately following the specified one in its parent's childNodes list, or null if the specified node is the last node in that list.\nIs either an Element, TextNode or CommentNode (nodeType===1, 3 or 8).\n\nDo not use this, but use `lastElementChild` instead, which returns the next Element-child.",
            "itemtype": "property",
            "name": "nextElementSibling",
            "type": "Node",
            "deprecated": true,
            "readonly": "",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8173,
            "description": "Elements tag-name",
            "itemtype": "property",
            "name": "nodeName",
            "type": "String",
            "readonly": "",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8181,
            "description": "Elements nodetype: 1==Element, 3==TextNode, 8===CommentNode",
            "itemtype": "property",
            "name": "nodeType",
            "type": "String",
            "readonly": "",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8189,
            "description": "Value/text for non-Element Nodes",
            "itemtype": "property",
            "name": "nodeValue",
            "type": "String",
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8197,
            "description": "The exact width of the Element on the screen.\nIncluded borders and padding (no margin).\n\nReturns a number without unity.\n\nBetter use `width` --> it's an alias, but has a setter as well",
            "itemtype": "property",
            "name": "offsetWidth",
            "type": "Number",
            "readonly": "",
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8211,
            "description": "The exact height of the Element on the screen.\nIncluded borders and padding (no margin).\n\nReturns a number without unity.\n\nBetter use `height` --> it's an alias, but has a setter as well",
            "itemtype": "property",
            "name": "offsetHeight",
            "type": "Number",
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8224,
            "description": "Returns the Element's parent Element.\n\nSame as `parentNode`",
            "itemtype": "property",
            "name": "parentElement",
            "type": "Element",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8233,
            "description": "Returns the Element's parent Element.\n\nSame as `parentElement`",
            "itemtype": "property",
            "name": "parentNode",
            "type": "Element",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8242,
            "description": "Returns the Element immediately preceding the specified one in its parent's childNodes list, or null if the specified node is the last node in that list.\nIs an Element (nodeType===1).",
            "itemtype": "property",
            "name": "previousElementSibling",
            "type": "Element",
            "readonly": "",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8251,
            "description": "Returns the Element immediately preceding the specified one in its parent's childNodes list, or null if the specified node is the last node in that list.\nIs either an Element, TextNode or CommentNode (nodeType===1, 3 or 8).\n\nDo not use this, but use `previousElementSibling` instead, which returns the previous Element-child.",
            "itemtype": "property",
            "name": "previousSibling",
            "deprecated": true,
            "type": "Node",
            "readonly": "",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8264,
            "description": "A measurement of the height of an element's content, including content not visible on the screen due to overflow.\nThe scrollHeight value is equal to the minimum clientHeight the element would require in order to fit all the content in the viewpoint\nwithout using a vertical scrollbar. It includes the element padding but not its margin.\n\nReturns a number without unity.",
            "itemtype": "property",
            "name": "scrollHeight",
            "type": "Number",
            "readonly": "",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8276,
            "description": "Gets or sets the number of pixels that an element's content is scrolled to the left.",
            "itemtype": "property",
            "name": "scrollLeft",
            "type": "Number",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8283,
            "description": "Gets or sets the number of pixels that the content of an element is scrolled upward. An element's scrollTop is a measurement\nof the distance of an element's top to its topmost visible content. When an element content does not generate a vertical scrollbar,\nthen its scrollTop value defaults to 0.",
            "itemtype": "property",
            "name": "scrollTop",
            "type": "Number",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8292,
            "description": "Returns either the width in pixels of the content of an element or the width of the element itself, whichever is greater.\nIf the element is wider than its content area (for example, if there are scroll bars for scrolling through the content),\nthe scrollWidth is larger than the clientWidth.\n\nReturns a number without unity.",
            "itemtype": "property",
            "name": "scrollWidth",
            "type": "Number",
            "readonly": "",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8304,
            "description": "Gets or sets the element's attribute `type`. Only applies for the `script`, `img` and `style`-elements.",
            "itemtype": "property",
            "name": "src",
            "type": "String",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8311,
            "description": "Gets or sets the element's attribute `style`.",
            "itemtype": "property",
            "name": "style",
            "type": "String",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8318,
            "description": "Gets or sets the element's attribute `type`. Only applies for the `input`-element.",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8325,
            "description": "Gets or sets the value of an input or select Element.\n\nNote it is highly preferable to use getValue() and setValue().",
            "itemtype": "property",
            "name": "value",
            "type": "String",
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "extend-element"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8436,
            "description": "Transforms html-text into a vnodes-Array.",
            "itemtype": "method",
            "name": "htmlToVNodes",
            "params": [
                {
                    "name": "htmlString",
                    "description": "plain html as string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "array with `vnodes`",
                "type": "Array"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "html-parser"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8702,
            "description": "Transforms a dom-node into a vnode.",
            "itemtype": "method",
            "name": "domNodeToVNode",
            "params": [
                {
                    "name": "domNode",
                    "description": "The dom-node to be transformed",
                    "type": "Node"
                },
                {
                    "name": "parentVNode",
                    "description": "the parent-vnode that belongs to the dom-node",
                    "type": "Vnode",
                    "optional": true
                }
            ],
            "return": {
                "description": "the vnode-representation of the dom-node",
                "type": "Vnode"
            },
            "since": "0.0.1",
            "class": "Element",
            "module": "vdom",
            "submodule": "node-parser"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8828,
            "description": "Reference to the VElement of document.body (gets its value as soon as it gets refered to)",
            "itemtype": "property",
            "name": "body",
            "default": "null",
            "type": "VElement",
            "since": "0.0.1",
            "class": "NS-vdom",
            "module": "vdom",
            "submodule": "vdom-ns"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8839,
            "description": "A hash with all node'ids (of all the domnodes that have an id). The value is a reference to an VElement.",
            "itemtype": "property",
            "name": "nodeids",
            "default": "{}",
            "type": "Object",
            "since": "0.0.1",
            "class": "NS-vdom",
            "module": "vdom",
            "submodule": "vdom-ns"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8849,
            "description": "A hash with all encountered non-void Elements",
            "itemtype": "property",
            "name": "nonVoidElements",
            "default": "{}",
            "type": "Object",
            "since": "0.0.1",
            "class": "NS-vdom",
            "module": "vdom",
            "submodule": "vdom-ns"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8859,
            "description": "A hash to identify what tagNames are equal to `SCRIPT` or `STYLE`.",
            "itemtype": "property",
            "name": "SCRIPT_OR_STYLE_TAG",
            "default": "{SCRIPT: true, STYLE: true}",
            "type": "Object",
            "since": "0.0.1",
            "class": "NS-vdom",
            "module": "vdom",
            "submodule": "vdom-ns"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8872,
            "description": "A hash with all nodeTypes that should be captured by the vDOM.",
            "itemtype": "property",
            "name": "VALID_NODE_TYPES",
            "default": "{1: true, 3: true, 8: true}",
            "type": "Object",
            "since": "0.0.1",
            "class": "NS-vdom",
            "module": "vdom",
            "submodule": "vdom-ns"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8886,
            "description": "A hash with all encountered void Elements",
            "itemtype": "property",
            "name": "voidElements",
            "default": "{}",
            "type": "Object",
            "since": "0.0.1",
            "class": "NS-vdom",
            "module": "vdom",
            "submodule": "vdom-ns"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8972,
            "description": "Object to gain quick access to attribute-name end-tokens.",
            "itemtype": "property",
            "name": "END_ATTRIBUTENAME",
            "default": "{\n     '=': true,\n     ']': true\n }",
            "type": "Object",
            "access": "protected",
            "tagname": "",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 8993,
            "description": "Object to gain quick access to different changes of Element nodeType changes.",
            "itemtype": "property",
            "name": "NODESWITCH",
            "default": "{\n     1: {\n         1: 1,\n         3: 2,\n         8: 3\n     },\n     3: {\n         1: 4,\n         3: 5,\n         8: 6\n     },\n     8: {\n         1: 7,\n         3: 8,\n         8: 9\n     }\n }",
            "type": "Object",
            "access": "protected",
            "tagname": "",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 9035,
            "description": "Object to gain quick access to selector start-tokens.",
            "itemtype": "property",
            "name": "SELECTOR_IDENTIFIERS",
            "default": "{\n     '#': 1,\n     '.': 2,\n     '[': 3\n }",
            "type": "Object",
            "access": "protected",
            "tagname": "",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 9064,
            "description": "Object to gain quick access to the selectors that required children",
            "itemtype": "property",
            "name": "PSEUDO_REQUIRED_CHILDREN",
            "default": "{\n    ':first-child': true,\n    ':first-of-type': true,\n    ':last-child': true,\n    ':last-of-type': true,\n    ':nth-child': true,\n    ':nth-last-child': true,\n    ':nth-last-of-type': true,\n    ':nth-of-type': true,\n    ':only-of-type': true,\n    ':only-child': true\n }",
            "type": "Object",
            "access": "protected",
            "tagname": "",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 9099,
            "description": "Searches for the next -or previous- node-sibling (nodeType of 1, 3 or 8).",
            "itemtype": "method",
            "name": "_findNodeSibling",
            "params": [
                {
                    "name": "vnode",
                    "description": "the vnode to inspect",
                    "type": "Object"
                },
                {
                    "name": "next",
                    "description": "whether to search for the next, or previous match.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "the vnode that matches the search",
                "type": "Object|undefined"
            },
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 9120,
            "description": "Searches for the next -or previous- Element-sibling (nodeType of 1).",
            "itemtype": "method",
            "name": "_findElementSibling",
            "params": [
                {
                    "name": "vnode",
                    "description": "the vnode to inspect",
                    "type": "Object"
                },
                {
                    "name": "next",
                    "description": "whether to search for the next, or previous match.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "the vnode that matches the search",
                "type": "Object|undefined"
            },
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 9149,
            "description": "Check whether the vnode matches a \"nth-child\" test, which is used for css pseudoselectors like `nth-child`, `nth-of-type` etc.",
            "itemtype": "method",
            "name": "_matchNthChild",
            "params": [
                {
                    "name": "pseudoArg",
                    "description": "the argument for nth-child",
                    "type": "String"
                },
                {
                    "name": "index",
                    "description": "the index of the inspected vnode",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "whether the vnode matches the nthChild test",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 9196,
            "description": "Check whether the vnode matches the css-selector. the css-selector should be a single selector,\nnot multiple, so it shouldn't contain a `comma`.",
            "itemtype": "method",
            "name": "_matchesOneSelector",
            "params": [
                {
                    "name": "vnode",
                    "description": "the vnode to inspect",
                    "type": "Vnode"
                },
                {
                    "name": "selector",
                    "description": "the selector-item to check the match for",
                    "type": "String"
                },
                {
                    "name": "relatedVNode",
                    "description": "a related vnode where to selectors starting with `>`, `~` or `+` should be compared.\n       If not specified, any of these three starting selector-characters will be ignored (leading to matching this first character).",
                    "type": "Vnode",
                    "optional": true
                }
            ],
            "return": {
                "description": "whether the vnode matches the css-selector",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 9288,
            "description": "Check whether the vnode matches one specific selector-item. Suppose the css-selector: \"#mynode li.red .blue\"\nthen there are 3 selector-items: \"#mynode\",  \"li.red\" and \".blue\"\n\nThis method also can handle the new selectors:\n<ul>\n    <li>[att^=val] –-> the “begins with” selector</li>\n    <li>[att$=val] –-> the “ends with” selector</li>\n    <li>[att*=val] –-> the “contains” selector (might be a substring)</li>\n    <li>[att~=val] –-> the “contains” selector as a separate word, separated by spaces</li>\n    <li>[att|=val] –-> the “contains” selector as a separate word, separated by `|`</li>\n    <li>+ --> (same level)</li>\n    <li>~ --> (same level)</li>\n</ul>",
            "itemtype": "method",
            "name": "_matchesSelectorItem",
            "params": [
                {
                    "name": "vnode",
                    "description": "the vnode to inspect",
                    "type": "Object"
                },
                {
                    "name": "selectorItem",
                    "description": "the selector-item to check the match for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "whether the vnode matches the selector-item",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 9661,
            "description": "Splits the selector into separate subselector-items that should match different elements through the tree.\nSpecial characters '>' and '+' are added as separate items in the hash.",
            "itemtype": "method",
            "name": "_splitSelector",
            "params": [
                {
                    "name": "selector",
                    "description": "the selector-item to check the match for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "splitted selectors",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 9710,
            "description": "Check whether the vnode's domNode is equal, or contains the specified Element.",
            "itemtype": "method",
            "name": "contains",
            "return": {
                "description": "whether the vnode's domNode is equal, or contains the specified Element.",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 9724,
            "description": "Returns the first child-vnode (if any). The child represents an Element (nodeType===1).",
            "itemtype": "method",
            "name": "firstOfVChildren",
            "params": [
                {
                    "name": "cssSelector",
                    "description": "one or more css-selectors",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the first child-vnode or null when not present",
                "type": "Object|null"
            },
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 9747,
            "description": "Checks whether the vnode has any vChildNodes (nodeType of 1, 3 or 8).",
            "itemtype": "method",
            "name": "hasVChildNodes",
            "return": {
                "description": "whether the vnode has any vChildNodes.",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 9758,
            "description": "Checks whether the vnode has any vChildren (vChildNodes with nodeType of 1).",
            "itemtype": "method",
            "name": "hasVChildren",
            "return": {
                "description": "whether the vnode has any vChildren.",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 9769,
            "description": "Checks whether the className is present on the vnode.",
            "itemtype": "method",
            "name": "hasClass",
            "params": [
                {
                    "name": "className",
                    "description": "the className to check for. May be an Array of classNames, which all needs to be present.",
                    "type": "String|Array"
                }
            ],
            "return": {
                "description": "whether the className (or classNames) is present on the vnode",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 9794,
            "description": "Returns the last child-vnode (if any). The child represents an Element (nodeType===1).",
            "itemtype": "method",
            "name": "lastOfVChildren",
            "params": [
                {
                    "name": "cssSelector",
                    "description": "one or more css-selectors",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the last child-vnode or null when not present",
                "type": "Object|null"
            },
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 9817,
            "description": "Checks whether the vnode matches one of the specified selectors. `selectors` can be one, or multiple css-selectors,\nseparated by a `comma`. For example: \"#myid li.red blue\" is one selector, \"div.red, div.blue, div.green\" are three selectors.",
            "itemtype": "method",
            "name": "matchesSelector",
            "params": [
                {
                    "name": "selectors",
                    "description": "one or more css-selectors",
                    "type": "String"
                },
                {
                    "name": "relatedVNode",
                    "description": "a related vnode where to selectors starting with `>`, `~` or `+` should be compared.\n       If not specified, any of these three starting selector-characters will be ignored (leading to matching this first character).",
                    "type": "Vnode",
                    "optional": true
                }
            ],
            "return": {
                "description": "whether the vnode matches one of the selectors",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 9841,
            "description": "Reloads the DOM-attribute into the vnode.",
            "itemtype": "method",
            "name": "matchesSelector",
            "params": [
                {
                    "name": "attributeName",
                    "description": "the name of the attribute to be reloaded.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the domNode that was reloaded.",
                "type": "Node"
            },
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 9909,
            "description": "Syncs the vnode's nodeid (if available) inside `NS-vdom.nodeids`.\n\nDoes NOT sync with the dom. Can be invoked multiple times without issues.",
            "itemtype": "method",
            "name": "storeId",
            "chainable": 1,
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 9927,
            "description": "Adds a vnode to the end of the list of vChildNodes.\n\nSyncs with the DOM.",
            "itemtype": "method",
            "name": "_appendChild",
            "params": [
                {
                    "name": "VNode",
                    "description": "vnode to append",
                    "type": "Vnode"
                }
            ],
            "access": "private",
            "tagname": "",
            "return": {
                "description": "the Node that was appended",
                "type": "Node"
            },
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 9953,
            "description": "Removes the vnode from its parent vChildNodes- and vChildren-list.\n\nDoes NOT sync with the dom.",
            "itemtype": "method",
            "name": "_deleteFromParent",
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 9974,
            "description": "Destroys the vnode and all its vnode-vChildNodes.\nRemoves it from its vParent.vChildNodes list,\nalso removes its definitions inside `NS-vdom.nodeids`.\n\nDoes NOT sync with the dom.",
            "itemtype": "method",
            "name": "_destroy",
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 10018,
            "description": "Inserts `newVNode` before `refVNode`.\n\nSyncs with the DOM.",
            "itemtype": "method",
            "name": "_insertBefore",
            "params": [
                {
                    "name": "newVNode",
                    "description": "vnode to insert",
                    "type": "Vnode"
                },
                {
                    "name": "refVNode",
                    "description": "The vnode before which newVNode should be inserted.",
                    "type": "Vnode"
                }
            ],
            "access": "private",
            "tagname": "",
            "return": {
                "description": "the Node being inserted (equals domNode)",
                "type": "Node"
            },
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 10042,
            "description": "Moves the vnode from its current parent.vChildNodes list towards a new parent vnode at the specified position.\n\nDoes NOT sync with the dom.",
            "itemtype": "method",
            "name": "_moveToParent",
            "params": [
                {
                    "name": "parentVNode",
                    "description": "the parent-vnode",
                    "type": "Vnode"
                },
                {
                    "name": "index",
                    "description": "the position of the child. When not specified, it will be appended.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 10068,
            "description": "Removes empty TextNodes and merges following TextNodes inside the vnode.\n\nSyncs with the dom.",
            "itemtype": "method",
            "name": "_normalize",
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 10104,
            "description": "Makes the vnode `normalizable`. Could be set to `false` when batch-inserting nodes, while `normalizaing` manually at the end.\nAfterwards, you should always reset `normalizable` to true.",
            "itemtype": "method",
            "name": "_normalizable",
            "params": [
                {
                    "name": "value",
                    "description": "whether the vnode should be normalisable.",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 10120,
            "description": "Prevents MutationObserver from making the dom sync with the vnode.\nShould be used when manipulating the dom from within the vnode itself (to preventing looping)",
            "itemtype": "method",
            "name": "_noSync",
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 10140,
            "description": "Removes the attribute of both the vnode as well as its related dom-node.\n\nSyncs with the dom.",
            "itemtype": "method",
            "name": "_removeAttr",
            "params": [
                {
                    "name": "attributeName",
                    "description": "",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 10166,
            "description": "Removes the vnode's child-vnode from its vChildren and the DOM.\n\nSyncs with the DOM.",
            "itemtype": "method",
            "name": "removeChild",
            "params": [
                {
                    "name": "VNode",
                    "description": "the child-vnode to remove",
                    "type": "Vnode"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 10193,
            "description": "Replaces the current vnode at the parent.vChildNode list by `newVNode`\n\nDoes NOT sync with the dom.",
            "itemtype": "method",
            "name": "_replaceAtParent",
            "params": [
                {
                    "name": "newVNode",
                    "description": "the new vnode which should take over the place of the current vnode",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 10217,
            "description": "Sets the attribute of both the vnode as well as its related dom-node.\n\nSyncs with the dom.",
            "itemtype": "method",
            "name": "_setAttr",
            "params": [
                {
                    "name": "attributeName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "the value for the attributeName",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 10273,
            "description": "Redefines the attributes of both the vnode as well as its related dom-node. The new\ndefinition replaces any previous attributes (without touching unmodified attributes).\n\nSyncs the new vnode's attributes with the dom.",
            "itemtype": "method",
            "name": "_setAttrs",
            "params": [
                {
                    "name": "newAttrs",
                    "description": "the new attributes to be set",
                    "type": "Object|Array"
                }
            ],
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 10329,
            "description": "Redefines the childNodes of both the vnode as well as its related dom-node. The new\ndefinition replaces any previous nodes. (without touching unmodified nodes).\n\nSyncs the new vnode's childNodes with the dom.",
            "itemtype": "method",
            "name": "_setChildNodes",
            "params": [
                {
                    "name": "newVChildNodes",
                    "description": "array with vnodes which represent the new childNodes",
                    "type": "Array"
                }
            ],
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 10477,
            "description": "A hash of all the `attributes` of the vnode's representing dom-node.",
            "itemtype": "property",
            "name": "attrs",
            "type": "Object",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 10485,
            "description": "Hash with all the classes of the vnode. Every class represents a key, all values are set `true`.",
            "itemtype": "property",
            "name": "classNames",
            "type": "Object",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 10493,
            "description": "The `id` of the vnode's representing dom-node (if any).",
            "itemtype": "property",
            "name": "id",
            "type": "String",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 10501,
            "description": "Tells whether tag is a void Element. Examples are: `br`, `img` and `input`. Non-void Elements are f.e. `div` and `table`.\nFor TextNodes and CommentNodes, this property is `undefined`.",
            "itemtype": "property",
            "name": "isVoid",
            "type": "Boolean",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 10510,
            "description": "The `nodeType` of the vnode's representing dom-node (1===ElementNode, 3===TextNode, 8===CommentNode).",
            "itemtype": "property",
            "name": "nodeType",
            "type": "Number",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 10518,
            "description": "The `tag` of the vnode's representing dom-node (allways uppercase).",
            "itemtype": "property",
            "name": "tag",
            "type": "String",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 10526,
            "description": "The `content` of the vnode's representing dom-node, in case it is a TextNode or CommentNode.\nEquals dom-node.nodeValue.\n\nIs `undefined` for ElementNodes.",
            "itemtype": "property",
            "name": "text",
            "type": "String",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 10537,
            "description": "Hash with all the childNodes (vnodes). vChildNodes are any kind of vnodes (nodeType===1, 3 or 8)",
            "itemtype": "property",
            "name": "vChildNodes",
            "type": "Array",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 10545,
            "description": "The underlying `dom-node` that the vnode represents.",
            "itemtype": "property",
            "name": "domNode",
            "type": "domNode",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 10553,
            "description": "vnode's parentNode (defined as a vnode itself).",
            "itemtype": "property",
            "name": "vParent",
            "type": "vnode",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 10562,
            "description": "Gets or sets the innerHTML of both the vnode as well as the representing dom-node.\n\nThe setter syncs with the DOM.",
            "itemtype": "property",
            "name": "innerHTML",
            "type": "String",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 10600,
            "description": "Gets or sets the innerHTML of both the vnode as well as the representing dom-node.\n\nThe setter syncs with the DOM.",
            "itemtype": "property",
            "name": "nodeValue",
            "type": "String",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 10624,
            "description": "Gets or sets the outerHTML of both the vnode as well as the representing dom-node.\n\nThe setter syncs with the DOM.",
            "itemtype": "property",
            "name": "outerHTML",
            "type": "String",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 10721,
            "description": "Gets or sets the innerContent of the Node as plain text.\n\nThe setter syncs with the DOM.",
            "itemtype": "property",
            "name": "textContent",
            "type": "String",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 10760,
            "description": "Hash with all the children (vnodes). vChildren are vnodes that have a representing dom-node that is an HtmlElement (nodeType===1)",
            "itemtype": "property",
            "name": "vChildren",
            "type": "Array",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 10785,
            "description": "Reference to the first of sibbling vNode's, where the related dom-node is either an Element, TextNode or CommentNode (nodeType===1, 3 or 8).",
            "itemtype": "property",
            "name": "vFirst",
            "type": "vnode",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 10802,
            "description": "Reference to the first vChildNode, where the related dom-node is either an Element, TextNode or CommentNode (nodeType===1, 3 or 8).",
            "itemtype": "property",
            "name": "vFirstChild",
            "type": "vnode",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 10815,
            "description": "Reference to the first of sibbling vNode's, where the related dom-node is an Element(nodeType===1).",
            "itemtype": "property",
            "name": "vFirstElement",
            "type": "vnode",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 10832,
            "description": "Reference to the first vChild, where the related dom-node an Element (nodeType===1).",
            "itemtype": "property",
            "name": "vFirstElementChild",
            "type": "vnode",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 10845,
            "description": "Reference to the last of sibbling vNode's, where the related dom-node is either an Element, TextNode or CommentNode (nodeType===1, 3 or 8).",
            "itemtype": "property",
            "name": "vLast",
            "type": "vnode",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 10862,
            "description": "Reference to the last vChildNode, where the related dom-node is either an Element, TextNode or CommentNode (nodeType===1, 3 or 8).",
            "itemtype": "property",
            "name": "vLastChild",
            "type": "vnode",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 10876,
            "description": "Reference to the last of sibbling vNode's, where the related dom-node is an Element(nodeType===1).",
            "itemtype": "property",
            "name": "vLastElement",
            "type": "vnode",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 10893,
            "description": "Reference to the last vChild, where the related dom-node an Element (nodeType===1).",
            "itemtype": "property",
            "name": "vLastElementChild",
            "type": "vnode",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 10907,
            "description": "the Parent vnode",
            "itemtype": "property",
            "name": "vParent",
            "type": "vnode",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 10915,
            "description": "Reference to the next of sibbling vNode's, where the related dom-node is either an Element, TextNode or CommentNode (nodeType===1, 3 or 8).",
            "itemtype": "property",
            "name": "vNext",
            "type": "vnode",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 10928,
            "description": "Reference to the next of sibbling vNode's, where the related dom-node is an Element(nodeType===1).",
            "itemtype": "property",
            "name": "vNextElement",
            "type": "vnode",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 10941,
            "description": "Reference to the previous of sibbling vNode's, where the related dom-node is either an Element, TextNode or CommentNode (nodeType===1, 3 or 8).",
            "itemtype": "property",
            "name": "vPrevious",
            "type": "vnode",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 10954,
            "description": "Reference to the previous of sibbling vNode's, where the related dom-node is an Element(nodeType===1).",
            "itemtype": "property",
            "name": "vPreviousElement",
            "type": "vnode",
            "since": "0.0.1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 11083,
            "description": "+ContentHandler+ErrorHandler\n+LexicalHandler+EntityResolver2\n-DeclHandler-DTDHandler \n\nDefaultHandler:EntityResolver, DTDHandler, ContentHandler, ErrorHandler\nDefaultHandler2:DefaultHandler,LexicalHandler, DeclHandler, EntityResolver2",
            "link": "http://www.saxproject.org/apidoc/org/xml/sax/helpers/DefaultHandler.html",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 11099,
            "see": [
                "org.xml.sax.ContentHandler#startDocument"
            ],
            "link": "http://www.saxproject.org/apidoc/org/xml/sax/ContentHandler.html",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 11194,
            "see": [
                "org.xml.sax.ErrorHandler"
            ],
            "link": "http://www.saxproject.org/apidoc/org/xml/sax/ErrorHandler.html",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 11289,
            "description": "^\\w+\\.prototype\\.([_\\w]+)\\s*=\\s*((?:.*\\{\\s*?[\\r\\n][\\s\\S]*?^})|\\S.*?(?=[;\\r\\n]));?\n^\\w+\\.prototype\\.([_\\w]+)\\s*=\\s*(\\S.*?(?=[;\\r\\n]));?",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 11365,
            "see": [
                "http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-536297177\nThe NodeList interface provides the abstraction of an ordered collection of nodes",
                "without defining or constraining how this collection is implemented. NodeList objects in the DOM are live.\nThe items in the NodeList are accessible via an integral index",
                "starting from 0."
            ],
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 11373,
            "description": "The number of nodes in the list. The range of valid child node indices is 0 to length-1 inclusive.",
            "standard": "level1",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 11378,
            "description": "Returns the indexth item in the collection. If index is greater than or equal to the number of nodes in the list, this returns null.",
            "standard": "level1",
            "params": [
                {
                    "name": "index",
                    "description": "unsigned long \n  Index into the collection."
                }
            ],
            "return": {
                "description": "Node\n\tThe node at the indexth position in the NodeList, or null if that is not a valid index."
            },
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 11411,
            "description": "Objects implementing the NamedNodeMap interface are used to represent collections of nodes that can be accessed by name. Note that NamedNodeMap does not inherit from NodeList; NamedNodeMaps are not maintained in any particular order. Objects contained in an object implementing NamedNodeMap may also be accessed by an ordinal index, but this is simply to allow convenient enumeration of the contents of a NamedNodeMap, and does not imply that the DOM specifies an order to these Nodes.\n NamedNodeMap objects in the DOM are live.\n used for attributes or DocumentType entities",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 11522,
            "see": [
                "http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-102161490"
            ],
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 11576,
            "see": [
                "http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-1950641247"
            ],
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 11691,
            "params": [
                {
                    "name": "callback",
                    "description": "return true for continue,false for break"
                }
            ],
            "return": {
                "description": "boolean true: break visit;"
            },
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 11746,
            "description": "attributes;\nchildren;\n\nwriteable properties:\nnodeValue,Attr:value,CharacterData:data\nprefix",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 11770,
            "description": "preformance key(refChild == null)",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 12594,
            "see": [
                "#appendElement(source",
                "elStartEnd",
                "el",
                "selfClosed",
                "entityReplacer",
                "domBuilder",
                "parseStack);"
            ],
            "return": {
                "description": "end of the elementStartPart(end of elementEndPart for selfClosed el)"
            },
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 12755,
            "return": {
                "description": "end of the elementStartPart(end of elementEndPart for selfClosed el)"
            },
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 12929,
            "params": [
                {
                    "name": "source",
                    "description": ""
                }
            ],
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 13018,
            "license": "Copyright (c) 2014 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 14014,
            "description": "If `TYPED_ARRAY_SUPPORT`:\n  === true    Use Uint8Array implementation (fastest)\n  === false   Use Object implementation (most compatible, even IE6)\n\nBrowsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\nOpera 11.6+, iOS 4.2+.\n\nNote:\n\n- Implementation must support adding new properties to `Uint8Array` instances.\n  Firefox 4-29 lacked support, fixed in Firefox 30+.\n  See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n\n - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n\n - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n   incorrect length in some situations.\n\nWe detect these buggy browsers and set `TYPED_ARRAY_SUPPORT` to `false` so they will\nget the Object implementation, which is slower but will work correctly.",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 14049,
            "description": "Class: Buffer\n=============\n\nThe Buffer constructor returns instances of `Uint8Array` that are augmented\nwith function properties for all the node `Buffer` API functions. We use\n`Uint8Array` so that square bracket notation works as expected -- it returns\na single octet.\n\nBy augmenting the instances, we can avoid modifying the `Uint8Array`\nprototype.",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 14962,
            "description": "Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.\nAdded in Node 0.12. Only available in browsers that support ArrayBuffer.",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 14987,
            "description": "Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 16314,
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 16323,
            "description": "The `punycode` object.",
            "name": "punycode",
            "type": "Object",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 16330,
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 16333,
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 16343,
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 16348,
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 16355,
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 16360,
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 16365,
            "description": "A generic error utility function.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "type",
                    "description": "The error type.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Throws a `RangeError` with the applicable error message.",
                "type": "Error"
            },
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 16375,
            "description": "A generic `Array#map` utility function.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "array",
                    "description": "The array to iterate over.",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function that gets called for every array\nitem.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A new array of values returned by the callback function.",
                "type": "Array"
            },
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 16391,
            "description": "A simple `Array#map`-like wrapper to work with domain name strings.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "domain",
                    "description": "The domain name.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function that gets called for every\ncharacter.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A new string of characters returned by the callback\nfunction.",
                "type": "Array"
            },
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 16404,
            "description": "Creates an array containing the numeric code points of each Unicode\ncharacter in the string. While JavaScript uses UCS-2 internally,\nthis function will convert a pair of surrogate halves (each of which\nUCS-2 exposes as separate characters) into a single code point,\nmatching UTF-16.",
            "see": [
                "`punycode.ucs2.encode`",
                "<http://mathiasbynens.be/notes/javascript-encoding>"
            ],
            "memberof": "punycode.ucs2",
            "name": "decode",
            "params": [
                {
                    "name": "string",
                    "description": "The Unicode input string (UCS-2).",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The new array of code points.",
                "type": "Array"
            },
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 16443,
            "description": "Creates a string based on an array of numeric code points.",
            "see": [
                "`punycode.ucs2.decode`"
            ],
            "memberof": "punycode.ucs2",
            "name": "encode",
            "params": [
                {
                    "name": "codePoints",
                    "description": "The array of numeric code points.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The new Unicode string (UCS-2).",
                "type": "String"
            },
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 16464,
            "description": "Converts a basic code point into a digit/integer.",
            "see": [
                "`digitToBasic()`"
            ],
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "codePoint",
                    "description": "The basic numeric code point value.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The numeric value of a basic code point (for use in\nrepresenting integers) in the range `0` to `base - 1`, or `base` if\nthe code point does not represent a value.",
                "type": "Number"
            },
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 16486,
            "description": "Converts a digit/integer into a basic code point.",
            "see": [
                "`basicToDigit()`"
            ],
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "digit",
                    "description": "The numeric value of a basic code point.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The basic code point whose value (when used for\nrepresenting integers) is `digit`, which needs to be in the range\n`0` to `base - 1`. If `flag` is non-zero, the uppercase form is\nused; else, the lowercase form is used. The behavior is undefined\nif `flag` is non-zero and `digit` has no uppercase form.",
                "type": "Number"
            },
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 16503,
            "description": "Bias adaptation function as per section 3.4 of RFC 3492.\nhttp://tools.ietf.org/html/rfc3492#section-3.4",
            "access": "private",
            "tagname": "",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 16518,
            "description": "Converts a Punycode string of ASCII-only symbols to a string of Unicode\nsymbols.",
            "memberof": "punycode",
            "params": [
                {
                    "name": "input",
                    "description": "The Punycode string of ASCII-only symbols.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The resulting string of Unicode symbols.",
                "type": "String"
            },
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 16541,
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 16619,
            "description": "Converts a string of Unicode symbols to a Punycode string of ASCII-only\nsymbols.",
            "memberof": "punycode",
            "params": [
                {
                    "name": "input",
                    "description": "The string of Unicode symbols.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The resulting Punycode string of ASCII-only symbols.",
                "type": "String"
            },
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 16639,
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 16641,
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 16733,
            "description": "Converts a Punycode string representing a domain name to Unicode. Only the\nPunycoded parts of the domain name will be converted, i.e. it doesn't\nmatter if you call it on a string that has already been converted to\nUnicode.",
            "memberof": "punycode",
            "params": [
                {
                    "name": "domain",
                    "description": "The Punycode domain name to convert to Unicode.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The Unicode representation of the given Punycode\nstring.",
                "type": "String"
            },
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 16751,
            "description": "Converts a Unicode string representing a domain name to Punycode. Only the\nnon-ASCII parts of the domain name will be converted, i.e. it doesn't\nmatter if you call it with a domain that's already in ASCII.",
            "memberof": "punycode",
            "params": [
                {
                    "name": "domain",
                    "description": "The domain name to convert, as a Unicode string.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The Punycode representation of the given domain name.",
                "type": "String"
            },
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 16769,
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 16771,
            "description": "A string representing the current Punycode.js version number.",
            "memberof": "punycode",
            "type": "String",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 16777,
            "description": "An object of methods to convert from JavaScript's internal character\nrepresentation (UCS-2) to Unicode code points, and back.",
            "see": [
                "<http://mathiasbynens.be/notes/javascript-encoding>"
            ],
            "memberof": "punycode",
            "type": "Object",
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 16794,
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 20001,
            "description": "Echos the value of a value. Trys to print the value out\nin the best way possible given the different types.",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to print out.",
                    "type": "Object"
                },
                {
                    "name": "opts",
                    "description": "Optional options object that alters the output.",
                    "type": "Object"
                }
            ],
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "site-preview/dist/itagsbuild.js",
            "line": 20441,
            "description": "Inherit the prototype methods from one constructor into another.\n\nThe Function.prototype.inherits from lang.js rewritten as a standalone\nfunction (not on Function.prototype). NOTE: If this file is to be loaded\nduring bootstrapping this function needs to be rewritten using some native\nfunctions as prototype setup using normal JavaScript does not work as\nexpected during bootstrapping (see mirror.js in r114903).",
            "params": [
                {
                    "name": "ctor",
                    "description": "Constructor function which needs to inherit the\n    prototype.",
                    "type": "Function"
                },
                {
                    "name": "superCtor",
                    "description": "Constructor function to inherit prototype from.",
                    "type": "Function"
                }
            ],
            "class": "vnode",
            "module": "vdom",
            "submodule": "vnode"
        },
        {
            "file": "src/itags.core/tests/itsa.build.js",
            "line": 72,
            "description": "Global configuration properties for the ITSA object.\nIt can only be set on initialization via the [`ITSA`](#docs-main) function.\n\nThe config is set at a default-configutation",
            "itemtype": "property",
            "name": "_config",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "ITSA",
            "module": "itsa.build"
        },
        {
            "file": "src/itags.core/tests/itsa.build.js",
            "line": 107,
            "description": "Reference to the `idGenerator` function in [utils](../modules/utils.html)",
            "itemtype": "property",
            "name": "idGenerator",
            "type": "function",
            "static": 1,
            "class": "ITSA",
            "module": "itsa.build"
        },
        {
            "file": "src/itags.core/tests/itsa.build.js",
            "line": 130,
            "description": "Reference to the [IO](io.html) object",
            "itemtype": "property",
            "name": "IO",
            "type": "Object",
            "static": 1,
            "class": "ITSA",
            "module": "itsa.build"
        },
        {
            "file": "src/itags.core/tests/itsa.build.js",
            "line": 142,
            "description": "Reference to the [UserAgent](useragent.html) object",
            "itemtype": "property",
            "name": "UA",
            "type": "Object",
            "static": 1,
            "class": "ITSA",
            "module": "itsa.build"
        },
        {
            "file": "src/itags.core/tests/itsa.build.js",
            "line": 150,
            "description": "[Event](Event.html)-instance",
            "itemtype": "property",
            "name": "Event",
            "type": "Event",
            "static": 1,
            "class": "ITSA",
            "module": "itsa.build"
        },
        {
            "file": "src/itags.core/itags.core.js",
            "line": 1,
            "license": "Copyright (c) 2014 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt",
            "class": "",
            "module": "itsa.build"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:3"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:55"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:87"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:115"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:127"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:142"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:341"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:396"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:429"
        },
        {
            "message": "param name missing: {Function}",
            "line": " server/mocha/chai.js:753"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " server/mocha/chai.js:753"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:753"
        },
        {
            "message": "param name missing: {Boolean}",
            "line": " server/mocha/chai.js:951"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:951"
        },
        {
            "message": "param name missing: {Boolean}",
            "line": " server/mocha/chai.js:966"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:966"
        },
        {
            "message": "param name missing: {Number}",
            "line": " server/mocha/chai.js:981"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:981"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:1014"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:1014"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:1050"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:1050"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:1068"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:1068"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:1086"
        },
        {
            "message": "unknown tag: alias",
            "line": " server/mocha/chai.js:1086"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:1086"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:1125"
        },
        {
            "message": "unknown tag: alias",
            "line": " server/mocha/chai.js:1125"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:1125"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:1179"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:1179"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:1201"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:1201"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:1222"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:1222"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:1243"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:1243"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:1263"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:1263"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:1283"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:1283"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:1309"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:1309"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:1341"
        },
        {
            "message": "unknown tag: alias",
            "line": " server/mocha/chai.js:1341"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:1341"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:1368"
        },
        {
            "message": "unknown tag: alias",
            "line": " server/mocha/chai.js:1368"
        },
        {
            "message": "unknown tag: alias",
            "line": " server/mocha/chai.js:1368"
        },
        {
            "message": "unknown tag: alias",
            "line": " server/mocha/chai.js:1368"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:1368"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:1411"
        },
        {
            "message": "unknown tag: alias",
            "line": " server/mocha/chai.js:1411"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:1411"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:1441"
        },
        {
            "message": "unknown tag: alias",
            "line": " server/mocha/chai.js:1441"
        },
        {
            "message": "unknown tag: alias",
            "line": " server/mocha/chai.js:1441"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:1441"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:1490"
        },
        {
            "message": "unknown tag: alias",
            "line": " server/mocha/chai.js:1490"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:1490"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:1537"
        },
        {
            "message": "unknown tag: alias",
            "line": " server/mocha/chai.js:1537"
        },
        {
            "message": "unknown tag: alias",
            "line": " server/mocha/chai.js:1537"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:1537"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:1586"
        },
        {
            "message": "unknown tag: alias",
            "line": " server/mocha/chai.js:1586"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:1586"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:1633"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:1633"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:1676"
        },
        {
            "message": "unknown tag: alias",
            "line": " server/mocha/chai.js:1676"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:1676"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:1707"
        },
        {
            "message": "unknown tag: alias",
            "line": " server/mocha/chai.js:1707"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " server/mocha/chai.js:1707"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:1707"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:1802"
        },
        {
            "message": "unknown tag: alias",
            "line": " server/mocha/chai.js:1802"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:1802"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:1829"
        },
        {
            "message": "unknown tag: alias",
            "line": " server/mocha/chai.js:1829"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:1829"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:1877"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:1877"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:1900"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:1900"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:1926"
        },
        {
            "message": "unknown tag: alias",
            "line": " server/mocha/chai.js:1926"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:1926"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:1994"
        },
        {
            "message": "unknown tag: alias",
            "line": " server/mocha/chai.js:1994"
        },
        {
            "message": "unknown tag: alias",
            "line": " server/mocha/chai.js:1994"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " server/mocha/chai.js:1994"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:1994"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:2151"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:2151"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:2187"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:2187"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:2207"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:2207"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:2232"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:2232"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:2266"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:2266"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:2339"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:2339"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:2362"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:2362"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:2384"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:2384"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:2402"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:2402"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:2420"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:2420"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:2446"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:2446"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:2472"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:2472"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:2490"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:2490"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:2508"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:2508"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:2526"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:2526"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:2544"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:2544"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:2562"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:2562"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:2580"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:2580"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:2597"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:2597"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:2615"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:2615"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:2633"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:2633"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:2651"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:2651"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:2669"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:2669"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:2687"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:2687"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:2706"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:2706"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:2725"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:2725"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:2743"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:2743"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:2761"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:2761"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:2779"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:2779"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:2797"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:2797"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:2815"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:2815"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:2833"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:2833"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:2854"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:2854"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:2875"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:2875"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:2899"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:2899"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:2918"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:2918"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:2939"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:2939"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:2960"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:2960"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:2980"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:2980"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:3000"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:3000"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:3018"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:3018"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:3036"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:3036"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:3054"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:3054"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:3072"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:3072"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:3091"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:3091"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:3110"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:3110"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:3130"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:3130"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:3150"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:3150"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:3171"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:3171"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:3192"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:3192"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:3211"
        },
        {
            "message": "unknown tag: alias",
            "line": " server/mocha/chai.js:3211"
        },
        {
            "message": "unknown tag: alias",
            "line": " server/mocha/chai.js:3211"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:3211"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:3245"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:3245"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:3272"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:3272"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:3299"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:3299"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:3318"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:3318"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:3337"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:3337"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:3504"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:3504"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:3596"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:3596"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:3640"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:3640"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:3683"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:3683"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " server/mocha/chai.js:3739"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:3739"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:3739"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:3776"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:3776"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " server/mocha/chai.js:3843"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:3843"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:3843"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " server/mocha/chai.js:3947"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:3947"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:3947"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:4432"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:4432"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:4477"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:4477"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:4531"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:4531"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:4588"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:4588"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:4673"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:4673"
        },
        {
            "message": "unknown tag: name",
            "line": " server/mocha/chai.js:4734"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/chai.js:4734"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:433"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:441"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:465"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:485"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:522"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:541"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:563"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:624"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:637"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:650"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:760"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:768"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:782"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:796"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:810"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:823"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:854"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:877"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:1431"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:1443"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:1491"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:1504"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:1516"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:1541"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:1557"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:1576"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:1600"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:1615"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:1627"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:1640"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:1652"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:1664"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:1677"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:1692"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:1707"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:1720"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:1733"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:1748"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:1760"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:1798"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:1817"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:1856"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:1872"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:1988"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:2050"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:2108"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:2174"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:2219"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:2234"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:2268"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:2300"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:2318"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:2331"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:2346"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:2378"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:2445"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:2516"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:2540"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:2593"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:2868"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:2910"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:2948"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:2992"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:3026"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:3057"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:3091"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:3132"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:3200"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:3286"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:3356"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:3450"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:3496"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:3542"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:3556"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:3581"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:3598"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:3616"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:3652"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:3672"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:3683"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:3694"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:3716"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:3771"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:3866"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:3957"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:4004"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:4044"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:4176"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:4205"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:4223"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:4239"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:4254"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:4266"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:4276"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:4292"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:4310"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:4320"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:4446"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:4479"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:4498"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:4516"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:4538"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:4557"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:4572"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:4602"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:4621"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:4649"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:4698"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:4734"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:4747"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:4760"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:4775"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:4798"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:4891"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:4946"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:4978"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:5017"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:5028"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:5062"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:5107"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:5129"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:5167"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:5185"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:5202"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:5217"
        },
        {
            "message": "replacing incorrect tag: parma with param",
            "line": " server/mocha/mocha.js:5233"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:5233"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:5248"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:5275"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:5302"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:5329"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:5356"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:5375"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:5394"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:5410"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:5423"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:5457"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:5499"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:5515"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:5529"
        },
        {
            "message": "replacing incorrect tag: parma with param",
            "line": " server/mocha/mocha.js:5545"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:5545"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:5562"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:5581"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:5600"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:5621"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:5648"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:5675"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:5710"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:5722"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:5734"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:5753"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:5773"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:5788"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/mocha.js:5801"
        },
        {
            "message": "unknown tag: version",
            "line": " server/mocha/should.js:1"
        },
        {
            "message": "unknown tag: link",
            "line": " server/mocha/should.js:1"
        },
        {
            "message": "unknown tag: license",
            "line": " server/mocha/should.js:1"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/should.js:137"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/should.js:152"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " server/mocha/should.js:1360"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/should.js:1369"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/should.js:1452"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/should.js:1507"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/should.js:1518"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " server/mocha/should.js:1549"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/should.js:1549"
        },
        {
            "message": "unknown tag: api",
            "line": " server/mocha/should.js:1559"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " server/polyfills/lib/aliases.js:110"
        },
        {
            "message": "unknown tag: preserve",
            "line": " server/polyfills/polyfills/html5shiv/polyfill.js:1"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " server/polyfills/polyfills/html5shiv/polyfill.js:60"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " server/polyfills/polyfills/html5shiv/polyfill.js:75"
        },
        {
            "message": "unknown tag: memberof",
            "line": " server/polyfills/polyfills/html5shiv/polyfill.js:85"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " server/polyfills/polyfills/html5shiv/polyfill.js:103"
        },
        {
            "message": "unknown tag: memberof",
            "line": " server/polyfills/polyfills/html5shiv/polyfill.js:120"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " server/polyfills/polyfills/html5shiv/polyfill.js:120"
        },
        {
            "message": "unknown tag: memberof",
            "line": " server/polyfills/polyfills/html5shiv/polyfill.js:157"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " server/polyfills/polyfills/html5shiv/polyfill.js:157"
        },
        {
            "message": "unknown tag: memberof",
            "line": " server/polyfills/polyfills/html5shiv/polyfill.js:219"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " server/polyfills/polyfills/html5shiv/polyfill.js:219"
        },
        {
            "message": "unknown tag: memberof",
            "line": " server/polyfills/polyfills/html5shiv/polyfill.js:260"
        },
        {
            "message": "unknown tag: memberof",
            "line": " server/polyfills/polyfills/html5shiv/polyfill.js:272"
        },
        {
            "message": "unknown tag: memberof",
            "line": " server/polyfills/polyfills/html5shiv/polyfill.js:279"
        },
        {
            "message": "unknown tag: memberof",
            "line": " server/polyfills/polyfills/html5shiv/polyfill.js:286"
        },
        {
            "message": "unknown tag: memberof",
            "line": " server/polyfills/polyfills/html5shiv/polyfill.js:294"
        },
        {
            "message": "unknown tag: license",
            "line": " site/dist/itagsbuild.js:44"
        },
        {
            "message": "unknown tag: link",
            "line": " site/dist/itagsbuild.js:11083"
        },
        {
            "message": "unknown tag: link",
            "line": " site/dist/itagsbuild.js:11099"
        },
        {
            "message": "unknown tag: link",
            "line": " site/dist/itagsbuild.js:11194"
        },
        {
            "message": "unknown tag: standard",
            "line": " site/dist/itagsbuild.js:11373"
        },
        {
            "message": "unknown tag: standard",
            "line": " site/dist/itagsbuild.js:11378"
        },
        {
            "message": "unknown tag: license",
            "line": " site/dist/itagsbuild.js:13018"
        },
        {
            "message": "unknown tag: name",
            "line": " site/dist/itagsbuild.js:16323"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " site/dist/itagsbuild.js:16365"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " site/dist/itagsbuild.js:16375"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " site/dist/itagsbuild.js:16391"
        },
        {
            "message": "unknown tag: memberof",
            "line": " site/dist/itagsbuild.js:16404"
        },
        {
            "message": "unknown tag: name",
            "line": " site/dist/itagsbuild.js:16404"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " site/dist/itagsbuild.js:16404"
        },
        {
            "message": "unknown tag: memberof",
            "line": " site/dist/itagsbuild.js:16443"
        },
        {
            "message": "unknown tag: name",
            "line": " site/dist/itagsbuild.js:16443"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " site/dist/itagsbuild.js:16443"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " site/dist/itagsbuild.js:16464"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " site/dist/itagsbuild.js:16486"
        },
        {
            "message": "unknown tag: memberof",
            "line": " site/dist/itagsbuild.js:16518"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " site/dist/itagsbuild.js:16518"
        },
        {
            "message": "unknown tag: memberof",
            "line": " site/dist/itagsbuild.js:16619"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " site/dist/itagsbuild.js:16619"
        },
        {
            "message": "unknown tag: memberof",
            "line": " site/dist/itagsbuild.js:16733"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " site/dist/itagsbuild.js:16733"
        },
        {
            "message": "unknown tag: memberof",
            "line": " site/dist/itagsbuild.js:16751"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " site/dist/itagsbuild.js:16751"
        },
        {
            "message": "unknown tag: memberof",
            "line": " site/dist/itagsbuild.js:16771"
        },
        {
            "message": "unknown tag: memberof",
            "line": " site/dist/itagsbuild.js:16777"
        },
        {
            "message": "unknown tag: license",
            "line": " site-preview/dist/itagsbuild.js:44"
        },
        {
            "message": "unknown tag: link",
            "line": " site-preview/dist/itagsbuild.js:11083"
        },
        {
            "message": "unknown tag: link",
            "line": " site-preview/dist/itagsbuild.js:11099"
        },
        {
            "message": "unknown tag: link",
            "line": " site-preview/dist/itagsbuild.js:11194"
        },
        {
            "message": "unknown tag: standard",
            "line": " site-preview/dist/itagsbuild.js:11373"
        },
        {
            "message": "unknown tag: standard",
            "line": " site-preview/dist/itagsbuild.js:11378"
        },
        {
            "message": "unknown tag: license",
            "line": " site-preview/dist/itagsbuild.js:13018"
        },
        {
            "message": "unknown tag: name",
            "line": " site-preview/dist/itagsbuild.js:16323"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " site-preview/dist/itagsbuild.js:16365"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " site-preview/dist/itagsbuild.js:16375"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " site-preview/dist/itagsbuild.js:16391"
        },
        {
            "message": "unknown tag: memberof",
            "line": " site-preview/dist/itagsbuild.js:16404"
        },
        {
            "message": "unknown tag: name",
            "line": " site-preview/dist/itagsbuild.js:16404"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " site-preview/dist/itagsbuild.js:16404"
        },
        {
            "message": "unknown tag: memberof",
            "line": " site-preview/dist/itagsbuild.js:16443"
        },
        {
            "message": "unknown tag: name",
            "line": " site-preview/dist/itagsbuild.js:16443"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " site-preview/dist/itagsbuild.js:16443"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " site-preview/dist/itagsbuild.js:16464"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " site-preview/dist/itagsbuild.js:16486"
        },
        {
            "message": "unknown tag: memberof",
            "line": " site-preview/dist/itagsbuild.js:16518"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " site-preview/dist/itagsbuild.js:16518"
        },
        {
            "message": "unknown tag: memberof",
            "line": " site-preview/dist/itagsbuild.js:16619"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " site-preview/dist/itagsbuild.js:16619"
        },
        {
            "message": "unknown tag: memberof",
            "line": " site-preview/dist/itagsbuild.js:16733"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " site-preview/dist/itagsbuild.js:16733"
        },
        {
            "message": "unknown tag: memberof",
            "line": " site-preview/dist/itagsbuild.js:16751"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " site-preview/dist/itagsbuild.js:16751"
        },
        {
            "message": "unknown tag: memberof",
            "line": " site-preview/dist/itagsbuild.js:16771"
        },
        {
            "message": "unknown tag: memberof",
            "line": " site-preview/dist/itagsbuild.js:16777"
        },
        {
            "message": "unknown tag: license",
            "line": " src/itags.core/itags.core.js:1"
        },
        {
            "message": "Missing item type\nRequire the given path.",
            "line": " server/mocha/chai.js:3"
        },
        {
            "message": "Missing item type\nRegistered modules.",
            "line": " server/mocha/chai.js:43"
        },
        {
            "message": "Missing item type\nRegistered aliases.",
            "line": " server/mocha/chai.js:49"
        },
        {
            "message": "Missing item type\nResolve `path`.\n\nLookup:\n\n  - PATH/index.js\n  - PATH.js\n  - PATH",
            "line": " server/mocha/chai.js:55"
        },
        {
            "message": "Missing item type\nNormalize `path` relative to the current path.",
            "line": " server/mocha/chai.js:87"
        },
        {
            "message": "Missing item type\nRegister module at `path` with callback `definition`.",
            "line": " server/mocha/chai.js:115"
        },
        {
            "message": "Missing item type\nAlias a module definition.",
            "line": " server/mocha/chai.js:127"
        },
        {
            "message": "Missing item type\nReturn a require function relative to the `parent` path.",
            "line": " server/mocha/chai.js:142"
        },
        {
            "message": "Missing item type\nlastIndexOf helper.",
            "line": " server/mocha/chai.js:153"
        },
        {
            "message": "Missing item type\nThe relative require() itself.",
            "line": " server/mocha/chai.js:165"
        },
        {
            "message": "Missing item type\nResolve relative to the parent.",
            "line": " server/mocha/chai.js:174"
        },
        {
            "message": "Missing item type\nCheck if module is defined at `path`.",
            "line": " server/mocha/chai.js:193"
        },
        {
            "message": "Missing item type\n### AssertionError\n\nAn extension of the JavaScript `Error` constructor for\nassertion and validation scenarios.",
            "line": " server/mocha/chai.js:247"
        },
        {
            "message": "Missing item type\nAllow errors to be converted to JSON for static transfer.",
            "line": " server/mocha/chai.js:296"
        },
        {
            "message": "Missing item type\n### typeOf (obj)\n\nUse several different techniques to determine\nthe type of object being tested.",
            "line": " server/mocha/chai.js:341"
        },
        {
            "message": "Missing item type\n### Library\n\nCreate a repository for custom type detection.\n\n```js\nvar lib = new type.Library;\n```",
            "line": " server/mocha/chai.js:364"
        },
        {
            "message": "Missing item type\n#### .of (obj)\n\nExpose replacement `typeof` detection to the library.\n\n```js\nif ('string' === lib.of('hello world')) {\n  // ...\n}\n```",
            "line": " server/mocha/chai.js:379"
        },
        {
            "message": "Missing item type\n#### .define (type, test)\n\nAdd a test to for the `.test()` assertion.\n\nCan be defined as a regular expression:\n\n```js\nlib.define('int', /^[0-9]+$/);\n```\n\n... or as a function:\n\n```js\nlib.define('bln', function (obj) {\n  if ('boolean' === lib.of(obj)) return true;\n  var blns = [ 'yes', 'no', 'true', 'false', 1, 0 ];\n  if ('string' === lib.of(obj)) obj = obj.toLowerCase();\n  return !! ~blns.indexOf(obj);\n});\n```",
            "line": " server/mocha/chai.js:396"
        },
        {
            "message": "Missing item type\n#### .test (obj, test)\n\nAssert that an object is of type. Will first\ncheck natives, and if that does not pass it will\nuse the user defined custom tests.\n\n```js\nassert(lib.test('1', 'int'));\nassert(lib.test('yes', 'bln'));\n```",
            "line": " server/mocha/chai.js:429"
        },
        {
            "message": "Missing item type\nAssert super-strict (egal) equality between\ntwo objects of any type.",
            "line": " server/mocha/chai.js:491"
        },
        {
            "message": "Missing item type\n# .use(function)\n\nProvides a way to extend the internals of Chai",
            "line": " server/mocha/chai.js:753"
        },
        {
            "message": "Missing item type\n### config.includeStack\n\nUser configurable property, influences whether stack trace\nis included in Assertion error message. Default of false\nsuppresses stack trace in the error message.\n\n    chai.config.includeStack = true;  // enable stack on error",
            "line": " server/mocha/chai.js:951"
        },
        {
            "message": "Missing item type\n### config.showDiff\n\nUser configurable property, influences whether or not\nthe `showDiff` flag should be included in the thrown\nAssertionErrors. `false` will always be `false`; `true`\nwill be true when the assertion has requested a diff\nbe shown.",
            "line": " server/mocha/chai.js:966"
        },
        {
            "message": "Missing item type\n### config.truncateThreshold\n\nUser configurable property, sets length threshold for actual and\nexpected values in assertion errors. If this threshold is exceeded,\nthe value is truncated.\n\nSet it to zero if you want to disable truncating altogether.\n\n    chai.config.truncateThreshold = 0;  // disable truncating",
            "line": " server/mocha/chai.js:981"
        },
        {
            "message": "Missing item type\n### Language Chains\n\nThe following are provided as chainable getters to\nimprove the readability of your assertions. They\ndo not provide testing capabilities unless they\nhave been overwritten by a plugin.\n\n**Chains**\n\n- to\n- be\n- been\n- is\n- that\n- and\n- has\n- have\n- with\n- at\n- of\n- same",
            "line": " server/mocha/chai.js:1014"
        },
        {
            "message": "Missing item type\n### .not\n\nNegates any of assertions following in the chain.\n\n    expect(foo).to.not.equal('bar');\n    expect(goodFn).to.not.throw(Error);\n    expect({ foo: 'baz' }).to.have.property('foo')\n      .and.not.equal('bar');",
            "line": " server/mocha/chai.js:1050"
        },
        {
            "message": "Missing item type\n### .deep\n\nSets the `deep` flag, later used by the `equal` and\n`property` assertions.\n\n    expect(foo).to.deep.equal({ bar: 'baz' });\n    expect({ foo: { bar: { baz: 'quux' } } })\n      .to.have.deep.property('foo.bar.baz', 'quux');",
            "line": " server/mocha/chai.js:1068"
        },
        {
            "message": "Missing item type\n### .a(type)\n\nThe `a` and `an` assertions are aliases that can be\nused either as language chains or to assert a value's\ntype.\n\n    // typeof\n    expect('test').to.be.a('string');\n    expect({ foo: 'bar' }).to.be.an('object');\n    expect(null).to.be.a('null');\n    expect(undefined).to.be.an('undefined');\n\n    // language chain\n    expect(foo).to.be.an.instanceof(Foo);",
            "line": " server/mocha/chai.js:1086"
        },
        {
            "message": "Missing item type\n### .include(value)\n\nThe `include` and `contain` assertions can be used as either property\nbased language chains or as methods to assert the inclusion of an object\nin an array or a substring in a string. When used as language chains,\nthey toggle the `contain` flag for the `keys` assertion.\n\n    expect([1,2,3]).to.include(2);\n    expect('foobar').to.contain('foo');\n    expect({ foo: 'bar', hello: 'universe' }).to.include.keys('foo');",
            "line": " server/mocha/chai.js:1125"
        },
        {
            "message": "Missing item type\n### .ok\n\nAsserts that the target is truthy.\n\n    expect('everthing').to.be.ok;\n    expect(1).to.be.ok;\n    expect(false).to.not.be.ok;\n    expect(undefined).to.not.be.ok;\n    expect(null).to.not.be.ok;",
            "line": " server/mocha/chai.js:1179"
        },
        {
            "message": "Missing item type\n### .true\n\nAsserts that the target is `true`.\n\n    expect(true).to.be.true;\n    expect(1).to.not.be.true;",
            "line": " server/mocha/chai.js:1201"
        },
        {
            "message": "Missing item type\n### .false\n\nAsserts that the target is `false`.\n\n    expect(false).to.be.false;\n    expect(0).to.not.be.false;",
            "line": " server/mocha/chai.js:1222"
        },
        {
            "message": "Missing item type\n### .null\n\nAsserts that the target is `null`.\n\n    expect(null).to.be.null;\n    expect(undefined).not.to.be.null;",
            "line": " server/mocha/chai.js:1243"
        },
        {
            "message": "Missing item type\n### .undefined\n\nAsserts that the target is `undefined`.\n\n    expect(undefined).to.be.undefined;\n    expect(null).to.not.be.undefined;",
            "line": " server/mocha/chai.js:1263"
        },
        {
            "message": "Missing item type\n### .exist\n\nAsserts that the target is neither `null` nor `undefined`.\n\n    var foo = 'hi'\n      , bar = null\n      , baz;\n\n    expect(foo).to.exist;\n    expect(bar).to.not.exist;\n    expect(baz).to.not.exist;",
            "line": " server/mocha/chai.js:1283"
        },
        {
            "message": "Missing item type\n### .empty\n\nAsserts that the target's length is `0`. For arrays, it checks\nthe `length` property. For objects, it gets the count of\nenumerable keys.\n\n    expect([]).to.be.empty;\n    expect('').to.be.empty;\n    expect({}).to.be.empty;",
            "line": " server/mocha/chai.js:1309"
        },
        {
            "message": "Missing item type\n### .arguments\n\nAsserts that the target is an arguments object.\n\n    function test () {\n      expect(arguments).to.be.arguments;\n    }",
            "line": " server/mocha/chai.js:1341"
        },
        {
            "message": "Missing item type\n### .equal(value)\n\nAsserts that the target is strictly equal (`===`) to `value`.\nAlternately, if the `deep` flag is set, asserts that\nthe target is deeply equal to `value`.\n\n    expect('hello').to.equal('hello');\n    expect(42).to.equal(42);\n    expect(1).to.not.equal(true);\n    expect({ foo: 'bar' }).to.not.equal({ foo: 'bar' });\n    expect({ foo: 'bar' }).to.deep.equal({ foo: 'bar' });",
            "line": " server/mocha/chai.js:1368"
        },
        {
            "message": "Missing item type\n### .eql(value)\n\nAsserts that the target is deeply equal to `value`.\n\n    expect({ foo: 'bar' }).to.eql({ foo: 'bar' });\n    expect([ 1, 2, 3 ]).to.eql([ 1, 2, 3 ]);",
            "line": " server/mocha/chai.js:1411"
        },
        {
            "message": "Missing item type\n### .above(value)\n\nAsserts that the target is greater than `value`.\n\n    expect(10).to.be.above(5);\n\nCan also be used in conjunction with `length` to\nassert a minimum length. The benefit being a\nmore informative error message than if the length\nwas supplied directly.\n\n    expect('foo').to.have.length.above(2);\n    expect([ 1, 2, 3 ]).to.have.length.above(2);",
            "line": " server/mocha/chai.js:1441"
        },
        {
            "message": "Missing item type\n### .least(value)\n\nAsserts that the target is greater than or equal to `value`.\n\n    expect(10).to.be.at.least(10);\n\nCan also be used in conjunction with `length` to\nassert a minimum length. The benefit being a\nmore informative error message than if the length\nwas supplied directly.\n\n    expect('foo').to.have.length.of.at.least(2);\n    expect([ 1, 2, 3 ]).to.have.length.of.at.least(3);",
            "line": " server/mocha/chai.js:1490"
        },
        {
            "message": "Missing item type\n### .below(value)\n\nAsserts that the target is less than `value`.\n\n    expect(5).to.be.below(10);\n\nCan also be used in conjunction with `length` to\nassert a maximum length. The benefit being a\nmore informative error message than if the length\nwas supplied directly.\n\n    expect('foo').to.have.length.below(4);\n    expect([ 1, 2, 3 ]).to.have.length.below(4);",
            "line": " server/mocha/chai.js:1537"
        },
        {
            "message": "Missing item type\n### .most(value)\n\nAsserts that the target is less than or equal to `value`.\n\n    expect(5).to.be.at.most(5);\n\nCan also be used in conjunction with `length` to\nassert a maximum length. The benefit being a\nmore informative error message than if the length\nwas supplied directly.\n\n    expect('foo').to.have.length.of.at.most(4);\n    expect([ 1, 2, 3 ]).to.have.length.of.at.most(3);",
            "line": " server/mocha/chai.js:1586"
        },
        {
            "message": "Missing item type\n### .within(start, finish)\n\nAsserts that the target is within a range.\n\n    expect(7).to.be.within(5,10);\n\nCan also be used in conjunction with `length` to\nassert a length range. The benefit being a\nmore informative error message than if the length\nwas supplied directly.\n\n    expect('foo').to.have.length.within(2,4);\n    expect([ 1, 2, 3 ]).to.have.length.within(2,4);",
            "line": " server/mocha/chai.js:1633"
        },
        {
            "message": "Missing item type\n### .instanceof(constructor)\n\nAsserts that the target is an instance of `constructor`.\n\n    var Tea = function (name) { this.name = name; }\n      , Chai = new Tea('chai');\n\n    expect(Chai).to.be.an.instanceof(Tea);\n    expect([ 1, 2, 3 ]).to.be.instanceof(Array);",
            "line": " server/mocha/chai.js:1676"
        },
        {
            "message": "Missing item type\n### .property(name, [value])\n\nAsserts that the target has a property `name`, optionally asserting that\nthe value of that property is strictly equal to  `value`.\nIf the `deep` flag is set, you can use dot- and bracket-notation for deep\nreferences into objects and arrays.\n\n    // simple referencing\n    var obj = { foo: 'bar' };\n    expect(obj).to.have.property('foo');\n    expect(obj).to.have.property('foo', 'bar');\n\n    // deep referencing\n    var deepObj = {\n        green: { tea: 'matcha' }\n      , teas: [ 'chai', 'matcha', { tea: 'konacha' } ]\n    };\n\n    expect(deepObj).to.have.deep.property('green.tea', 'matcha');\n    expect(deepObj).to.have.deep.property('teas[1]', 'matcha');\n    expect(deepObj).to.have.deep.property('teas[2].tea', 'konacha');\n\nYou can also use an array as the starting point of a `deep.property`\nassertion, or traverse nested arrays.\n\n    var arr = [\n        [ 'chai', 'matcha', 'konacha' ]\n      , [ { tea: 'chai' }\n        , { tea: 'matcha' }\n        , { tea: 'konacha' } ]\n    ];\n\n    expect(arr).to.have.deep.property('[0][1]', 'matcha');\n    expect(arr).to.have.deep.property('[1][2].tea', 'konacha');\n\nFurthermore, `property` changes the subject of the assertion\nto be the value of that property from the original object. This\npermits for further chainable assertions on that property.\n\n    expect(obj).to.have.property('foo')\n      .that.is.a('string');\n    expect(deepObj).to.have.property('green')\n      .that.is.an('object')\n      .that.deep.equals({ tea: 'matcha' });\n    expect(deepObj).to.have.property('teas')\n      .that.is.an('array')\n      .with.deep.property('[2]')\n        .that.deep.equals({ tea: 'konacha' });",
            "line": " server/mocha/chai.js:1707"
        },
        {
            "message": "Missing item type\n### .ownProperty(name)\n\nAsserts that the target has an own property `name`.\n\n    expect('test').to.have.ownProperty('length');",
            "line": " server/mocha/chai.js:1802"
        },
        {
            "message": "Missing item type\n### .length(value)\n\nAsserts that the target's `length` property has\nthe expected value.\n\n    expect([ 1, 2, 3]).to.have.length(3);\n    expect('foobar').to.have.length(6);\n\nCan also be used as a chain precursor to a value\ncomparison for the length property.\n\n    expect('foo').to.have.length.above(2);\n    expect([ 1, 2, 3 ]).to.have.length.above(2);\n    expect('foo').to.have.length.below(4);\n    expect([ 1, 2, 3 ]).to.have.length.below(4);\n    expect('foo').to.have.length.within(2,4);\n    expect([ 1, 2, 3 ]).to.have.length.within(2,4);",
            "line": " server/mocha/chai.js:1829"
        },
        {
            "message": "Missing item type\n### .match(regexp)\n\nAsserts that the target matches a regular expression.\n\n    expect('foobar').to.match(/^foo/);",
            "line": " server/mocha/chai.js:1877"
        },
        {
            "message": "Missing item type\n### .string(string)\n\nAsserts that the string target contains another string.\n\n    expect('foobar').to.have.string('bar');",
            "line": " server/mocha/chai.js:1900"
        },
        {
            "message": "Missing item type\n### .keys(key1, [key2], [...])\n\nAsserts that the target has exactly the given keys, or\nasserts the inclusion of some keys when using the\n`include` or `contain` modifiers.\n\n    expect({ foo: 1, bar: 2 }).to.have.keys(['foo', 'bar']);\n    expect({ foo: 1, bar: 2, baz: 3 }).to.contain.keys('foo', 'bar');",
            "line": " server/mocha/chai.js:1926"
        },
        {
            "message": "Missing item type\n### .throw(constructor)\n\nAsserts that the function target will throw a specific error, or specific type of error\n(as determined using `instanceof`), optionally with a RegExp or string inclusion test\nfor the error's message.\n\n    var err = new ReferenceError('This is a bad function.');\n    var fn = function () { throw err; }\n    expect(fn).to.throw(ReferenceError);\n    expect(fn).to.throw(Error);\n    expect(fn).to.throw(/bad function/);\n    expect(fn).to.not.throw('good function');\n    expect(fn).to.throw(ReferenceError, /bad function/);\n    expect(fn).to.throw(err);\n    expect(fn).to.not.throw(new RangeError('Out of range.'));\n\nPlease note that when a throw expectation is negated, it will check each\nparameter independently, starting with error constructor type. The appropriate way\nto check for the existence of a type of error but for a message that does not match\nis to use `and`.\n\n    expect(fn).to.throw(ReferenceError)\n       .and.not.throw(/good function/);",
            "line": " server/mocha/chai.js:1994"
        },
        {
            "message": "Missing item type\n### .respondTo(method)\n\nAsserts that the object or class target will respond to a method.\n\n    Klass.prototype.bar = function(){};\n    expect(Klass).to.respondTo('bar');\n    expect(obj).to.respondTo('bar');\n\nTo check if a constructor will respond to a static function,\nset the `itself` flag.\n\n    Klass.baz = function(){};\n    expect(Klass).itself.to.respondTo('baz');",
            "line": " server/mocha/chai.js:2151"
        },
        {
            "message": "Missing item type\n### .itself\n\nSets the `itself` flag, later used by the `respondTo` assertion.\n\n    function Foo() {}\n    Foo.bar = function() {}\n    Foo.prototype.baz = function() {}\n\n    expect(Foo).itself.to.respondTo('bar');\n    expect(Foo).itself.not.to.respondTo('baz');",
            "line": " server/mocha/chai.js:2187"
        },
        {
            "message": "Missing item type\n### .satisfy(method)\n\nAsserts that the target passes a given truth test.\n\n    expect(1).to.satisfy(function(num) { return num > 0; });",
            "line": " server/mocha/chai.js:2207"
        },
        {
            "message": "Missing item type\n### .closeTo(expected, delta)\n\nAsserts that the target is equal `expected`, to within a +/- `delta` range.\n\n    expect(1.5).to.be.closeTo(1, 0.5);",
            "line": " server/mocha/chai.js:2232"
        },
        {
            "message": "Missing item type\n### .members(set)\n\nAsserts that the target is a superset of `set`,\nor that the target and `set` have the same strictly-equal (===) members.\nAlternately, if the `deep` flag is set, set members are compared for deep\nequality.\n\n    expect([1, 2, 3]).to.include.members([3, 2]);\n    expect([1, 2, 3]).to.not.include.members([3, 2, 8]);\n\n    expect([4, 2]).to.have.members([2, 4]);\n    expect([5, 2]).to.not.have.members([5, 2, 1]);\n\n    expect([{ id: 1 }]).to.deep.include.members([{ id: 1 }]);",
            "line": " server/mocha/chai.js:2266"
        },
        {
            "message": "Missing item type\n### assert(expression, message)\n\nWrite your own test expressions.\n\n    assert('foo' !== 'bar', 'foo is not bar');\n    assert(Array.isArray([]), 'empty arrays are arrays');",
            "line": " server/mocha/chai.js:2339"
        },
        {
            "message": "Missing item type\n### .fail(actual, expected, [message], [operator])\n\nThrow a failure. Node.js `assert` module-compatible.",
            "line": " server/mocha/chai.js:2362"
        },
        {
            "message": "Missing item type\n### .ok(object, [message])\n\nAsserts that `object` is truthy.\n\n    assert.ok('everything', 'everything is ok');\n    assert.ok(false, 'this will fail');",
            "line": " server/mocha/chai.js:2384"
        },
        {
            "message": "Missing item type\n### .notOk(object, [message])\n\nAsserts that `object` is falsy.\n\n    assert.notOk('everything', 'this will fail');\n    assert.notOk(false, 'this will pass');",
            "line": " server/mocha/chai.js:2402"
        },
        {
            "message": "Missing item type\n### .equal(actual, expected, [message])\n\nAsserts non-strict equality (`==`) of `actual` and `expected`.\n\n    assert.equal(3, '3', '== coerces values to strings');",
            "line": " server/mocha/chai.js:2420"
        },
        {
            "message": "Missing item type\n### .notEqual(actual, expected, [message])\n\nAsserts non-strict inequality (`!=`) of `actual` and `expected`.\n\n    assert.notEqual(3, 4, 'these numbers are not equal');",
            "line": " server/mocha/chai.js:2446"
        },
        {
            "message": "Missing item type\n### .strictEqual(actual, expected, [message])\n\nAsserts strict equality (`===`) of `actual` and `expected`.\n\n    assert.strictEqual(true, true, 'these booleans are strictly equal');",
            "line": " server/mocha/chai.js:2472"
        },
        {
            "message": "Missing item type\n### .notStrictEqual(actual, expected, [message])\n\nAsserts strict inequality (`!==`) of `actual` and `expected`.\n\n    assert.notStrictEqual(3, '3', 'no coercion for strict equality');",
            "line": " server/mocha/chai.js:2490"
        },
        {
            "message": "Missing item type\n### .deepEqual(actual, expected, [message])\n\nAsserts that `actual` is deeply equal to `expected`.\n\n    assert.deepEqual({ tea: 'green' }, { tea: 'green' });",
            "line": " server/mocha/chai.js:2508"
        },
        {
            "message": "Missing item type\n### .notDeepEqual(actual, expected, [message])\n\nAssert that `actual` is not deeply equal to `expected`.\n\n    assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });",
            "line": " server/mocha/chai.js:2526"
        },
        {
            "message": "Missing item type\n### .isTrue(value, [message])\n\nAsserts that `value` is true.\n\n    var teaServed = true;\n    assert.isTrue(teaServed, 'the tea has been served');",
            "line": " server/mocha/chai.js:2544"
        },
        {
            "message": "Missing item type\n### .isFalse(value, [message])\n\nAsserts that `value` is false.\n\n    var teaServed = false;\n    assert.isFalse(teaServed, 'no tea yet? hmm...');",
            "line": " server/mocha/chai.js:2562"
        },
        {
            "message": "Missing item type\n### .isNull(value, [message])\n\nAsserts that `value` is null.\n\n    assert.isNull(err, 'there was no error');",
            "line": " server/mocha/chai.js:2580"
        },
        {
            "message": "Missing item type\n### .isNotNull(value, [message])\n\nAsserts that `value` is not null.\n\n    var tea = 'tasty chai';\n    assert.isNotNull(tea, 'great, time for tea!');",
            "line": " server/mocha/chai.js:2597"
        },
        {
            "message": "Missing item type\n### .isUndefined(value, [message])\n\nAsserts that `value` is `undefined`.\n\n    var tea;\n    assert.isUndefined(tea, 'no tea defined');",
            "line": " server/mocha/chai.js:2615"
        },
        {
            "message": "Missing item type\n### .isDefined(value, [message])\n\nAsserts that `value` is not `undefined`.\n\n    var tea = 'cup of chai';\n    assert.isDefined(tea, 'tea has been defined');",
            "line": " server/mocha/chai.js:2633"
        },
        {
            "message": "Missing item type\n### .isFunction(value, [message])\n\nAsserts that `value` is a function.\n\n    function serveTea() { return 'cup of tea'; };\n    assert.isFunction(serveTea, 'great, we can have tea now');",
            "line": " server/mocha/chai.js:2651"
        },
        {
            "message": "Missing item type\n### .isNotFunction(value, [message])\n\nAsserts that `value` is _not_ a function.\n\n    var serveTea = [ 'heat', 'pour', 'sip' ];\n    assert.isNotFunction(serveTea, 'great, we have listed the steps');",
            "line": " server/mocha/chai.js:2669"
        },
        {
            "message": "Missing item type\n### .isObject(value, [message])\n\nAsserts that `value` is an object (as revealed by\n`Object.prototype.toString`).\n\n    var selection = { name: 'Chai', serve: 'with spices' };\n    assert.isObject(selection, 'tea selection is an object');",
            "line": " server/mocha/chai.js:2687"
        },
        {
            "message": "Missing item type\n### .isNotObject(value, [message])\n\nAsserts that `value` is _not_ an object.\n\n    var selection = 'chai'\n    assert.isNotObject(selection, 'tea selection is not an object');\n    assert.isNotObject(null, 'null is not an object');",
            "line": " server/mocha/chai.js:2706"
        },
        {
            "message": "Missing item type\n### .isArray(value, [message])\n\nAsserts that `value` is an array.\n\n    var menu = [ 'green', 'chai', 'oolong' ];\n    assert.isArray(menu, 'what kind of tea do we want?');",
            "line": " server/mocha/chai.js:2725"
        },
        {
            "message": "Missing item type\n### .isNotArray(value, [message])\n\nAsserts that `value` is _not_ an array.\n\n    var menu = 'green|chai|oolong';\n    assert.isNotArray(menu, 'what kind of tea do we want?');",
            "line": " server/mocha/chai.js:2743"
        },
        {
            "message": "Missing item type\n### .isString(value, [message])\n\nAsserts that `value` is a string.\n\n    var teaOrder = 'chai';\n    assert.isString(teaOrder, 'order placed');",
            "line": " server/mocha/chai.js:2761"
        },
        {
            "message": "Missing item type\n### .isNotString(value, [message])\n\nAsserts that `value` is _not_ a string.\n\n    var teaOrder = 4;\n    assert.isNotString(teaOrder, 'order placed');",
            "line": " server/mocha/chai.js:2779"
        },
        {
            "message": "Missing item type\n### .isNumber(value, [message])\n\nAsserts that `value` is a number.\n\n    var cups = 2;\n    assert.isNumber(cups, 'how many cups');",
            "line": " server/mocha/chai.js:2797"
        },
        {
            "message": "Missing item type\n### .isNotNumber(value, [message])\n\nAsserts that `value` is _not_ a number.\n\n    var cups = '2 cups please';\n    assert.isNotNumber(cups, 'how many cups');",
            "line": " server/mocha/chai.js:2815"
        },
        {
            "message": "Missing item type\n### .isBoolean(value, [message])\n\nAsserts that `value` is a boolean.\n\n    var teaReady = true\n      , teaServed = false;\n\n    assert.isBoolean(teaReady, 'is the tea ready');\n    assert.isBoolean(teaServed, 'has tea been served');",
            "line": " server/mocha/chai.js:2833"
        },
        {
            "message": "Missing item type\n### .isNotBoolean(value, [message])\n\nAsserts that `value` is _not_ a boolean.\n\n    var teaReady = 'yep'\n      , teaServed = 'nope';\n\n    assert.isNotBoolean(teaReady, 'is the tea ready');\n    assert.isNotBoolean(teaServed, 'has tea been served');",
            "line": " server/mocha/chai.js:2854"
        },
        {
            "message": "Missing item type\n### .typeOf(value, name, [message])\n\nAsserts that `value`'s type is `name`, as determined by\n`Object.prototype.toString`.\n\n    assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');\n    assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');\n    assert.typeOf('tea', 'string', 'we have a string');\n    assert.typeOf(/tea/, 'regexp', 'we have a regular expression');\n    assert.typeOf(null, 'null', 'we have a null');\n    assert.typeOf(undefined, 'undefined', 'we have an undefined');",
            "line": " server/mocha/chai.js:2875"
        },
        {
            "message": "Missing item type\n### .notTypeOf(value, name, [message])\n\nAsserts that `value`'s type is _not_ `name`, as determined by\n`Object.prototype.toString`.\n\n    assert.notTypeOf('tea', 'number', 'strings are not numbers');",
            "line": " server/mocha/chai.js:2899"
        },
        {
            "message": "Missing item type\n### .instanceOf(object, constructor, [message])\n\nAsserts that `value` is an instance of `constructor`.\n\n    var Tea = function (name) { this.name = name; }\n      , chai = new Tea('chai');\n\n    assert.instanceOf(chai, Tea, 'chai is an instance of tea');",
            "line": " server/mocha/chai.js:2918"
        },
        {
            "message": "Missing item type\n### .notInstanceOf(object, constructor, [message])\n\nAsserts `value` is not an instance of `constructor`.\n\n    var Tea = function (name) { this.name = name; }\n      , chai = new String('chai');\n\n    assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');",
            "line": " server/mocha/chai.js:2939"
        },
        {
            "message": "Missing item type\n### .include(haystack, needle, [message])\n\nAsserts that `haystack` includes `needle`. Works\nfor strings and arrays.\n\n    assert.include('foobar', 'bar', 'foobar contains string \"bar\"');\n    assert.include([ 1, 2, 3 ], 3, 'array contains value');",
            "line": " server/mocha/chai.js:2960"
        },
        {
            "message": "Missing item type\n### .notInclude(haystack, needle, [message])\n\nAsserts that `haystack` does not include `needle`. Works\nfor strings and arrays.\ni\n    assert.notInclude('foobar', 'baz', 'string not include substring');\n    assert.notInclude([ 1, 2, 3 ], 4, 'array not include contain value');",
            "line": " server/mocha/chai.js:2980"
        },
        {
            "message": "Missing item type\n### .match(value, regexp, [message])\n\nAsserts that `value` matches the regular expression `regexp`.\n\n    assert.match('foobar', /^foo/, 'regexp matches');",
            "line": " server/mocha/chai.js:3000"
        },
        {
            "message": "Missing item type\n### .notMatch(value, regexp, [message])\n\nAsserts that `value` does not match the regular expression `regexp`.\n\n    assert.notMatch('foobar', /^foo/, 'regexp does not match');",
            "line": " server/mocha/chai.js:3018"
        },
        {
            "message": "Missing item type\n### .property(object, property, [message])\n\nAsserts that `object` has a property named by `property`.\n\n    assert.property({ tea: { green: 'matcha' }}, 'tea');",
            "line": " server/mocha/chai.js:3036"
        },
        {
            "message": "Missing item type\n### .notProperty(object, property, [message])\n\nAsserts that `object` does _not_ have a property named by `property`.\n\n    assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');",
            "line": " server/mocha/chai.js:3054"
        },
        {
            "message": "Missing item type\n### .deepProperty(object, property, [message])\n\nAsserts that `object` has a property named by `property`, which can be a\nstring using dot- and bracket-notation for deep reference.\n\n    assert.deepProperty({ tea: { green: 'matcha' }}, 'tea.green');",
            "line": " server/mocha/chai.js:3072"
        },
        {
            "message": "Missing item type\n### .notDeepProperty(object, property, [message])\n\nAsserts that `object` does _not_ have a property named by `property`, which\ncan be a string using dot- and bracket-notation for deep reference.\n\n    assert.notDeepProperty({ tea: { green: 'matcha' }}, 'tea.oolong');",
            "line": " server/mocha/chai.js:3091"
        },
        {
            "message": "Missing item type\n### .propertyVal(object, property, value, [message])\n\nAsserts that `object` has a property named by `property` with value given\nby `value`.\n\n    assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');",
            "line": " server/mocha/chai.js:3110"
        },
        {
            "message": "Missing item type\n### .propertyNotVal(object, property, value, [message])\n\nAsserts that `object` has a property named by `property`, but with a value\ndifferent from that given by `value`.\n\n    assert.propertyNotVal({ tea: 'is good' }, 'tea', 'is bad');",
            "line": " server/mocha/chai.js:3130"
        },
        {
            "message": "Missing item type\n### .deepPropertyVal(object, property, value, [message])\n\nAsserts that `object` has a property named by `property` with value given\nby `value`. `property` can use dot- and bracket-notation for deep\nreference.\n\n    assert.deepPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');",
            "line": " server/mocha/chai.js:3150"
        },
        {
            "message": "Missing item type\n### .deepPropertyNotVal(object, property, value, [message])\n\nAsserts that `object` has a property named by `property`, but with a value\ndifferent from that given by `value`. `property` can use dot- and\nbracket-notation for deep reference.\n\n    assert.deepPropertyNotVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');",
            "line": " server/mocha/chai.js:3171"
        },
        {
            "message": "Missing item type\n### .lengthOf(object, length, [message])\n\nAsserts that `object` has a `length` property with the expected value.\n\n    assert.lengthOf([1,2,3], 3, 'array has length of 3');\n    assert.lengthOf('foobar', 5, 'string has length of 6');",
            "line": " server/mocha/chai.js:3192"
        },
        {
            "message": "Missing item type\n### .throws(function, [constructor/string/regexp], [string/regexp], [message])\n\nAsserts that `function` will throw an error that is an instance of\n`constructor`, or alternately that it will throw an error with message\nmatching `regexp`.\n\n    assert.throw(fn, 'function throws a reference error');\n    assert.throw(fn, /function throws a reference error/);\n    assert.throw(fn, ReferenceError);\n    assert.throw(fn, ReferenceError, 'function throws a reference error');\n    assert.throw(fn, ReferenceError, /function throws a reference error/);",
            "line": " server/mocha/chai.js:3211"
        },
        {
            "message": "Missing item type\n### .doesNotThrow(function, [constructor/regexp], [message])\n\nAsserts that `function` will _not_ throw an error that is an instance of\n`constructor`, or alternately that it will not throw an error with message\nmatching `regexp`.\n\n    assert.doesNotThrow(fn, Error, 'function does not throw');",
            "line": " server/mocha/chai.js:3245"
        },
        {
            "message": "Missing item type\n### .operator(val1, operator, val2, [message])\n\nCompares two values using `operator`.\n\n    assert.operator(1, '<', 2, 'everything is ok');\n    assert.operator(1, '>', 2, 'this will fail');",
            "line": " server/mocha/chai.js:3272"
        },
        {
            "message": "Missing item type\n### .closeTo(actual, expected, delta, [message])\n\nAsserts that the target is equal `expected`, to within a +/- `delta` range.\n\n    assert.closeTo(1.5, 1, 0.5, 'numbers are close');",
            "line": " server/mocha/chai.js:3299"
        },
        {
            "message": "Missing item type\n### .sameMembers(set1, set2, [message])\n\nAsserts that `set1` and `set2` have the same members.\nOrder is not taken into account.\n\n    assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');",
            "line": " server/mocha/chai.js:3318"
        },
        {
            "message": "Missing item type\n### .includeMembers(superset, subset, [message])\n\nAsserts that `subset` is included in `superset`.\nOrder is not taken into account.\n\n    assert.includeMembers([ 1, 2, 3 ], [ 2, 1 ], 'include members');",
            "line": " server/mocha/chai.js:3337"
        },
        {
            "message": "Missing item type\n### addChainableMethod (ctx, name, method, chainingBehavior)\n\nAdds a method to an object, such that the method can also be chained.\n\n    utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {\n      var obj = utils.flag(this, 'object');\n      new chai.Assertion(obj).to.be.equal(str);\n    });\n\nCan also be accessed directly from `chai.Assertion`.\n\n    chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);\n\nThe result can then be used as both a method assertion, executing both `method` and\n`chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.\n\n    expect(fooStr).to.be.foo('bar');\n    expect(fooStr).to.be.foo.equal('foo');",
            "line": " server/mocha/chai.js:3504"
        },
        {
            "message": "Missing item type\n### .addMethod (ctx, name, method)\n\nAdds a method to the prototype of an object.\n\n    utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {\n      var obj = utils.flag(this, 'object');\n      new chai.Assertion(obj).to.be.equal(str);\n    });\n\nCan also be accessed directly from `chai.Assertion`.\n\n    chai.Assertion.addMethod('foo', fn);\n\nThen can be used as any other assertion.\n\n    expect(fooStr).to.be.foo('bar');",
            "line": " server/mocha/chai.js:3596"
        },
        {
            "message": "Missing item type\n### addProperty (ctx, name, getter)\n\nAdds a property to the prototype of an object.\n\n    utils.addProperty(chai.Assertion.prototype, 'foo', function () {\n      var obj = utils.flag(this, 'object');\n      new chai.Assertion(obj).to.be.instanceof(Foo);\n    });\n\nCan also be accessed directly from `chai.Assertion`.\n\n    chai.Assertion.addProperty('foo', fn);\n\nThen can be used as any other assertion.\n\n    expect(myFoo).to.be.foo;",
            "line": " server/mocha/chai.js:3640"
        },
        {
            "message": "Missing item type\n### flag(object ,key, [value])\n\nGet or set a flag value on an object. If a\nvalue is provided it will be set, else it will\nreturn the currently set value or `undefined` if\nthe value is not set.\n\n    utils.flag(this, 'foo', 'bar'); // setter\n    utils.flag(this, 'foo'); // getter, returns `bar`",
            "line": " server/mocha/chai.js:3683"
        },
        {
            "message": "Missing item type\n# getActual(object, [actual])\n\nReturns the `actual` value for an Assertion",
            "line": " server/mocha/chai.js:3718"
        },
        {
            "message": "Missing item type\n### .getEnumerableProperties(object)\n\nThis allows the retrieval of enumerable property names of an object,\ninherited or not.",
            "line": " server/mocha/chai.js:3739"
        },
        {
            "message": "Missing item type\n### .getMessage(object, message, negateMessage)\n\nConstruct the error message based on flags\nand template tags. Template tags will return\na stringified inspection of the object referenced.\n\nMessage template tags:\n- `#{this}` current asserted object\n- `#{act}` actual value\n- `#{exp}` expected value",
            "line": " server/mocha/chai.js:3776"
        },
        {
            "message": "Missing item type\n# getName(func)\n\nGets the name of a function, in a cross-browser way.",
            "line": " server/mocha/chai.js:3819"
        },
        {
            "message": "Missing item type\n### .getPathValue(path, object)\n\nThis allows the retrieval of values in an\nobject given a string path.\n\n    var obj = {\n        prop1: {\n            arr: ['a', 'b', 'c']\n          , str: 'Hello'\n        }\n      , prop2: {\n            arr: [ { nested: 'Universe' } ]\n          , str: 'Hello again!'\n        }\n    }\n\nThe following would be the results.\n\n    getPathValue('prop1.str', obj); // Hello\n    getPathValue('prop1.att[2]', obj); // b\n    getPathValue('prop2.arr[0].nested', obj); // Universe",
            "line": " server/mocha/chai.js:3843"
        },
        {
            "message": "Missing item type\n### .getProperties(object)\n\nThis allows the retrieval of property names of an object, enumerable or not,\ninherited or not.",
            "line": " server/mocha/chai.js:3947"
        },
        {
            "message": "Missing item type\nEchos the value of a value. Trys to print the value out\nin the best way possible given the different types.",
            "line": " server/mocha/chai.js:4105"
        },
        {
            "message": "Missing item type\n### .objDisplay (object)\n\nDetermines if an object or an array matches\ncriteria to be inspected in-line for error\nmessages or should be truncated.",
            "line": " server/mocha/chai.js:4432"
        },
        {
            "message": "Missing item type\n### overwriteMethod (ctx, name, fn)\n\nOverwites an already existing method and provides\naccess to previous function. Must return function\nto be used for name.\n\n    utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {\n      return function (str) {\n        var obj = utils.flag(this, 'object');\n        if (obj instanceof Foo) {\n          new chai.Assertion(obj.value).to.equal(str);\n        } else {\n          _super.apply(this, arguments);\n        }\n      }\n    });\n\nCan also be accessed directly from `chai.Assertion`.\n\n    chai.Assertion.overwriteMethod('foo', fn);\n\nThen can be used as any other assertion.\n\n    expect(myFoo).to.equal('bar');",
            "line": " server/mocha/chai.js:4477"
        },
        {
            "message": "Missing item type\n### overwriteProperty (ctx, name, fn)\n\nOverwites an already existing property getter and provides\naccess to previous value. Must return function to use as getter.\n\n    utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {\n      return function () {\n        var obj = utils.flag(this, 'object');\n        if (obj instanceof Foo) {\n          new chai.Assertion(obj.name).to.equal('bar');\n        } else {\n          _super.call(this);\n        }\n      }\n    });\n\n\nCan also be accessed directly from `chai.Assertion`.\n\n    chai.Assertion.overwriteProperty('foo', fn);\n\nThen can be used as any other assertion.\n\n    expect(myFoo).to.be.ok;",
            "line": " server/mocha/chai.js:4531"
        },
        {
            "message": "Missing item type\n### overwriteChainableMethod (ctx, name, fn)\n\nOverwites an already existing chainable method\nand provides access to the previous function or\nproperty.  Must return functions to be used for\nname.\n\n    utils.overwriteChainableMethod(chai.Assertion.prototype, 'length',\n      function (_super) {\n      }\n    , function (_super) {\n      }\n    );\n\nCan also be accessed directly from `chai.Assertion`.\n\n    chai.Assertion.overwriteChainableMethod('foo', fn, fn);\n\nThen can be used as any other assertion.\n\n    expect(myFoo).to.have.length(3);\n    expect(myFoo).to.have.length.above(3);",
            "line": " server/mocha/chai.js:4588"
        },
        {
            "message": "Missing item type\n# test(object, expression)\n\nTest and object for expression.",
            "line": " server/mocha/chai.js:4650"
        },
        {
            "message": "Missing item type\n### transferFlags(assertion, object, includeAll = true)\n\nTransfer all the flags for `assertion` to `object`. If\n`includeAll` is set to `false`, then the base Chai\nassertion flags (namely `object`, `ssfi`, and `message`)\nwill not be transferred.\n\n\n    var newAssertion = new Assertion();\n    utils.transferFlags(assertion, newAssertion);\n\n    var anotherAsseriton = new Assertion(myObj);\n    utils.transferFlags(assertion, anotherAssertion, false);",
            "line": " server/mocha/chai.js:4673"
        },
        {
            "message": "Missing item type\n### type(object)\n\nBetter implementation of `typeof` detection that can\nbe used cross-browser. Handles the inconsistencies of\nArray, `null`, and `undefined` detection.\n\n    utils.type({}) // 'object'\n    utils.type(null) // `null'\n    utils.type(undefined) // `undefined`\n    utils.type([]) // `array`",
            "line": " server/mocha/chai.js:4734"
        },
        {
            "message": "Missing item type\nModule exports.",
            "line": " server/mocha/mocha.js:419"
        },
        {
            "message": "Missing item type\nCheck if `obj` is an array.",
            "line": " server/mocha/mocha.js:425"
        },
        {
            "message": "Missing item type\nEvent emitter constructor.",
            "line": " server/mocha/mocha.js:433"
        },
        {
            "message": "Missing item type\nAdds a listener.",
            "line": " server/mocha/mocha.js:441"
        },
        {
            "message": "Missing item type\nAdds a volatile listener.",
            "line": " server/mocha/mocha.js:465"
        },
        {
            "message": "Missing item type\nRemoves a listener.",
            "line": " server/mocha/mocha.js:485"
        },
        {
            "message": "Missing item type\nRemoves all listeners for an event.",
            "line": " server/mocha/mocha.js:522"
        },
        {
            "message": "Missing item type\nGets all listeners for a certain event.",
            "line": " server/mocha/mocha.js:541"
        },
        {
            "message": "Missing item type\nEmits an event.",
            "line": " server/mocha/mocha.js:563"
        },
        {
            "message": "Missing item type\nExpose `Progress`.",
            "line": " server/mocha/mocha.js:607"
        },
        {
            "message": "Missing item type\nInitialize a new `Progress` indicator.",
            "line": " server/mocha/mocha.js:613"
        },
        {
            "message": "Missing item type\nSet progress size to `n`.",
            "line": " server/mocha/mocha.js:624"
        },
        {
            "message": "Missing item type\nSet text to `str`.",
            "line": " server/mocha/mocha.js:637"
        },
        {
            "message": "Missing item type\nSet font size to `n`.",
            "line": " server/mocha/mocha.js:650"
        },
        {
            "message": "Missing item type\nSet font `family`.",
            "line": " server/mocha/mocha.js:663"
        },
        {
            "message": "Missing item type\nUpdate percentage to `n`.",
            "line": " server/mocha/mocha.js:675"
        },
        {
            "message": "Missing item type\nDraw on `ctx`.",
            "line": " server/mocha/mocha.js:687"
        },
        {
            "message": "Missing item type\nExpose `Context`.",
            "line": " server/mocha/mocha.js:754"
        },
        {
            "message": "Missing item type\nInitialize a new `Context`.",
            "line": " server/mocha/mocha.js:760"
        },
        {
            "message": "Missing item type\nSet or get the context `Runnable` to `runnable`.",
            "line": " server/mocha/mocha.js:768"
        },
        {
            "message": "Missing item type\nSet test timeout `ms`.",
            "line": " server/mocha/mocha.js:782"
        },
        {
            "message": "Missing item type\nSet test timeout `enabled`.",
            "line": " server/mocha/mocha.js:796"
        },
        {
            "message": "Missing item type\nSet test slowness threshold `ms`.",
            "line": " server/mocha/mocha.js:810"
        },
        {
            "message": "Missing item type\nInspect the context void of `._runnable`.",
            "line": " server/mocha/mocha.js:823"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " server/mocha/mocha.js:842"
        },
        {
            "message": "Missing item type\nExpose `Hook`.",
            "line": " server/mocha/mocha.js:848"
        },
        {
            "message": "Missing item type\nInitialize a new `Hook` with the given `title` and callback `fn`.",
            "line": " server/mocha/mocha.js:854"
        },
        {
            "message": "Missing item type\nInherit from `Runnable.prototype`.",
            "line": " server/mocha/mocha.js:867"
        },
        {
            "message": "Missing item type\nGet or set the test `err`.",
            "line": " server/mocha/mocha.js:877"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " server/mocha/mocha.js:899"
        },
        {
            "message": "Missing item type\nBDD-style interface:\n\n     describe('Array', function(){\n       describe('#indexOf()', function(){\n         it('should return -1 when not present', function(){\n\n         });\n\n         it('should return the index when present', function(){\n\n         });\n       });\n     });",
            "line": " server/mocha/mocha.js:907"
        },
        {
            "message": "Missing item type\nExecute before running tests.",
            "line": " server/mocha/mocha.js:929"
        },
        {
            "message": "Missing item type\nExecute after running tests.",
            "line": " server/mocha/mocha.js:937"
        },
        {
            "message": "Missing item type\nExecute before each test case.",
            "line": " server/mocha/mocha.js:945"
        },
        {
            "message": "Missing item type\nExecute after each test case.",
            "line": " server/mocha/mocha.js:953"
        },
        {
            "message": "Missing item type\nDescribe a \"suite\" with the given `title`\nand callback `fn` containing nested suites\nand/or tests.",
            "line": " server/mocha/mocha.js:961"
        },
        {
            "message": "Missing item type\nPending describe.",
            "line": " server/mocha/mocha.js:976"
        },
        {
            "message": "Missing item type\nExclusive suite.",
            "line": " server/mocha/mocha.js:990"
        },
        {
            "message": "Missing item type\nDescribe a specification or test-case\nwith the given `title` and callback `fn`\nacting as a thunk.",
            "line": " server/mocha/mocha.js:1000"
        },
        {
            "message": "Missing item type\nExclusive test-case.",
            "line": " server/mocha/mocha.js:1015"
        },
        {
            "message": "Missing item type\nPending test case.",
            "line": " server/mocha/mocha.js:1026"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " server/mocha/mocha.js:1042"
        },
        {
            "message": "Missing item type\nTDD-style interface:\n\n    exports.Array = {\n      '#indexOf()': {\n        'should return -1 when the value is not present': function(){\n\n        },\n\n        'should return the correct index when the value is present': function(){\n\n        }\n      }\n    };",
            "line": " server/mocha/mocha.js:1049"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " server/mocha/mocha.js:1117"
        },
        {
            "message": "Missing item type\nQUnit-style interface:\n\n    suite('Array');\n\n    test('#length', function(){\n      var arr = [1,2,3];\n      ok(arr.length == 3);\n    });\n\n    test('#indexOf()', function(){\n      var arr = [1,2,3];\n      ok(arr.indexOf(1) == 0);\n      ok(arr.indexOf(2) == 1);\n      ok(arr.indexOf(3) == 2);\n    });\n\n    suite('String');\n\n    test('#length', function(){\n      ok('foo'.length == 3);\n    });",
            "line": " server/mocha/mocha.js:1125"
        },
        {
            "message": "Missing item type\nExecute before running tests.",
            "line": " server/mocha/mocha.js:1155"
        },
        {
            "message": "Missing item type\nExecute after running tests.",
            "line": " server/mocha/mocha.js:1163"
        },
        {
            "message": "Missing item type\nExecute before each test case.",
            "line": " server/mocha/mocha.js:1171"
        },
        {
            "message": "Missing item type\nExecute after each test case.",
            "line": " server/mocha/mocha.js:1179"
        },
        {
            "message": "Missing item type\nDescribe a \"suite\" with the given `title`.",
            "line": " server/mocha/mocha.js:1187"
        },
        {
            "message": "Missing item type\nExclusive test-case.",
            "line": " server/mocha/mocha.js:1199"
        },
        {
            "message": "Missing item type\nDescribe a specification or test-case\nwith the given `title` and callback `fn`\nacting as a thunk.",
            "line": " server/mocha/mocha.js:1208"
        },
        {
            "message": "Missing item type\nExclusive test-case.",
            "line": " server/mocha/mocha.js:1221"
        },
        {
            "message": "Missing item type\nPending test case.",
            "line": " server/mocha/mocha.js:1231"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " server/mocha/mocha.js:1245"
        },
        {
            "message": "Missing item type\nTDD-style interface:\n\n     suite('Array', function(){\n       suite('#indexOf()', function(){\n         suiteSetup(function(){\n\n         });\n\n         test('should return -1 when not present', function(){\n\n         });\n\n         test('should return the index when present', function(){\n\n         });\n\n         suiteTeardown(function(){\n\n         });\n       });\n     });",
            "line": " server/mocha/mocha.js:1253"
        },
        {
            "message": "Missing item type\nExecute before each test case.",
            "line": " server/mocha/mocha.js:1283"
        },
        {
            "message": "Missing item type\nExecute after each test case.",
            "line": " server/mocha/mocha.js:1291"
        },
        {
            "message": "Missing item type\nExecute before the suite.",
            "line": " server/mocha/mocha.js:1299"
        },
        {
            "message": "Missing item type\nExecute after the suite.",
            "line": " server/mocha/mocha.js:1307"
        },
        {
            "message": "Missing item type\nDescribe a \"suite\" with the given `title`\nand callback `fn` containing nested suites\nand/or tests.",
            "line": " server/mocha/mocha.js:1315"
        },
        {
            "message": "Missing item type\nPending suite.",
            "line": " server/mocha/mocha.js:1330"
        },
        {
            "message": "Missing item type\nExclusive test-case.",
            "line": " server/mocha/mocha.js:1341"
        },
        {
            "message": "Missing item type\nDescribe a specification or test-case\nwith the given `title` and callback `fn`\nacting as a thunk.",
            "line": " server/mocha/mocha.js:1350"
        },
        {
            "message": "Missing item type\nExclusive test-case.",
            "line": " server/mocha/mocha.js:1365"
        },
        {
            "message": "Missing item type\nPending test case.",
            "line": " server/mocha/mocha.js:1375"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " server/mocha/mocha.js:1394"
        },
        {
            "message": "Missing item type\nExpose `Mocha`.",
            "line": " server/mocha/mocha.js:1401"
        },
        {
            "message": "Missing item type\nTo require local UIs and reporters when running in node.",
            "line": " server/mocha/mocha.js:1407"
        },
        {
            "message": "Missing item type\nExpose internals.",
            "line": " server/mocha/mocha.js:1417"
        },
        {
            "message": "Missing item type\nReturn image `name` path.",
            "line": " server/mocha/mocha.js:1431"
        },
        {
            "message": "Missing item type\nSetup mocha with `options`.\n\nOptions:\n\n  - `ui` name \"bdd\", \"tdd\", \"exports\" etc\n  - `reporter` reporter instance, defaults to `mocha.reporters.spec`\n  - `globals` array of accepted globals\n  - `timeout` timeout in milliseconds\n  - `bail` bail on the first test failure\n  - `slow` milliseconds to wait before considering a test slow\n  - `ignoreLeaks` ignore global leaks\n  - `grep` string or regexp to filter tests with",
            "line": " server/mocha/mocha.js:1443"
        },
        {
            "message": "Missing item type\nEnable or disable bailing on the first failure.",
            "line": " server/mocha/mocha.js:1491"
        },
        {
            "message": "Missing item type\nAdd test `file`.",
            "line": " server/mocha/mocha.js:1504"
        },
        {
            "message": "Missing item type\nSet reporter to `reporter`, defaults to \"spec\".",
            "line": " server/mocha/mocha.js:1516"
        },
        {
            "message": "Missing item type\nSet test UI `name`, defaults to \"bdd\".",
            "line": " server/mocha/mocha.js:1541"
        },
        {
            "message": "Missing item type\nLoad registered files.",
            "line": " server/mocha/mocha.js:1557"
        },
        {
            "message": "Missing item type\nEnable growl support.",
            "line": " server/mocha/mocha.js:1576"
        },
        {
            "message": "Missing item type\nAdd regexp to grep, if `re` is a string it is escaped.",
            "line": " server/mocha/mocha.js:1600"
        },
        {
            "message": "Missing item type\nInvert `.grep()` matches.",
            "line": " server/mocha/mocha.js:1615"
        },
        {
            "message": "Missing item type\nIgnore global leaks.",
            "line": " server/mocha/mocha.js:1627"
        },
        {
            "message": "Missing item type\nEnable global leak checking.",
            "line": " server/mocha/mocha.js:1640"
        },
        {
            "message": "Missing item type\nEnable growl support.",
            "line": " server/mocha/mocha.js:1652"
        },
        {
            "message": "Missing item type\nIgnore `globals` array or string.",
            "line": " server/mocha/mocha.js:1664"
        },
        {
            "message": "Missing item type\nEmit color output.",
            "line": " server/mocha/mocha.js:1677"
        },
        {
            "message": "Missing item type\nUse inline diffs rather than +/-.",
            "line": " server/mocha/mocha.js:1692"
        },
        {
            "message": "Missing item type\nSet the timeout in milliseconds.",
            "line": " server/mocha/mocha.js:1707"
        },
        {
            "message": "Missing item type\nSet slowness threshold in milliseconds.",
            "line": " server/mocha/mocha.js:1720"
        },
        {
            "message": "Missing item type\nEnable timeouts.",
            "line": " server/mocha/mocha.js:1733"
        },
        {
            "message": "Missing item type\nMakes all tests async (accepting a callback)",
            "line": " server/mocha/mocha.js:1748"
        },
        {
            "message": "Missing item type\nRun tests and invoke `fn()` when complete.",
            "line": " server/mocha/mocha.js:1760"
        },
        {
            "message": "Missing item type\nHelpers.",
            "line": " server/mocha/mocha.js:1788"
        },
        {
            "message": "Missing item type\nParse or format the given `val`.\n\nOptions:\n\n - `long` verbose formatting [false]",
            "line": " server/mocha/mocha.js:1798"
        },
        {
            "message": "Missing item type\nParse the given `str` and return milliseconds.",
            "line": " server/mocha/mocha.js:1817"
        },
        {
            "message": "Missing item type\nShort format for `ms`.",
            "line": " server/mocha/mocha.js:1856"
        },
        {
            "message": "Missing item type\nLong format for `ms`.",
            "line": " server/mocha/mocha.js:1872"
        },
        {
            "message": "Missing item type\nPluralization helper.",
            "line": " server/mocha/mocha.js:1888"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " server/mocha/mocha.js:1902"
        },
        {
            "message": "Missing item type\nSave timer references to avoid Sinon interfering (see GH-237).",
            "line": " server/mocha/mocha.js:1911"
        },
        {
            "message": "Missing item type\nCheck if both stdio streams are associated with a tty.",
            "line": " server/mocha/mocha.js:1921"
        },
        {
            "message": "Missing item type\nExpose `Base`.",
            "line": " server/mocha/mocha.js:1927"
        },
        {
            "message": "Missing item type\nEnable coloring by default.",
            "line": " server/mocha/mocha.js:1933"
        },
        {
            "message": "Missing item type\nInline diffs instead of +/-",
            "line": " server/mocha/mocha.js:1939"
        },
        {
            "message": "Missing item type\nDefault color map.",
            "line": " server/mocha/mocha.js:1945"
        },
        {
            "message": "Missing item type\nDefault symbol map.",
            "line": " server/mocha/mocha.js:1971"
        },
        {
            "message": "Missing item type\nColor `str` with the given `type`,\nallowing colors to be disabled,\nas well as user-defined color\nschemes.",
            "line": " server/mocha/mocha.js:1988"
        },
        {
            "message": "Missing item type\nExpose term window size, with some\ndefaults for when stderr is not a tty.",
            "line": " server/mocha/mocha.js:2005"
        },
        {
            "message": "Missing item type\nExpose some basic cursor interactions\nthat are common among reporters.",
            "line": " server/mocha/mocha.js:2018"
        },
        {
            "message": "Missing item type\nOutut the given `failures` as a list.",
            "line": " server/mocha/mocha.js:2050"
        },
        {
            "message": "Missing item type\nInitialize a new `Base` reporter.\n\nAll other reporters generally\ninherit from this reporter, providing\nstats such as test duration, number\nof tests passed / failed etc.",
            "line": " server/mocha/mocha.js:2108"
        },
        {
            "message": "Missing item type\nOutput common epilogue used by many of\nthe bundled reporters.",
            "line": " server/mocha/mocha.js:2174"
        },
        {
            "message": "Missing item type\nPad the given `str` to `len`.",
            "line": " server/mocha/mocha.js:2219"
        },
        {
            "message": "Missing item type\nReturns an inline diff between 2 strings with coloured ANSI output",
            "line": " server/mocha/mocha.js:2234"
        },
        {
            "message": "Missing item type\nReturns a unified diff between 2 strings",
            "line": " server/mocha/mocha.js:2268"
        },
        {
            "message": "Missing item type\nReturn a character diff for `err`.",
            "line": " server/mocha/mocha.js:2300"
        },
        {
            "message": "Missing item type\nReturns a string with all invisible characters in plain text",
            "line": " server/mocha/mocha.js:2318"
        },
        {
            "message": "Missing item type\nColor lines for `str`, using the color `name`.",
            "line": " server/mocha/mocha.js:2331"
        },
        {
            "message": "Missing item type\nCheck that a / b have the same type.",
            "line": " server/mocha/mocha.js:2346"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " server/mocha/mocha.js:2365"
        },
        {
            "message": "Missing item type\nExpose `Doc`.",
            "line": " server/mocha/mocha.js:2372"
        },
        {
            "message": "Missing item type\nInitialize a new `Doc` reporter.",
            "line": " server/mocha/mocha.js:2378"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " server/mocha/mocha.js:2432"
        },
        {
            "message": "Missing item type\nExpose `Dot`.",
            "line": " server/mocha/mocha.js:2439"
        },
        {
            "message": "Missing item type\nInitialize a new `Dot` matrix test reporter.",
            "line": " server/mocha/mocha.js:2445"
        },
        {
            "message": "Missing item type\nInherit from `Base.prototype`.",
            "line": " server/mocha/mocha.js:2489"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " server/mocha/mocha.js:2503"
        },
        {
            "message": "Missing item type\nExpose `HTMLCov`.",
            "line": " server/mocha/mocha.js:2510"
        },
        {
            "message": "Missing item type\nInitialize a new `JsCoverage` reporter.",
            "line": " server/mocha/mocha.js:2516"
        },
        {
            "message": "Missing item type\nReturn coverage class for `n`.",
            "line": " server/mocha/mocha.js:2540"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " server/mocha/mocha.js:2557"
        },
        {
            "message": "Missing item type\nSave timer references to avoid Sinon interfering (see GH-237).",
            "line": " server/mocha/mocha.js:2566"
        },
        {
            "message": "Missing item type\nExpose `HTML`.",
            "line": " server/mocha/mocha.js:2576"
        },
        {
            "message": "Missing item type\nStats template.",
            "line": " server/mocha/mocha.js:2582"
        },
        {
            "message": "Missing item type\nInitialize a new `HTML` reporter.",
            "line": " server/mocha/mocha.js:2593"
        },
        {
            "message": "Missing item type\nProvide suite URL",
            "line": " server/mocha/mocha.js:2735"
        },
        {
            "message": "Missing item type\nProvide test URL",
            "line": " server/mocha/mocha.js:2745"
        },
        {
            "message": "Missing item type\nDisplay error `msg`.",
            "line": " server/mocha/mocha.js:2755"
        },
        {
            "message": "Missing item type\nReturn a DOM fragment from `html`.",
            "line": " server/mocha/mocha.js:2763"
        },
        {
            "message": "Missing item type\nCheck for suites that do not have elements\nwith `classname`, and hide them.",
            "line": " server/mocha/mocha.js:2782"
        },
        {
            "message": "Missing item type\nUnhide .hidden suites.",
            "line": " server/mocha/mocha.js:2795"
        },
        {
            "message": "Missing item type\nSet `el` text to `str`.",
            "line": " server/mocha/mocha.js:2806"
        },
        {
            "message": "Missing item type\nListen on `event` with callback `fn`.",
            "line": " server/mocha/mocha.js:2818"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " server/mocha/mocha.js:2856"
        },
        {
            "message": "Missing item type\nExpose `JSONCov`.",
            "line": " server/mocha/mocha.js:2862"
        },
        {
            "message": "Missing item type\nInitialize a new `JsCoverage` reporter.",
            "line": " server/mocha/mocha.js:2868"
        },
        {
            "message": "Missing item type\nMap jscoverage data to a JSON structure\nsuitable for reporting.",
            "line": " server/mocha/mocha.js:2910"
        },
        {
            "message": "Missing item type\nMap jscoverage data for a single source file\nto a JSON structure suitable for reporting.",
            "line": " server/mocha/mocha.js:2948"
        },
        {
            "message": "Missing item type\nReturn a plain-object representation of `test`\nfree of cyclic properties etc.",
            "line": " server/mocha/mocha.js:2992"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " server/mocha/mocha.js:3013"
        },
        {
            "message": "Missing item type\nExpose `List`.",
            "line": " server/mocha/mocha.js:3020"
        },
        {
            "message": "Missing item type\nInitialize a new `List` test reporter.",
            "line": " server/mocha/mocha.js:3026"
        },
        {
            "message": "Missing item type\nReturn a plain-object representation of `test`\nfree of cyclic properties etc.",
            "line": " server/mocha/mocha.js:3057"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " server/mocha/mocha.js:3077"
        },
        {
            "message": "Missing item type\nExpose `JSON`.",
            "line": " server/mocha/mocha.js:3085"
        },
        {
            "message": "Missing item type\nInitialize a new `JSON` reporter.",
            "line": " server/mocha/mocha.js:3091"
        },
        {
            "message": "Missing item type\nReturn a plain-object representation of `test`\nfree of cyclic properties etc.",
            "line": " server/mocha/mocha.js:3132"
        },
        {
            "message": "Missing item type\nTransform `error` into a JSON object.",
            "line": " server/mocha/mocha.js:3150"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " server/mocha/mocha.js:3168"
        },
        {
            "message": "Missing item type\nExpose `Landing`.",
            "line": " server/mocha/mocha.js:3176"
        },
        {
            "message": "Missing item type\nAirplane color.",
            "line": " server/mocha/mocha.js:3182"
        },
        {
            "message": "Missing item type\nAirplane crash color.",
            "line": " server/mocha/mocha.js:3188"
        },
        {
            "message": "Missing item type\nRunway color.",
            "line": " server/mocha/mocha.js:3194"
        },
        {
            "message": "Missing item type\nInitialize a new `Landing` reporter.",
            "line": " server/mocha/mocha.js:3200"
        },
        {
            "message": "Missing item type\nInherit from `Base.prototype`.",
            "line": " server/mocha/mocha.js:3259"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " server/mocha/mocha.js:3272"
        },
        {
            "message": "Missing item type\nExpose `List`.",
            "line": " server/mocha/mocha.js:3280"
        },
        {
            "message": "Missing item type\nInitialize a new `List` test reporter.",
            "line": " server/mocha/mocha.js:3286"
        },
        {
            "message": "Missing item type\nInherit from `Base.prototype`.",
            "line": " server/mocha/mocha.js:3330"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " server/mocha/mocha.js:3343"
        },
        {
            "message": "Missing item type\nExpose `Markdown`.",
            "line": " server/mocha/mocha.js:3350"
        },
        {
            "message": "Missing item type\nInitialize a new `Markdown` reporter.",
            "line": " server/mocha/mocha.js:3356"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " server/mocha/mocha.js:3438"
        },
        {
            "message": "Missing item type\nExpose `Min`.",
            "line": " server/mocha/mocha.js:3444"
        },
        {
            "message": "Missing item type\nInitialize a new `Min` minimal test reporter (best used with --watch).",
            "line": " server/mocha/mocha.js:3450"
        },
        {
            "message": "Missing item type\nInherit from `Base.prototype`.",
            "line": " server/mocha/mocha.js:3470"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " server/mocha/mocha.js:3483"
        },
        {
            "message": "Missing item type\nExpose `Dot`.",
            "line": " server/mocha/mocha.js:3490"
        },
        {
            "message": "Missing item type\nInitialize a new `Dot` matrix test reporter.",
            "line": " server/mocha/mocha.js:3496"
        },
        {
            "message": "Missing item type\nDraw the nyan cat",
            "line": " server/mocha/mocha.js:3542"
        },
        {
            "message": "Missing item type\nDraw the \"scoreboard\" showing the number\nof passes, failures and pending tests.",
            "line": " server/mocha/mocha.js:3556"
        },
        {
            "message": "Missing item type\nAppend the rainbow.",
            "line": " server/mocha/mocha.js:3581"
        },
        {
            "message": "Missing item type\nDraw the rainbow.",
            "line": " server/mocha/mocha.js:3598"
        },
        {
            "message": "Missing item type\nDraw the nyan cat",
            "line": " server/mocha/mocha.js:3616"
        },
        {
            "message": "Missing item type\nDraw nyan cat face.",
            "line": " server/mocha/mocha.js:3652"
        },
        {
            "message": "Missing item type\nMove cursor up `n`.",
            "line": " server/mocha/mocha.js:3672"
        },
        {
            "message": "Missing item type\nMove cursor down `n`.",
            "line": " server/mocha/mocha.js:3683"
        },
        {
            "message": "Missing item type\nGenerate rainbow colors.",
            "line": " server/mocha/mocha.js:3694"
        },
        {
            "message": "Missing item type\nApply rainbow to the given `str`.",
            "line": " server/mocha/mocha.js:3716"
        },
        {
            "message": "Missing item type\nStdout helper.",
            "line": " server/mocha/mocha.js:3730"
        },
        {
            "message": "Missing item type\nInherit from `Base.prototype`.",
            "line": " server/mocha/mocha.js:3738"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " server/mocha/mocha.js:3751"
        },
        {
            "message": "Missing item type\nExpose `Progress`.",
            "line": " server/mocha/mocha.js:3759"
        },
        {
            "message": "Missing item type\nGeneral progress bar color.",
            "line": " server/mocha/mocha.js:3765"
        },
        {
            "message": "Missing item type\nInitialize a new `Progress` bar test reporter.",
            "line": " server/mocha/mocha.js:3771"
        },
        {
            "message": "Missing item type\nInherit from `Base.prototype`.",
            "line": " server/mocha/mocha.js:3838"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " server/mocha/mocha.js:3852"
        },
        {
            "message": "Missing item type\nExpose `Spec`.",
            "line": " server/mocha/mocha.js:3860"
        },
        {
            "message": "Missing item type\nInitialize a new `Spec` test reporter.",
            "line": " server/mocha/mocha.js:3866"
        },
        {
            "message": "Missing item type\nInherit from `Base.prototype`.",
            "line": " server/mocha/mocha.js:3929"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " server/mocha/mocha.js:3943"
        },
        {
            "message": "Missing item type\nExpose `TAP`.",
            "line": " server/mocha/mocha.js:3951"
        },
        {
            "message": "Missing item type\nInitialize a new `TAP` reporter.",
            "line": " server/mocha/mocha.js:3957"
        },
        {
            "message": "Missing item type\nReturn a TAP-safe title of `test`",
            "line": " server/mocha/mocha.js:4004"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " server/mocha/mocha.js:4020"
        },
        {
            "message": "Missing item type\nSave timer references to avoid Sinon interfering (see GH-237).",
            "line": " server/mocha/mocha.js:4028"
        },
        {
            "message": "Missing item type\nExpose `XUnit`.",
            "line": " server/mocha/mocha.js:4038"
        },
        {
            "message": "Missing item type\nInitialize a new `XUnit` reporter.",
            "line": " server/mocha/mocha.js:4044"
        },
        {
            "message": "Missing item type\nInherit from `Base.prototype`.",
            "line": " server/mocha/mocha.js:4085"
        },
        {
            "message": "Missing item type\nOutput tag for the given `test.`",
            "line": " server/mocha/mocha.js:4095"
        },
        {
            "message": "Missing item type\nHTML tag helper.",
            "line": " server/mocha/mocha.js:4116"
        },
        {
            "message": "Missing item type\nReturn cdata escaped CDATA `str`.",
            "line": " server/mocha/mocha.js:4134"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " server/mocha/mocha.js:4146"
        },
        {
            "message": "Missing item type\nSave timer references to avoid Sinon interfering (see GH-237).",
            "line": " server/mocha/mocha.js:4154"
        },
        {
            "message": "Missing item type\nObject#toString().",
            "line": " server/mocha/mocha.js:4164"
        },
        {
            "message": "Missing item type\nExpose `Runnable`.",
            "line": " server/mocha/mocha.js:4170"
        },
        {
            "message": "Missing item type\nInitialize a new `Runnable` with the given `title` and callback `fn`.",
            "line": " server/mocha/mocha.js:4176"
        },
        {
            "message": "Missing item type\nInherit from `EventEmitter.prototype`.",
            "line": " server/mocha/mocha.js:4195"
        },
        {
            "message": "Missing item type\nSet & get timeout `ms`.",
            "line": " server/mocha/mocha.js:4205"
        },
        {
            "message": "Missing item type\nSet & get slow `ms`.",
            "line": " server/mocha/mocha.js:4223"
        },
        {
            "message": "Missing item type\nSet and & get timeout `enabled`.",
            "line": " server/mocha/mocha.js:4239"
        },
        {
            "message": "Missing item type\nReturn the full title generated by recursively\nconcatenating the parent's full title.",
            "line": " server/mocha/mocha.js:4254"
        },
        {
            "message": "Missing item type\nClear the timeout.",
            "line": " server/mocha/mocha.js:4266"
        },
        {
            "message": "Missing item type\nInspect the runnable void of private properties.",
            "line": " server/mocha/mocha.js:4276"
        },
        {
            "message": "Missing item type\nReset the timeout.",
            "line": " server/mocha/mocha.js:4292"
        },
        {
            "message": "Missing item type\nWhitelist these globals for this test run",
            "line": " server/mocha/mocha.js:4310"
        },
        {
            "message": "Missing item type\nRun the test and invoke `fn(err)`.",
            "line": " server/mocha/mocha.js:4320"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " server/mocha/mocha.js:4416"
        },
        {
            "message": "Missing item type\nNon-enumerable globals.",
            "line": " server/mocha/mocha.js:4427"
        },
        {
            "message": "Missing item type\nExpose `Runner`.",
            "line": " server/mocha/mocha.js:4440"
        },
        {
            "message": "Missing item type\nInitialize a `Runner` for the given `suite`.\n\nEvents:\n\n  - `start`  execution started\n  - `end`  execution complete\n  - `suite`  (suite) test suite execution started\n  - `suite end`  (suite) all tests (and sub-suites) have finished\n  - `test`  (test) test execution started\n  - `test end`  (test) test completed\n  - `hook`  (hook) hook execution started\n  - `hook end`  (hook) hook complete\n  - `pass`  (test) test passed\n  - `fail`  (test, err) test failed\n  - `pending`  (test) test pending",
            "line": " server/mocha/mocha.js:4446"
        },
        {
            "message": "Missing item type\nWrapper for setImmediate, process.nextTick, or browser polyfill.",
            "line": " server/mocha/mocha.js:4479"
        },
        {
            "message": "Missing item type\nInherit from `EventEmitter.prototype`.",
            "line": " server/mocha/mocha.js:4488"
        },
        {
            "message": "Missing item type\nRun tests with full titles matching `re`. Updates runner.total\nwith number of tests matched.",
            "line": " server/mocha/mocha.js:4498"
        },
        {
            "message": "Missing item type\nReturns the number of tests matching the grep search for the\ngiven suite.",
            "line": " server/mocha/mocha.js:4516"
        },
        {
            "message": "Missing item type\nReturn a list of global properties.",
            "line": " server/mocha/mocha.js:4538"
        },
        {
            "message": "Missing item type\nAllow the given `arr` of globals.",
            "line": " server/mocha/mocha.js:4557"
        },
        {
            "message": "Missing item type\nCheck for global variable leaks.",
            "line": " server/mocha/mocha.js:4572"
        },
        {
            "message": "Missing item type\nFail the given `test`.",
            "line": " server/mocha/mocha.js:4602"
        },
        {
            "message": "Missing item type\nFail the given `hook` with `err`.\n\nHook failures work in the following pattern:\n- If bail, then exit\n- Failed `before` hook skips all tests in a suite and subsuites,\n  but jumps to corresponding `after` hook\n- Failed `before each` hook skips remaining tests in a\n  suite and jumps to corresponding `after each` hook,\n  which is run only once\n- Failed `after` hook does not alter\n  execution order\n- Failed `after each` hook skips remaining tests in a\n  suite and subsuites, but executes other `after each`\n  hooks",
            "line": " server/mocha/mocha.js:4621"
        },
        {
            "message": "Missing item type\nRun hook `name` callbacks and then invoke `fn()`.",
            "line": " server/mocha/mocha.js:4649"
        },
        {
            "message": "Missing item type\nRun hook `name` for the given array of `suites`\nin order, and callback `fn(err, errSuite)`.",
            "line": " server/mocha/mocha.js:4698"
        },
        {
            "message": "Missing item type\nRun hooks from the top level down.",
            "line": " server/mocha/mocha.js:4734"
        },
        {
            "message": "Missing item type\nRun hooks from the bottom up.",
            "line": " server/mocha/mocha.js:4747"
        },
        {
            "message": "Missing item type\nReturn an array of parent Suites from\nclosest to furthest.",
            "line": " server/mocha/mocha.js:4760"
        },
        {
            "message": "Missing item type\nRun the current test and callback `fn(err)`.",
            "line": " server/mocha/mocha.js:4775"
        },
        {
            "message": "Missing item type\nRun tests in the given `suite` and invoke\nthe callback `fn()` when complete.",
            "line": " server/mocha/mocha.js:4798"
        },
        {
            "message": "Missing item type\nRun the given `suite` and invoke the\ncallback `fn()` when complete.",
            "line": " server/mocha/mocha.js:4891"
        },
        {
            "message": "Missing item type\nHandle uncaught exceptions.",
            "line": " server/mocha/mocha.js:4946"
        },
        {
            "message": "Missing item type\nRun the root suite and invoke `fn(failures)`\non completion.",
            "line": " server/mocha/mocha.js:4978"
        },
        {
            "message": "Missing item type\nCleanly abort execution",
            "line": " server/mocha/mocha.js:5017"
        },
        {
            "message": "Missing item type\nFilter leaks with the given globals flagged as `ok`.",
            "line": " server/mocha/mocha.js:5028"
        },
        {
            "message": "Missing item type\nArray of globals dependent on the environment.",
            "line": " server/mocha/mocha.js:5062"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " server/mocha/mocha.js:5091"
        },
        {
            "message": "Missing item type\nExpose `Suite`.",
            "line": " server/mocha/mocha.js:5101"
        },
        {
            "message": "Missing item type\nCreate a new `Suite` with the given `title`\nand parent `Suite`. When a suite with the\nsame title is already present, that suite\nis returned to provide nicer reporter\nand more flexible meta-testing.",
            "line": " server/mocha/mocha.js:5107"
        },
        {
            "message": "Missing item type\nInitialize a new `Suite` with the given\n`title` and `ctx`.",
            "line": " server/mocha/mocha.js:5129"
        },
        {
            "message": "Missing item type\nInherit from `EventEmitter.prototype`.",
            "line": " server/mocha/mocha.js:5157"
        },
        {
            "message": "Missing item type\nReturn a clone of this `Suite`.",
            "line": " server/mocha/mocha.js:5167"
        },
        {
            "message": "Missing item type\nSet timeout `ms` or short-hand such as \"2s\".",
            "line": " server/mocha/mocha.js:5185"
        },
        {
            "message": "Missing item type\nSet timeout `enabled`.",
            "line": " server/mocha/mocha.js:5202"
        },
        {
            "message": "Missing item type\nSet slow `ms` or short-hand such as \"2s\".",
            "line": " server/mocha/mocha.js:5217"
        },
        {
            "message": "Missing item type\nSets whether to bail after first error.",
            "line": " server/mocha/mocha.js:5233"
        },
        {
            "message": "Missing item type\nRun `fn(test[, done])` before running tests.",
            "line": " server/mocha/mocha.js:5248"
        },
        {
            "message": "Missing item type\nRun `fn(test[, done])` after running tests.",
            "line": " server/mocha/mocha.js:5275"
        },
        {
            "message": "Missing item type\nRun `fn(test[, done])` before each test case.",
            "line": " server/mocha/mocha.js:5302"
        },
        {
            "message": "Missing item type\nRun `fn(test[, done])` after each test case.",
            "line": " server/mocha/mocha.js:5329"
        },
        {
            "message": "Missing item type\nAdd a test `suite`.",
            "line": " server/mocha/mocha.js:5356"
        },
        {
            "message": "Missing item type\nAdd a `test` to this suite.",
            "line": " server/mocha/mocha.js:5375"
        },
        {
            "message": "Missing item type\nReturn the full title generated by recursively\nconcatenating the parent's full title.",
            "line": " server/mocha/mocha.js:5394"
        },
        {
            "message": "Missing item type\nReturn the total number of tests.",
            "line": " server/mocha/mocha.js:5410"
        },
        {
            "message": "Missing item type\nIterates through each suite recursively to find\nall tests. Applies a function in the format\n`fn(test)`.",
            "line": " server/mocha/mocha.js:5423"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " server/mocha/mocha.js:5445"
        },
        {
            "message": "Missing item type\nExpose `Test`.",
            "line": " server/mocha/mocha.js:5451"
        },
        {
            "message": "Missing item type\nInitialize a new `Test` with the given `title` and callback `fn`.",
            "line": " server/mocha/mocha.js:5457"
        },
        {
            "message": "Missing item type\nInherit from `Runnable.prototype`.",
            "line": " server/mocha/mocha.js:5471"
        },
        {
            "message": "Missing item type\nModule dependencies.",
            "line": " server/mocha/mocha.js:5484"
        },
        {
            "message": "Missing item type\nIgnored directories.",
            "line": " server/mocha/mocha.js:5493"
        },
        {
            "message": "Missing item type\nEscape special characters in the given string of html.",
            "line": " server/mocha/mocha.js:5499"
        },
        {
            "message": "Missing item type\nArray#forEach (<=IE8)",
            "line": " server/mocha/mocha.js:5515"
        },
        {
            "message": "Missing item type\nArray#map (<=IE8)",
            "line": " server/mocha/mocha.js:5529"
        },
        {
            "message": "Missing item type\nArray#indexOf (<=IE8)",
            "line": " server/mocha/mocha.js:5545"
        },
        {
            "message": "Missing item type\nArray#reduce (<=IE8)",
            "line": " server/mocha/mocha.js:5562"
        },
        {
            "message": "Missing item type\nArray#filter (<=IE8)",
            "line": " server/mocha/mocha.js:5581"
        },
        {
            "message": "Missing item type\nObject.keys (<=IE8)",
            "line": " server/mocha/mocha.js:5600"
        },
        {
            "message": "Missing item type\nWatch the given `files` for changes\nand invoke `fn(file)` on modification.",
            "line": " server/mocha/mocha.js:5621"
        },
        {
            "message": "Missing item type\nIgnored files.",
            "line": " server/mocha/mocha.js:5640"
        },
        {
            "message": "Missing item type\nLookup files in the given `dir`.",
            "line": " server/mocha/mocha.js:5648"
        },
        {
            "message": "Missing item type\nCompute a slug from the given `str`.",
            "line": " server/mocha/mocha.js:5675"
        },
        {
            "message": "Missing item type\nStrip the function definition from `str`,\nand re-indent for pre whitespace.",
            "line": " server/mocha/mocha.js:5690"
        },
        {
            "message": "Missing item type\nEscape regular expression characters in `str`.",
            "line": " server/mocha/mocha.js:5710"
        },
        {
            "message": "Missing item type\nTrim the given `str`.",
            "line": " server/mocha/mocha.js:5722"
        },
        {
            "message": "Missing item type\nParse the given `qs`.",
            "line": " server/mocha/mocha.js:5734"
        },
        {
            "message": "Missing item type\nHighlight the given string of `js`.",
            "line": " server/mocha/mocha.js:5753"
        },
        {
            "message": "Missing item type\nHighlight the contents of tag `name`.",
            "line": " server/mocha/mocha.js:5773"
        },
        {
            "message": "Missing item type\nStringify `obj`.",
            "line": " server/mocha/mocha.js:5788"
        },
        {
            "message": "Missing item type\nReturn a new object that has the keys in sorted order.",
            "line": " server/mocha/mocha.js:5801"
        },
        {
            "message": "Missing item type\nSave timer references to avoid Sinon interfering (see GH-237).",
            "line": " server/mocha/mocha.js:5839"
        },
        {
            "message": "Missing item type\nNode shims.\n\nThese are meant only to allow\nmocha.js to run untouched, not\nto allow running node code in\nthe browser.",
            "line": " server/mocha/mocha.js:5849"
        },
        {
            "message": "Missing item type\nRemove uncaughtException listener.\nRevert to original onerror handler if previously defined.",
            "line": " server/mocha/mocha.js:5866"
        },
        {
            "message": "Missing item type\nImplements uncaughtException listener.",
            "line": " server/mocha/mocha.js:5883"
        },
        {
            "message": "Missing item type\nExpose mocha.",
            "line": " server/mocha/mocha.js:5897"
        },
        {
            "message": "Missing item type\nHigh-performance override of Runner.immediately.",
            "line": " server/mocha/mocha.js:5924"
        },
        {
            "message": "Missing item type\nFunction to allow assertion libraries to throw errors directly into mocha.\nThis is useful when running tests in a browser because window.onerror will\nonly receive the 'message' attribute of the Error.",
            "line": " server/mocha/mocha.js:5935"
        },
        {
            "message": "Missing item type\nOverride ui to ensure that the ui functions are initialized.\nNormally this would happen in Mocha.prototype.loadFiles.",
            "line": " server/mocha/mocha.js:5947"
        },
        {
            "message": "Missing item type\nSetup mocha with the given setting options.",
            "line": " server/mocha/mocha.js:5958"
        },
        {
            "message": "Missing item type\nRun mocha, returning the Runner.",
            "line": " server/mocha/mocha.js:5968"
        },
        {
            "message": "Missing item type\nExpose the process shim.",
            "line": " server/mocha/mocha.js:5989"
        },
        {
            "message": "Missing item type\nshould - test framework agnostic BDD-style assertions",
            "line": " server/mocha/should.js:1"
        },
        {
            "message": "Missing item type\nExpose assert to should\n\nThis allows you to do things like below\nwithout require()ing the assert module.\n\n   should.equal(foo.bar, undefined);",
            "line": " server/mocha/should.js:126"
        },
        {
            "message": "Missing item type\nAssert _obj_ exists, with optional message.",
            "line": " server/mocha/should.js:137"
        },
        {
            "message": "Missing item type\nAsserts _obj_ does not exist, with optional message.",
            "line": " server/mocha/should.js:152"
        },
        {
            "message": "Missing item type\nEchos the value of a value. Trys to print the value out\nin the best way possible given the different types.",
            "line": " server/mocha/should.js:943"
        },
        {
            "message": "Missing item type\nOur function should",
            "line": " server/mocha/should.js:1360"
        },
        {
            "message": "Missing item type\nInitialize a new `Assertion` with the given _obj_.",
            "line": " server/mocha/should.js:1369"
        },
        {
            "message": "Missing item type\nWay to extend Assertion function. It uses some logic\nto define only positive assertions and itself rule with negative assertion.\n\nAll actions happen in subcontext and this method take care about negation.\nPotentially we can add some more modifiers that does not depends from state of assertion.",
            "line": " server/mocha/should.js:1381"
        },
        {
            "message": "Missing item type\nExpose should to external world.",
            "line": " server/mocha/should.js:1446"
        },
        {
            "message": "Missing item type\nExpose api via `Object#should`.",
            "line": " server/mocha/should.js:1452"
        },
        {
            "message": "Missing item type\nNegation modifier.",
            "line": " server/mocha/should.js:1507"
        },
        {
            "message": "Missing item type\nAny modifier - it affect on execution of sequenced assertion to do not check all, but any of",
            "line": " server/mocha/should.js:1518"
        },
        {
            "message": "Missing item type\nCheck if given obj just a primitive type wrapper",
            "line": " server/mocha/should.js:1549"
        },
        {
            "message": "Missing item type\nMerge object b with object a.\n\n    var a = { foo: 'bar' }\n      , b = { bar: 'baz' };\n\n    utils.merge(a, b);\n    // => { foo: 'bar', bar: 'baz' }",
            "line": " server/mocha/should.js:1559"
        },
        {
            "message": "Missing item type\nEchos the value of a value. Trys to print the value out\nin the best way possible given the different types.",
            "line": " server/mocha/should.js:2188"
        },
        {
            "message": "Missing item type\nInherit the prototype methods from one constructor into another.\n\nThe Function.prototype.inherits from lang.js rewritten as a standalone\nfunction (not on Function.prototype). NOTE: If this file is to be loaded\nduring bootstrapping this function needs to be rewritten using some native\nfunctions as prototype setup using normal JavaScript does not work as\nexpected during bootstrapping (see mirror.js in r114903).",
            "line": " server/mocha/should.js:2628"
        },
        {
            "message": "Missing item type\nCreate mappings between the names parsed from useragent (based on\nhttps://github.com/tobie/ua-parser/blob/master/regexes.yaml) to caniuse\nname equivalents.\n\nEach caniuse name can match against many names.\n\nTo add a new mapping add the UA name to the appropriate key.",
            "line": " server/polyfills/lib/agent.js:3"
        },
        {
            "message": "Missing item type\njQuery: isNumeric\nhttps://github.com/jquery/jquery/blob/bbdfbb4ee859fe9319b348d88120ddc2c9efbd63/src/core.js#L212",
            "line": " server/polyfills/lib/agent.js:69"
        },
        {
            "message": "Missing item type\nApply a function to each element in the array and concatenate the result\nof the function into a new array.",
            "line": " server/polyfills/lib/aliases.js:3"
        },
        {
            "message": "Missing item type\nThe AliasResolver provides the logic used for expanding and resolving\npolyfill identifiers using more than one mechanism (if required).\n\nA polyfill identifier is an object with at least a 'name' and 'flags'\nproperty, where the 'name' is the string identifying a polyfill and\n'flags' is an array containing any flags that should be applied with\nthe polyfill (and subsequently to any aliased polyfills).\n\n e.g: { name: \"modernizr:es5\", flags: [\"always\"] }",
            "line": " server/polyfills/lib/aliases.js:17"
        },
        {
            "message": "Missing item type\npotentially alternate string identifiers (e.g. expanded names the alias refers to)\n\nThe key point is that each is invoked in sequence with the result of\nthe previous function as an argument.",
            "line": " server/polyfills/lib/aliases.js:30"
        },
        {
            "message": "Missing item type\nRun a name resolver function over each polyfill identifier in an array,\nremove duplicates after the resolution and keep track of aliases and\nflags.",
            "line": " server/polyfills/lib/aliases.js:38"
        },
        {
            "message": "Missing item type\nResolve an array of polyfill identifiers by iteratively invoking the\nresolver functions on each element.",
            "line": " server/polyfills/lib/aliases.js:110"
        },
        {
            "message": "Missing item type\nlogic.",
            "line": " server/polyfills/lib/aliases.js:130"
        },
        {
            "message": "Missing item type",
            "line": " server/polyfills/polyfills/html5shiv/polyfill.js:1"
        },
        {
            "message": "Missing item type",
            "line": " server/polyfills/polyfills/html5shiv/polyfill.js:6"
        },
        {
            "message": "Missing item type",
            "line": " server/polyfills/polyfills/html5shiv/polyfill.js:9"
        },
        {
            "message": "Missing item type",
            "line": " server/polyfills/polyfills/html5shiv/polyfill.js:12"
        },
        {
            "message": "Missing item type",
            "line": " server/polyfills/polyfills/html5shiv/polyfill.js:15"
        },
        {
            "message": "Missing item type",
            "line": " server/polyfills/polyfills/html5shiv/polyfill.js:18"
        },
        {
            "message": "Missing item type",
            "line": " server/polyfills/polyfills/html5shiv/polyfill.js:21"
        },
        {
            "message": "Missing item type",
            "line": " server/polyfills/polyfills/html5shiv/polyfill.js:24"
        },
        {
            "message": "Missing item type",
            "line": " server/polyfills/polyfills/html5shiv/polyfill.js:27"
        },
        {
            "message": "Missing item type",
            "line": " server/polyfills/polyfills/html5shiv/polyfill.js:30"
        },
        {
            "message": "Missing item type\nCreates a style sheet with the given CSS text and adds it to the document.",
            "line": " server/polyfills/polyfills/html5shiv/polyfill.js:60"
        },
        {
            "message": "Missing item type\nReturns the value of `html5.elements` as an array.",
            "line": " server/polyfills/polyfills/html5shiv/polyfill.js:75"
        },
        {
            "message": "Missing item type\nExtends the built-in list of html5 elements",
            "line": " server/polyfills/polyfills/html5shiv/polyfill.js:85"
        },
        {
            "message": "Missing item type\nReturns the data associated to the given document",
            "line": " server/polyfills/polyfills/html5shiv/polyfill.js:103"
        },
        {
            "message": "Missing item type\nreturns a shived element for the given nodeName and document",
            "line": " server/polyfills/polyfills/html5shiv/polyfill.js:120"
        },
        {
            "message": "Missing item type\nreturns a shived DocumentFragment for the given document",
            "line": " server/polyfills/polyfills/html5shiv/polyfill.js:157"
        },
        {
            "message": "Missing item type\nShivs the `createElement` and `createDocumentFragment` methods of the document.",
            "line": " server/polyfills/polyfills/html5shiv/polyfill.js:181"
        },
        {
            "message": "Missing item type\nShivs the given document.",
            "line": " server/polyfills/polyfills/html5shiv/polyfill.js:219"
        },
        {
            "message": "Missing item type\nThe `html5` object is exposed so that more elements can be shived and\nexisting shiving can be detected on iframes.",
            "line": " server/polyfills/polyfills/html5shiv/polyfill.js:249"
        },
        {
            "message": "Missing item type\nAn array or space separated string of node names of the elements to shiv.",
            "line": " server/polyfills/polyfills/html5shiv/polyfill.js:260"
        },
        {
            "message": "Missing item type\ncurrent version of html5shiv",
            "line": " server/polyfills/polyfills/html5shiv/polyfill.js:267"
        },
        {
            "message": "Missing item type\nA flag to indicate that the HTML5 style sheet should be inserted.",
            "line": " server/polyfills/polyfills/html5shiv/polyfill.js:272"
        },
        {
            "message": "Missing item type\nIs equal to true if a browser supports creating unknown/HTML5 elements",
            "line": " server/polyfills/polyfills/html5shiv/polyfill.js:279"
        },
        {
            "message": "Missing item type\nA flag to indicate that the document's `createElement` and `createDocumentFragment`\nmethods should be overwritten.",
            "line": " server/polyfills/polyfills/html5shiv/polyfill.js:286"
        },
        {
            "message": "Missing item type\nA string to describe the type of `html5` object (\"default\" or \"default print\").",
            "line": " server/polyfills/polyfills/html5shiv/polyfill.js:294"
        },
        {
            "message": "Missing item type",
            "line": " server/polyfills/helpers.js:1"
        },
        {
            "message": "Missing item type\nWrapper for built-in http.js to emulate the browser XMLHttpRequest object.\n\nThis can be used with JS designed for browsers to improve reuse of code and\nallow the use of existing libraries.\n\nUsage: include(\"XMLHttpRequest.js\") and use XMLHttpRequest per W3C specs.",
            "line": " site/dist/itagsbuild.js:44"
        },
        {
            "message": "Missing item type\nPrivate variables",
            "line": " site/dist/itagsbuild.js:63"
        },
        {
            "message": "Missing item type\nConstants",
            "line": " site/dist/itagsbuild.js:130"
        },
        {
            "message": "Missing item type\nPublic vars",
            "line": " site/dist/itagsbuild.js:140"
        },
        {
            "message": "Missing item type\nPrivate methods",
            "line": " site/dist/itagsbuild.js:156"
        },
        {
            "message": "Missing item type\nCheck if the specified header is allowed.",
            "line": " site/dist/itagsbuild.js:164"
        },
        {
            "message": "Missing item type\nCheck if the specified method is allowed.",
            "line": " site/dist/itagsbuild.js:174"
        },
        {
            "message": "Missing item type\nPublic methods",
            "line": " site/dist/itagsbuild.js:184"
        },
        {
            "message": "Missing item type\nOpen the connection. Currently supports local server requests.",
            "line": " site/dist/itagsbuild.js:188"
        },
        {
            "message": "Missing item type\nDisables or enables isAllowedHttpHeader() check the request. Enabled by default.\nThis does not conform to the W3C spec.",
            "line": " site/dist/itagsbuild.js:217"
        },
        {
            "message": "Missing item type\nSets a header for the request.",
            "line": " site/dist/itagsbuild.js:227"
        },
        {
            "message": "Missing item type\nGets a header from the server response.",
            "line": " site/dist/itagsbuild.js:247"
        },
        {
            "message": "Missing item type\nGets all the response headers.",
            "line": " site/dist/itagsbuild.js:261"
        },
        {
            "message": "Missing item type\nGets a request header",
            "line": " site/dist/itagsbuild.js:281"
        },
        {
            "message": "Missing item type\nSends the request to the server.",
            "line": " site/dist/itagsbuild.js:296"
        },
        {
            "message": "Missing item type\nCalled when an error is encountered to deal with it.",
            "line": " site/dist/itagsbuild.js:556"
        },
        {
            "message": "Missing item type\nAborts a request.",
            "line": " site/dist/itagsbuild.js:567"
        },
        {
            "message": "Missing item type\nAdds an event listener. Preferred method of binding to events.",
            "line": " site/dist/itagsbuild.js:589"
        },
        {
            "message": "Missing item type\nRemove an event callback that has already been bound.\nOnly works on the matching funciton, cannot be a copy.",
            "line": " site/dist/itagsbuild.js:600"
        },
        {
            "message": "Missing item type\nDispatch any events, including both \"on\" methods and events attached using addEventListener.",
            "line": " site/dist/itagsbuild.js:613"
        },
        {
            "message": "Missing item type\nChanges readyState and calls onreadystatechange.",
            "line": " site/dist/itagsbuild.js:627"
        },
        {
            "message": "Missing item type\n+ContentHandler+ErrorHandler\n+LexicalHandler+EntityResolver2\n-DeclHandler-DTDHandler \n\nDefaultHandler:EntityResolver, DTDHandler, ContentHandler, ErrorHandler\nDefaultHandler2:DefaultHandler,LexicalHandler, DeclHandler, EntityResolver2",
            "line": " site/dist/itagsbuild.js:11083"
        },
        {
            "message": "Missing item type",
            "line": " site/dist/itagsbuild.js:11099"
        },
        {
            "message": "Missing item type",
            "line": " site/dist/itagsbuild.js:11194"
        },
        {
            "message": "Missing item type\n^\\w+\\.prototype\\.([_\\w]+)\\s*=\\s*((?:.*\\{\\s*?[\\r\\n][\\s\\S]*?^})|\\S.*?(?=[;\\r\\n]));?\n^\\w+\\.prototype\\.([_\\w]+)\\s*=\\s*(\\S.*?(?=[;\\r\\n]));?",
            "line": " site/dist/itagsbuild.js:11289"
        },
        {
            "message": "Missing item type",
            "line": " site/dist/itagsbuild.js:11365"
        },
        {
            "message": "Missing item type\nThe number of nodes in the list. The range of valid child node indices is 0 to length-1 inclusive.",
            "line": " site/dist/itagsbuild.js:11373"
        },
        {
            "message": "Missing item type\nReturns the indexth item in the collection. If index is greater than or equal to the number of nodes in the list, this returns null.",
            "line": " site/dist/itagsbuild.js:11378"
        },
        {
            "message": "Missing item type\nObjects implementing the NamedNodeMap interface are used to represent collections of nodes that can be accessed by name. Note that NamedNodeMap does not inherit from NodeList; NamedNodeMaps are not maintained in any particular order. Objects contained in an object implementing NamedNodeMap may also be accessed by an ordinal index, but this is simply to allow convenient enumeration of the contents of a NamedNodeMap, and does not imply that the DOM specifies an order to these Nodes.\n NamedNodeMap objects in the DOM are live.\n used for attributes or DocumentType entities",
            "line": " site/dist/itagsbuild.js:11411"
        },
        {
            "message": "Missing item type",
            "line": " site/dist/itagsbuild.js:11522"
        },
        {
            "message": "Missing item type",
            "line": " site/dist/itagsbuild.js:11576"
        },
        {
            "message": "Missing item type",
            "line": " site/dist/itagsbuild.js:11691"
        },
        {
            "message": "Missing item type\nattributes;\nchildren;\n\nwriteable properties:\nnodeValue,Attr:value,CharacterData:data\nprefix",
            "line": " site/dist/itagsbuild.js:11746"
        },
        {
            "message": "Missing item type\npreformance key(refChild == null)",
            "line": " site/dist/itagsbuild.js:11770"
        },
        {
            "message": "Missing item type",
            "line": " site/dist/itagsbuild.js:12594"
        },
        {
            "message": "Missing item type",
            "line": " site/dist/itagsbuild.js:12755"
        },
        {
            "message": "Missing item type",
            "line": " site/dist/itagsbuild.js:12929"
        },
        {
            "message": "Missing item type",
            "line": " site/dist/itagsbuild.js:13018"
        },
        {
            "message": "Missing item type\nIf `TYPED_ARRAY_SUPPORT`:\n  === true    Use Uint8Array implementation (fastest)\n  === false   Use Object implementation (most compatible, even IE6)\n\nBrowsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\nOpera 11.6+, iOS 4.2+.\n\nNote:\n\n- Implementation must support adding new properties to `Uint8Array` instances.\n  Firefox 4-29 lacked support, fixed in Firefox 30+.\n  See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n\n - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n\n - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n   incorrect length in some situations.\n\nWe detect these buggy browsers and set `TYPED_ARRAY_SUPPORT` to `false` so they will\nget the Object implementation, which is slower but will work correctly.",
            "line": " site/dist/itagsbuild.js:14014"
        },
        {
            "message": "Missing item type\nClass: Buffer\n=============\n\nThe Buffer constructor returns instances of `Uint8Array` that are augmented\nwith function properties for all the node `Buffer` API functions. We use\n`Uint8Array` so that square bracket notation works as expected -- it returns\na single octet.\n\nBy augmenting the instances, we can avoid modifying the `Uint8Array`\nprototype.",
            "line": " site/dist/itagsbuild.js:14049"
        },
        {
            "message": "Missing item type\nCreates a new `ArrayBuffer` with the *copied* memory of the buffer instance.\nAdded in Node 0.12. Only available in browsers that support ArrayBuffer.",
            "line": " site/dist/itagsbuild.js:14962"
        },
        {
            "message": "Missing item type\nAugment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods",
            "line": " site/dist/itagsbuild.js:14987"
        },
        {
            "message": "Missing item type",
            "line": " site/dist/itagsbuild.js:16314"
        },
        {
            "message": "Missing item type\nThe `punycode` object.",
            "line": " site/dist/itagsbuild.js:16323"
        },
        {
            "message": "Missing item type",
            "line": " site/dist/itagsbuild.js:16330"
        },
        {
            "message": "Missing item type",
            "line": " site/dist/itagsbuild.js:16333"
        },
        {
            "message": "Missing item type",
            "line": " site/dist/itagsbuild.js:16343"
        },
        {
            "message": "Missing item type",
            "line": " site/dist/itagsbuild.js:16348"
        },
        {
            "message": "Missing item type",
            "line": " site/dist/itagsbuild.js:16355"
        },
        {
            "message": "Missing item type",
            "line": " site/dist/itagsbuild.js:16360"
        },
        {
            "message": "Missing item type\nA generic error utility function.",
            "line": " site/dist/itagsbuild.js:16365"
        },
        {
            "message": "Missing item type\nA generic `Array#map` utility function.",
            "line": " site/dist/itagsbuild.js:16375"
        },
        {
            "message": "Missing item type\nA simple `Array#map`-like wrapper to work with domain name strings.",
            "line": " site/dist/itagsbuild.js:16391"
        },
        {
            "message": "Missing item type\nCreates an array containing the numeric code points of each Unicode\ncharacter in the string. While JavaScript uses UCS-2 internally,\nthis function will convert a pair of surrogate halves (each of which\nUCS-2 exposes as separate characters) into a single code point,\nmatching UTF-16.",
            "line": " site/dist/itagsbuild.js:16404"
        },
        {
            "message": "Missing item type\nCreates a string based on an array of numeric code points.",
            "line": " site/dist/itagsbuild.js:16443"
        },
        {
            "message": "Missing item type\nConverts a basic code point into a digit/integer.",
            "line": " site/dist/itagsbuild.js:16464"
        },
        {
            "message": "Missing item type\nConverts a digit/integer into a basic code point.",
            "line": " site/dist/itagsbuild.js:16486"
        },
        {
            "message": "Missing item type\nBias adaptation function as per section 3.4 of RFC 3492.\nhttp://tools.ietf.org/html/rfc3492#section-3.4",
            "line": " site/dist/itagsbuild.js:16503"
        },
        {
            "message": "Missing item type\nConverts a Punycode string of ASCII-only symbols to a string of Unicode\nsymbols.",
            "line": " site/dist/itagsbuild.js:16518"
        },
        {
            "message": "Missing item type",
            "line": " site/dist/itagsbuild.js:16541"
        },
        {
            "message": "Missing item type\nConverts a string of Unicode symbols to a Punycode string of ASCII-only\nsymbols.",
            "line": " site/dist/itagsbuild.js:16619"
        },
        {
            "message": "Missing item type",
            "line": " site/dist/itagsbuild.js:16639"
        },
        {
            "message": "Missing item type",
            "line": " site/dist/itagsbuild.js:16641"
        },
        {
            "message": "Missing item type\nConverts a Punycode string representing a domain name to Unicode. Only the\nPunycoded parts of the domain name will be converted, i.e. it doesn't\nmatter if you call it on a string that has already been converted to\nUnicode.",
            "line": " site/dist/itagsbuild.js:16733"
        },
        {
            "message": "Missing item type\nConverts a Unicode string representing a domain name to Punycode. Only the\nnon-ASCII parts of the domain name will be converted, i.e. it doesn't\nmatter if you call it with a domain that's already in ASCII.",
            "line": " site/dist/itagsbuild.js:16751"
        },
        {
            "message": "Missing item type",
            "line": " site/dist/itagsbuild.js:16769"
        },
        {
            "message": "Missing item type\nA string representing the current Punycode.js version number.",
            "line": " site/dist/itagsbuild.js:16771"
        },
        {
            "message": "Missing item type\nAn object of methods to convert from JavaScript's internal character\nrepresentation (UCS-2) to Unicode code points, and back.",
            "line": " site/dist/itagsbuild.js:16777"
        },
        {
            "message": "Missing item type",
            "line": " site/dist/itagsbuild.js:16794"
        },
        {
            "message": "Missing item type\nEchos the value of a value. Trys to print the value out\nin the best way possible given the different types.",
            "line": " site/dist/itagsbuild.js:20001"
        },
        {
            "message": "Missing item type\nInherit the prototype methods from one constructor into another.\n\nThe Function.prototype.inherits from lang.js rewritten as a standalone\nfunction (not on Function.prototype). NOTE: If this file is to be loaded\nduring bootstrapping this function needs to be rewritten using some native\nfunctions as prototype setup using normal JavaScript does not work as\nexpected during bootstrapping (see mirror.js in r114903).",
            "line": " site/dist/itagsbuild.js:20441"
        },
        {
            "message": "Missing item type\nWrapper for built-in http.js to emulate the browser XMLHttpRequest object.\n\nThis can be used with JS designed for browsers to improve reuse of code and\nallow the use of existing libraries.\n\nUsage: include(\"XMLHttpRequest.js\") and use XMLHttpRequest per W3C specs.",
            "line": " site-preview/dist/itagsbuild.js:44"
        },
        {
            "message": "Missing item type\nPrivate variables",
            "line": " site-preview/dist/itagsbuild.js:63"
        },
        {
            "message": "Missing item type\nConstants",
            "line": " site-preview/dist/itagsbuild.js:130"
        },
        {
            "message": "Missing item type\nPublic vars",
            "line": " site-preview/dist/itagsbuild.js:140"
        },
        {
            "message": "Missing item type\nPrivate methods",
            "line": " site-preview/dist/itagsbuild.js:156"
        },
        {
            "message": "Missing item type\nCheck if the specified header is allowed.",
            "line": " site-preview/dist/itagsbuild.js:164"
        },
        {
            "message": "Missing item type\nCheck if the specified method is allowed.",
            "line": " site-preview/dist/itagsbuild.js:174"
        },
        {
            "message": "Missing item type\nPublic methods",
            "line": " site-preview/dist/itagsbuild.js:184"
        },
        {
            "message": "Missing item type\nOpen the connection. Currently supports local server requests.",
            "line": " site-preview/dist/itagsbuild.js:188"
        },
        {
            "message": "Missing item type\nDisables or enables isAllowedHttpHeader() check the request. Enabled by default.\nThis does not conform to the W3C spec.",
            "line": " site-preview/dist/itagsbuild.js:217"
        },
        {
            "message": "Missing item type\nSets a header for the request.",
            "line": " site-preview/dist/itagsbuild.js:227"
        },
        {
            "message": "Missing item type\nGets a header from the server response.",
            "line": " site-preview/dist/itagsbuild.js:247"
        },
        {
            "message": "Missing item type\nGets all the response headers.",
            "line": " site-preview/dist/itagsbuild.js:261"
        },
        {
            "message": "Missing item type\nGets a request header",
            "line": " site-preview/dist/itagsbuild.js:281"
        },
        {
            "message": "Missing item type\nSends the request to the server.",
            "line": " site-preview/dist/itagsbuild.js:296"
        },
        {
            "message": "Missing item type\nCalled when an error is encountered to deal with it.",
            "line": " site-preview/dist/itagsbuild.js:556"
        },
        {
            "message": "Missing item type\nAborts a request.",
            "line": " site-preview/dist/itagsbuild.js:567"
        },
        {
            "message": "Missing item type\nAdds an event listener. Preferred method of binding to events.",
            "line": " site-preview/dist/itagsbuild.js:589"
        },
        {
            "message": "Missing item type\nRemove an event callback that has already been bound.\nOnly works on the matching funciton, cannot be a copy.",
            "line": " site-preview/dist/itagsbuild.js:600"
        },
        {
            "message": "Missing item type\nDispatch any events, including both \"on\" methods and events attached using addEventListener.",
            "line": " site-preview/dist/itagsbuild.js:613"
        },
        {
            "message": "Missing item type\nChanges readyState and calls onreadystatechange.",
            "line": " site-preview/dist/itagsbuild.js:627"
        },
        {
            "message": "Missing item type\n+ContentHandler+ErrorHandler\n+LexicalHandler+EntityResolver2\n-DeclHandler-DTDHandler \n\nDefaultHandler:EntityResolver, DTDHandler, ContentHandler, ErrorHandler\nDefaultHandler2:DefaultHandler,LexicalHandler, DeclHandler, EntityResolver2",
            "line": " site-preview/dist/itagsbuild.js:11083"
        },
        {
            "message": "Missing item type",
            "line": " site-preview/dist/itagsbuild.js:11099"
        },
        {
            "message": "Missing item type",
            "line": " site-preview/dist/itagsbuild.js:11194"
        },
        {
            "message": "Missing item type\n^\\w+\\.prototype\\.([_\\w]+)\\s*=\\s*((?:.*\\{\\s*?[\\r\\n][\\s\\S]*?^})|\\S.*?(?=[;\\r\\n]));?\n^\\w+\\.prototype\\.([_\\w]+)\\s*=\\s*(\\S.*?(?=[;\\r\\n]));?",
            "line": " site-preview/dist/itagsbuild.js:11289"
        },
        {
            "message": "Missing item type",
            "line": " site-preview/dist/itagsbuild.js:11365"
        },
        {
            "message": "Missing item type\nThe number of nodes in the list. The range of valid child node indices is 0 to length-1 inclusive.",
            "line": " site-preview/dist/itagsbuild.js:11373"
        },
        {
            "message": "Missing item type\nReturns the indexth item in the collection. If index is greater than or equal to the number of nodes in the list, this returns null.",
            "line": " site-preview/dist/itagsbuild.js:11378"
        },
        {
            "message": "Missing item type\nObjects implementing the NamedNodeMap interface are used to represent collections of nodes that can be accessed by name. Note that NamedNodeMap does not inherit from NodeList; NamedNodeMaps are not maintained in any particular order. Objects contained in an object implementing NamedNodeMap may also be accessed by an ordinal index, but this is simply to allow convenient enumeration of the contents of a NamedNodeMap, and does not imply that the DOM specifies an order to these Nodes.\n NamedNodeMap objects in the DOM are live.\n used for attributes or DocumentType entities",
            "line": " site-preview/dist/itagsbuild.js:11411"
        },
        {
            "message": "Missing item type",
            "line": " site-preview/dist/itagsbuild.js:11522"
        },
        {
            "message": "Missing item type",
            "line": " site-preview/dist/itagsbuild.js:11576"
        },
        {
            "message": "Missing item type",
            "line": " site-preview/dist/itagsbuild.js:11691"
        },
        {
            "message": "Missing item type\nattributes;\nchildren;\n\nwriteable properties:\nnodeValue,Attr:value,CharacterData:data\nprefix",
            "line": " site-preview/dist/itagsbuild.js:11746"
        },
        {
            "message": "Missing item type\npreformance key(refChild == null)",
            "line": " site-preview/dist/itagsbuild.js:11770"
        },
        {
            "message": "Missing item type",
            "line": " site-preview/dist/itagsbuild.js:12594"
        },
        {
            "message": "Missing item type",
            "line": " site-preview/dist/itagsbuild.js:12755"
        },
        {
            "message": "Missing item type",
            "line": " site-preview/dist/itagsbuild.js:12929"
        },
        {
            "message": "Missing item type",
            "line": " site-preview/dist/itagsbuild.js:13018"
        },
        {
            "message": "Missing item type\nIf `TYPED_ARRAY_SUPPORT`:\n  === true    Use Uint8Array implementation (fastest)\n  === false   Use Object implementation (most compatible, even IE6)\n\nBrowsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\nOpera 11.6+, iOS 4.2+.\n\nNote:\n\n- Implementation must support adding new properties to `Uint8Array` instances.\n  Firefox 4-29 lacked support, fixed in Firefox 30+.\n  See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n\n - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n\n - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n   incorrect length in some situations.\n\nWe detect these buggy browsers and set `TYPED_ARRAY_SUPPORT` to `false` so they will\nget the Object implementation, which is slower but will work correctly.",
            "line": " site-preview/dist/itagsbuild.js:14014"
        },
        {
            "message": "Missing item type\nClass: Buffer\n=============\n\nThe Buffer constructor returns instances of `Uint8Array` that are augmented\nwith function properties for all the node `Buffer` API functions. We use\n`Uint8Array` so that square bracket notation works as expected -- it returns\na single octet.\n\nBy augmenting the instances, we can avoid modifying the `Uint8Array`\nprototype.",
            "line": " site-preview/dist/itagsbuild.js:14049"
        },
        {
            "message": "Missing item type\nCreates a new `ArrayBuffer` with the *copied* memory of the buffer instance.\nAdded in Node 0.12. Only available in browsers that support ArrayBuffer.",
            "line": " site-preview/dist/itagsbuild.js:14962"
        },
        {
            "message": "Missing item type\nAugment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods",
            "line": " site-preview/dist/itagsbuild.js:14987"
        },
        {
            "message": "Missing item type",
            "line": " site-preview/dist/itagsbuild.js:16314"
        },
        {
            "message": "Missing item type\nThe `punycode` object.",
            "line": " site-preview/dist/itagsbuild.js:16323"
        },
        {
            "message": "Missing item type",
            "line": " site-preview/dist/itagsbuild.js:16330"
        },
        {
            "message": "Missing item type",
            "line": " site-preview/dist/itagsbuild.js:16333"
        },
        {
            "message": "Missing item type",
            "line": " site-preview/dist/itagsbuild.js:16343"
        },
        {
            "message": "Missing item type",
            "line": " site-preview/dist/itagsbuild.js:16348"
        },
        {
            "message": "Missing item type",
            "line": " site-preview/dist/itagsbuild.js:16355"
        },
        {
            "message": "Missing item type",
            "line": " site-preview/dist/itagsbuild.js:16360"
        },
        {
            "message": "Missing item type\nA generic error utility function.",
            "line": " site-preview/dist/itagsbuild.js:16365"
        },
        {
            "message": "Missing item type\nA generic `Array#map` utility function.",
            "line": " site-preview/dist/itagsbuild.js:16375"
        },
        {
            "message": "Missing item type\nA simple `Array#map`-like wrapper to work with domain name strings.",
            "line": " site-preview/dist/itagsbuild.js:16391"
        },
        {
            "message": "Missing item type\nCreates an array containing the numeric code points of each Unicode\ncharacter in the string. While JavaScript uses UCS-2 internally,\nthis function will convert a pair of surrogate halves (each of which\nUCS-2 exposes as separate characters) into a single code point,\nmatching UTF-16.",
            "line": " site-preview/dist/itagsbuild.js:16404"
        },
        {
            "message": "Missing item type\nCreates a string based on an array of numeric code points.",
            "line": " site-preview/dist/itagsbuild.js:16443"
        },
        {
            "message": "Missing item type\nConverts a basic code point into a digit/integer.",
            "line": " site-preview/dist/itagsbuild.js:16464"
        },
        {
            "message": "Missing item type\nConverts a digit/integer into a basic code point.",
            "line": " site-preview/dist/itagsbuild.js:16486"
        },
        {
            "message": "Missing item type\nBias adaptation function as per section 3.4 of RFC 3492.\nhttp://tools.ietf.org/html/rfc3492#section-3.4",
            "line": " site-preview/dist/itagsbuild.js:16503"
        },
        {
            "message": "Missing item type\nConverts a Punycode string of ASCII-only symbols to a string of Unicode\nsymbols.",
            "line": " site-preview/dist/itagsbuild.js:16518"
        },
        {
            "message": "Missing item type",
            "line": " site-preview/dist/itagsbuild.js:16541"
        },
        {
            "message": "Missing item type\nConverts a string of Unicode symbols to a Punycode string of ASCII-only\nsymbols.",
            "line": " site-preview/dist/itagsbuild.js:16619"
        },
        {
            "message": "Missing item type",
            "line": " site-preview/dist/itagsbuild.js:16639"
        },
        {
            "message": "Missing item type",
            "line": " site-preview/dist/itagsbuild.js:16641"
        },
        {
            "message": "Missing item type\nConverts a Punycode string representing a domain name to Unicode. Only the\nPunycoded parts of the domain name will be converted, i.e. it doesn't\nmatter if you call it on a string that has already been converted to\nUnicode.",
            "line": " site-preview/dist/itagsbuild.js:16733"
        },
        {
            "message": "Missing item type\nConverts a Unicode string representing a domain name to Punycode. Only the\nnon-ASCII parts of the domain name will be converted, i.e. it doesn't\nmatter if you call it with a domain that's already in ASCII.",
            "line": " site-preview/dist/itagsbuild.js:16751"
        },
        {
            "message": "Missing item type",
            "line": " site-preview/dist/itagsbuild.js:16769"
        },
        {
            "message": "Missing item type\nA string representing the current Punycode.js version number.",
            "line": " site-preview/dist/itagsbuild.js:16771"
        },
        {
            "message": "Missing item type\nAn object of methods to convert from JavaScript's internal character\nrepresentation (UCS-2) to Unicode code points, and back.",
            "line": " site-preview/dist/itagsbuild.js:16777"
        },
        {
            "message": "Missing item type",
            "line": " site-preview/dist/itagsbuild.js:16794"
        },
        {
            "message": "Missing item type\nEchos the value of a value. Trys to print the value out\nin the best way possible given the different types.",
            "line": " site-preview/dist/itagsbuild.js:20001"
        },
        {
            "message": "Missing item type\nInherit the prototype methods from one constructor into another.\n\nThe Function.prototype.inherits from lang.js rewritten as a standalone\nfunction (not on Function.prototype). NOTE: If this file is to be loaded\nduring bootstrapping this function needs to be rewritten using some native\nfunctions as prototype setup using normal JavaScript does not work as\nexpected during bootstrapping (see mirror.js in r114903).",
            "line": " site-preview/dist/itagsbuild.js:20441"
        },
        {
            "message": "Missing item type",
            "line": " src/itags.core/itags.core.js:1"
        }
    ]
}